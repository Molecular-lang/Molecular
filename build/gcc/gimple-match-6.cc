/* Generated automatically by the program `genmatch' from
   a IL pattern matching and simplification description.  */
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-function"

#include "gimple-match-auto.h"

bool
gimple_maybe_bit_not (tree t, tree *res_ops, tree (*valueize)(tree) ATTRIBUTE_UNUSED)
{
  const tree type = TREE_TYPE (t);
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (t))
    {
    case INTEGER_CST:
      {
	{
	  tree captures[1] ATTRIBUTE_UNUSED = { t };
	  {
	    res_ops[0] = captures[0];
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 8, __FILE__, __LINE__, false);
	    return true;
	  }
	}
        break;
      }
    default:;
    }
{
  tree t_pops[1];
  if (gimple_bit_not_with_nop (t, t_pops, valueize))
    {
      tree _p0 = t_pops[0];
      {
	tree captures[2] ATTRIBUTE_UNUSED = { t, _p0 };
	{
	  res_ops[0] = captures[0];
	  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 9, __FILE__, __LINE__, false);
	  return true;
	}
      }
    }
}
{
  tree t_pops[1];
  if (gimple_maybe_cmp (t, t_pops, valueize))
    {
      tree _p0 = t_pops[0];
      {
	tree captures[2] ATTRIBUTE_UNUSED = { t, _p0 };
	{
	  res_ops[0] = captures[0];
	  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 10, __FILE__, __LINE__, false);
	  return true;
	}
      }
    }
}
{
  tree t_pops[2];
  if (gimple_bit_xor_cst (t, t_pops, valueize))
    {
      tree _p0 = t_pops[0];
      tree _p1 = t_pops[1];
      {
	tree captures[3] ATTRIBUTE_UNUSED = { t, _p0, _p1 };
	{
	  res_ops[0] = captures[0];
	  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 11, __FILE__, __LINE__, false);
	  return true;
	}
      }
    }
}
  return false;
}

bool
gimple_with_known_nonzero_bits_1 (tree t, tree (*valueize)(tree) ATTRIBUTE_UNUSED)
{
  const tree type = TREE_TYPE (t);
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (t))
    {
    case INTEGER_CST:
      {
	{
	  tree captures[1] ATTRIBUTE_UNUSED = { t };
	  {
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 37, __FILE__, __LINE__, false);
	    return true;
	  }
	}
        break;
      }
    case SSA_NAME:
      {
	{
	  tree captures[1] ATTRIBUTE_UNUSED = { t };
	  if (INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
)
	    {
	      {
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 38, __FILE__, __LINE__, false);
		return true;
	      }
	    }
	}
        break;
      }
    default:;
    }
  return false;
}

bool
gimple_unsigned_integer_sat_sub (tree t, tree *res_ops, tree (*valueize)(tree) ATTRIBUTE_UNUSED)
{
  const tree type = TREE_TYPE (t);
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (t))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, t))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case COND_EXPR:
	        {
		  tree _p0 = gimple_assign_rhs1 (_a1);
		  _p0 = do_valueize (valueize, _p0);
		  tree _p1 = gimple_assign_rhs2 (_a1);
		  _p1 = do_valueize (valueize, _p1);
		  tree _p2 = gimple_assign_rhs3 (_a1);
		  _p2 = do_valueize (valueize, _p2);
		  switch (TREE_CODE (_p0))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p0))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case GT_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case MINUS_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
						    {
						      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
								if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
								  {
								    if (types_match (type, captures[0], captures[1])
)
								      {
									{
									  res_ops[0] = captures[0];
									  res_ops[1] = captures[1];
									  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 55, __FILE__, __LINE__, false);
									  return true;
									}
								      }
								  }
							      }
							    }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  switch (TREE_CODE (_q50))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q50))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case MINUS_EXPR:
							        {
								  tree _q60 = gimple_assign_rhs1 (_a4);
								  _q60 = do_valueize (valueize, _q60);
								  tree _q61 = gimple_assign_rhs2 (_a4);
								  _q61 = do_valueize (valueize, _q61);
								  switch (TREE_CODE (_q60))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q60))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q70 = gimple_assign_rhs1 (_a5);
										  _q70 = do_valueize (valueize, _q70);
										  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
										    {
										      switch (TREE_CODE (_q61))
										        {
											case SSA_NAME:
											  if (gimple *_d6 = get_def (valueize, _q61))
											    {
											      if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											        switch (gimple_assign_rhs_code (_a6))
												  {
												  CASE_CONVERT:
												    {
												      tree _q90 = gimple_assign_rhs1 (_a6);
												      _q90 = do_valueize (valueize, _q90);
												      if ((_q90 == _q21 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q21, 0) && types_match (_q90, _q21)))
													{
													  if (integer_zerop (_p2))
													    {
													      {
														tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
														if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
														  {
														    if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
														      {
															{
															  res_ops[0] = captures[0];
															  res_ops[1] = captures[1];
															  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
															  return true;
															}
														      }
														  }
													      }
													    }
												        }
												      break;
												    }
												  default:;
												  }
											    }
											  break;
										        default:;
										        }
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
								    {
								      if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
									{
									  if (integer_zerop (_p2))
									    {
									      {
										tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
										if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
										  {
										    if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
										      {
											{
											  res_ops[0] = captures[0];
											  res_ops[1] = captures[1];
											  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
											  return true;
											}
										      }
										  }
									      }
									    }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case MINUS_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_q50))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q50))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      CASE_CONVERT:
							        {
								  tree _q60 = gimple_assign_rhs1 (_a4);
								  _q60 = do_valueize (valueize, _q60);
								  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
								    {
								      switch (TREE_CODE (_q51))
								        {
									case SSA_NAME:
									  if (gimple *_d5 = get_def (valueize, _q51))
									    {
									      if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									        switch (gimple_assign_rhs_code (_a5))
										  {
										  CASE_CONVERT:
										    {
										      tree _q80 = gimple_assign_rhs1 (_a5);
										      _q80 = do_valueize (valueize, _q80);
										      if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
											{
											  if (integer_zerop (_p2))
											    {
											      {
												tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
												if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
												  {
												    if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
												      {
													{
													  res_ops[0] = captures[0];
													  res_ops[1] = captures[1];
													  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
													  return true;
													}
												      }
												  }
											      }
											    }
										        }
										      break;
										    }
										  default:;
										  }
									    }
									  break;
								        default:;
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
						    {
						      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
								if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
								  {
								    if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
								      {
									{
									  res_ops[0] = captures[0];
									  res_ops[1] = captures[1];
									  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
									  return true;
									}
								      }
								  }
							      }
							    }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  if (tree_swap_operands_p (_q20, _q21))
				    std::swap (_q20, _q21);
				  switch (TREE_CODE (_q20))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q20))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case IMAGPART_EXPR:
					        {
						  tree _q30 = TREE_OPERAND (gimple_assign_rhs1 (_a3), 0);
						  if ((TREE_CODE (_q30) == SSA_NAME
						       || is_gimple_min_invariant (_q30)))
						    {
						      _q30 = do_valueize (valueize, _q30);
						      switch (TREE_CODE (_q30))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q30))
							    {
							      if (gcall *_c4 = dyn_cast <gcall *> (_d4))
							        switch (gimple_call_combined_fn (_c4))
								  {
								  case CFN_SUB_OVERFLOW:
								    if (gimple_call_num_args (_c4) == 2)
								      {
									tree _q40 = gimple_call_arg (_c4, 0);
									_q40 = do_valueize (valueize, _q40);
									tree _q41 = gimple_call_arg (_c4, 1);
									_q41 = do_valueize (valueize, _q41);
									if (integer_zerop (_q21))
									  {
									    switch (TREE_CODE (_p1))
									      {
									      case SSA_NAME:
									        if (gimple *_d5 = get_def (valueize, _p1))
									          {
										    if (gassign *_a5 = dyn_cast <gassign *> (_d5))
										      switch (gimple_assign_rhs_code (_a5))
											{
											case REALPART_EXPR:
											  {
											    tree _q80 = TREE_OPERAND (gimple_assign_rhs1 (_a5), 0);
											    if ((TREE_CODE (_q80) == SSA_NAME
											         || is_gimple_min_invariant (_q80)))
											      {
												_q80 = do_valueize (valueize, _q80);
												if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
												  {
												    if (integer_zerop (_p2))
												      {
													{
													  tree captures[3] ATTRIBUTE_UNUSED = { _q40, _q41, _q30 };
													  if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
													    {
													      if (types_match (type, captures[0], captures[1])
)
														{
														  {
														    res_ops[0] = captures[0];
														    res_ops[1] = captures[1];
														    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 57, __FILE__, __LINE__, false);
														    return true;
														  }
														}
													    }
													}
												      }
												  }
											      }
											    break;
											  }
											default:;
											}
									          }
									        break;
									      default:;
									      }
									  }
								      }
								    break;
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  if (tree_swap_operands_p (_q20, _q21))
				    std::swap (_q20, _q21);
				  switch (TREE_CODE (_q20))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q20))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case IMAGPART_EXPR:
					        {
						  tree _q30 = TREE_OPERAND (gimple_assign_rhs1 (_a3), 0);
						  if ((TREE_CODE (_q30) == SSA_NAME
						       || is_gimple_min_invariant (_q30)))
						    {
						      _q30 = do_valueize (valueize, _q30);
						      switch (TREE_CODE (_q30))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q30))
							    {
							      if (gcall *_c4 = dyn_cast <gcall *> (_d4))
							        switch (gimple_call_combined_fn (_c4))
								  {
								  case CFN_SUB_OVERFLOW:
								    if (gimple_call_num_args (_c4) == 2)
								      {
									tree _q40 = gimple_call_arg (_c4, 0);
									_q40 = do_valueize (valueize, _q40);
									tree _q41 = gimple_call_arg (_c4, 1);
									_q41 = do_valueize (valueize, _q41);
									if (integer_zerop (_q21))
									  {
									    if (integer_zerop (_p1))
									      {
										switch (TREE_CODE (_p2))
										  {
										  case SSA_NAME:
										    if (gimple *_d5 = get_def (valueize, _p2))
										      {
											if (gassign *_a5 = dyn_cast <gassign *> (_d5))
											  switch (gimple_assign_rhs_code (_a5))
											    {
											    case REALPART_EXPR:
											      {
												tree _q90 = TREE_OPERAND (gimple_assign_rhs1 (_a5), 0);
												if ((TREE_CODE (_q90) == SSA_NAME
												     || is_gimple_min_invariant (_q90)))
												  {
												    _q90 = do_valueize (valueize, _q90);
												    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
												      {
													{
													  tree captures[3] ATTRIBUTE_UNUSED = { _q40, _q41, _q30 };
													  if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
													    {
													      if (types_match (type, captures[0], captures[1])
)
														{
														  {
														    res_ops[0] = captures[0];
														    res_ops[1] = captures[1];
														    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 58, __FILE__, __LINE__, false);
														    return true;
														  }
														}
													    }
													}
												      }
												  }
											        break;
											      }
											    default:;
											    }
										      }
										    break;
									          default:;
									          }
									      }
									  }
								      }
								    break;
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case MINUS_EXPR:
						      {
							tree _q50 = gimple_assign_rhs1 (_a3);
							_q50 = do_valueize (valueize, _q50);
							tree _q51 = gimple_assign_rhs2 (_a3);
							_q51 = do_valueize (valueize, _q51);
							switch (TREE_CODE (_q50))
							  {
							  case INTEGER_CST:
							    {
							      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
								{
								  if (integer_zerop (_p2))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _q50, _q20, _q21 };
									if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
									  {
									    if (types_match (type, captures[1])
)
									      {
										{
 unsigned precision = TYPE_PRECISION (type);
 wide_int max = wi::mask (precision, false, precision);
 wide_int c0 = wi::to_wide (captures[0]);
 wide_int c2 = wi::to_wide (captures[2]);
 wide_int c0_add_1 = wi::add (c0, wi::uhwi (1, precision));
										    if (wi::eq_p (c2, max) && wi::eq_p (c0_add_1, max)
)
										      {
											{
											  res_ops[0] = captures[0];
											  res_ops[1] = captures[1];
											  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 59, __FILE__, __LINE__, false);
											  return true;
											}
										      }
										}
									      }
									  }
								      }
								    }
							        }
							      break;
							    }
						          default:;
						          }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case MINUS_EXPR:
						      {
							tree _q50 = gimple_assign_rhs1 (_a3);
							_q50 = do_valueize (valueize, _q50);
							tree _q51 = gimple_assign_rhs2 (_a3);
							_q51 = do_valueize (valueize, _q51);
							switch (TREE_CODE (_q50))
							  {
							  case INTEGER_CST:
							    {
							      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
								{
								  if (integer_zerop (_p2))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _q50, _q20, _q21 };
									if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
									  {
									    if (types_match (type, captures[1]) && int_fits_type_p (captures[0], type)
)
									      {
										{
 unsigned precision = TYPE_PRECISION (type);
 wide_int max = wi::mask (precision, false, precision);
 wide_int c0 = wi::to_wide (captures[0]);
 wide_int c2 = wi::to_wide (captures[2]);
 wide_int c2_add_1 = wi::add (c2, wi::uhwi (1, precision));
 bool equal_p = wi::eq_p (c0, c2);
 bool less_than_1_p = !wi::eq_p (c2, max) && wi::eq_p (c2_add_1, c0);
										    if (equal_p || less_than_1_p
)
										      {
											{
											  res_ops[0] = captures[0];
											  res_ops[1] = captures[1];
											  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 60, __FILE__, __LINE__, false);
											  return true;
											}
										      }
										}
									      }
									  }
								      }
								    }
							        }
							      break;
							    }
						          default:;
						          }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
				if (integer_onep (_q21))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _p1))
				          {
					    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					      switch (gimple_assign_rhs_code (_a3))
						{
						case BIT_XOR_EXPR:
						  {
						    tree _q50 = gimple_assign_rhs1 (_a3);
						    _q50 = do_valueize (valueize, _q50);
						    tree _q51 = gimple_assign_rhs2 (_a3);
						    _q51 = do_valueize (valueize, _q51);
						    if (tree_swap_operands_p (_q50, _q51))
						      std::swap (_q50, _q51);
						    if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
						      {
							if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
							  {
							    if (integer_onep (_q51))
							      {
								if (integer_zerop (_p2))
								  {
								    {
								      tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
								      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
									{
									  if (types_match (type, captures[1])
)
									    {
									      {
										res_ops[0] = captures[0];
										res_ops[1] = captures[1];
										if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 61, __FILE__, __LINE__, false);
										return true;
									      }
									    }
									}
								    }
								  }
							      }
							  }
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case GT_EXPR:
		      {
			tree _q20 = TREE_OPERAND (_p0, 0);
			if ((TREE_CODE (_q20) == SSA_NAME
			     || is_gimple_min_invariant (_q20)))
			  {
			    _q20 = do_valueize (valueize, _q20);
			    tree _q21 = TREE_OPERAND (_p0, 1);
			    if ((TREE_CODE (_q21) == SSA_NAME
			         || is_gimple_min_invariant (_q21)))
			      {
				_q21 = do_valueize (valueize, _q21);
				switch (TREE_CODE (_p1))
				  {
				  case SSA_NAME:
				    if (gimple *_d2 = get_def (valueize, _p1))
				      {
					if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					  switch (gimple_assign_rhs_code (_a2))
					    {
					    case MINUS_EXPR:
					      {
						tree _q50 = gimple_assign_rhs1 (_a2);
						_q50 = do_valueize (valueize, _q50);
						tree _q51 = gimple_assign_rhs2 (_a2);
						_q51 = do_valueize (valueize, _q51);
						if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
						  {
						    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
						      {
							if (integer_zerop (_p2))
							  {
							    {
							      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
							      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
								{
								  if (types_match (type, captures[0], captures[1])
)
								    {
								      {
									res_ops[0] = captures[0];
									res_ops[1] = captures[1];
									if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 55, __FILE__, __LINE__, false);
									return true;
								      }
								    }
								}
							    }
							  }
						      }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
			      }
			  }
		        break;
		      }
		    case GE_EXPR:
		      {
			tree _q20 = TREE_OPERAND (_p0, 0);
			if ((TREE_CODE (_q20) == SSA_NAME
			     || is_gimple_min_invariant (_q20)))
			  {
			    _q20 = do_valueize (valueize, _q20);
			    tree _q21 = TREE_OPERAND (_p0, 1);
			    if ((TREE_CODE (_q21) == SSA_NAME
			         || is_gimple_min_invariant (_q21)))
			      {
				_q21 = do_valueize (valueize, _q21);
				switch (TREE_CODE (_p1))
				  {
				  case SSA_NAME:
				    if (gimple *_d2 = get_def (valueize, _p1))
				      {
					if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					  switch (gimple_assign_rhs_code (_a2))
					    {
					    CASE_CONVERT:
					      {
						tree _q50 = gimple_assign_rhs1 (_a2);
						_q50 = do_valueize (valueize, _q50);
						switch (TREE_CODE (_q50))
						  {
						  case SSA_NAME:
						    if (gimple *_d3 = get_def (valueize, _q50))
						      {
							if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							  switch (gimple_assign_rhs_code (_a3))
							    {
							    case MINUS_EXPR:
							      {
								tree _q60 = gimple_assign_rhs1 (_a3);
								_q60 = do_valueize (valueize, _q60);
								tree _q61 = gimple_assign_rhs2 (_a3);
								_q61 = do_valueize (valueize, _q61);
								switch (TREE_CODE (_q60))
								  {
								  case SSA_NAME:
								    if (gimple *_d4 = get_def (valueize, _q60))
								      {
									if (gassign *_a4 = dyn_cast <gassign *> (_d4))
									  switch (gimple_assign_rhs_code (_a4))
									    {
									    CASE_CONVERT:
									      {
										tree _q70 = gimple_assign_rhs1 (_a4);
										_q70 = do_valueize (valueize, _q70);
										if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
										  {
										    switch (TREE_CODE (_q61))
										      {
										      case SSA_NAME:
										        if (gimple *_d5 = get_def (valueize, _q61))
										          {
											    if (gassign *_a5 = dyn_cast <gassign *> (_d5))
											      switch (gimple_assign_rhs_code (_a5))
												{
												CASE_CONVERT:
												  {
												    tree _q90 = gimple_assign_rhs1 (_a5);
												    _q90 = do_valueize (valueize, _q90);
												    if ((_q90 == _q21 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q21, 0) && types_match (_q90, _q21)))
												      {
													if (integer_zerop (_p2))
													  {
													    {
													      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
													      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
														{
														  if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
														    {
														      {
															res_ops[0] = captures[0];
															res_ops[1] = captures[1];
															if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
															return true;
														      }
														    }
														}
													    }
													  }
												      }
												    break;
												  }
												default:;
												}
										          }
										        break;
										      default:;
										      }
										  }
									        break;
									      }
									    default:;
									    }
								      }
								    break;
							          default:;
							          }
								if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
								  {
								    if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
								      {
									if (integer_zerop (_p2))
									  {
									    {
									      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
									      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
										{
										  if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
										    {
										      {
											res_ops[0] = captures[0];
											res_ops[1] = captures[1];
											if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
											return true;
										      }
										    }
										}
									    }
									  }
								      }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
					        break;
					      }
					    case MINUS_EXPR:
					      {
						tree _q50 = gimple_assign_rhs1 (_a2);
						_q50 = do_valueize (valueize, _q50);
						tree _q51 = gimple_assign_rhs2 (_a2);
						_q51 = do_valueize (valueize, _q51);
						switch (TREE_CODE (_q50))
						  {
						  case SSA_NAME:
						    if (gimple *_d3 = get_def (valueize, _q50))
						      {
							if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							  switch (gimple_assign_rhs_code (_a3))
							    {
							    CASE_CONVERT:
							      {
								tree _q60 = gimple_assign_rhs1 (_a3);
								_q60 = do_valueize (valueize, _q60);
								if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
								  {
								    switch (TREE_CODE (_q51))
								      {
								      case SSA_NAME:
								        if (gimple *_d4 = get_def (valueize, _q51))
								          {
									    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
									      switch (gimple_assign_rhs_code (_a4))
										{
										CASE_CONVERT:
										  {
										    tree _q80 = gimple_assign_rhs1 (_a4);
										    _q80 = do_valueize (valueize, _q80);
										    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
										      {
											if (integer_zerop (_p2))
											  {
											    {
											      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
											      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
												{
												  if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
												    {
												      {
													res_ops[0] = captures[0];
													res_ops[1] = captures[1];
													if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
													return true;
												      }
												    }
												}
											    }
											  }
										      }
										    break;
										  }
										default:;
										}
								          }
								        break;
								      default:;
								      }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
						  {
						    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
						      {
							if (integer_zerop (_p2))
							  {
							    {
							      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
							      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
								{
								  if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
								    {
								      {
									res_ops[0] = captures[0];
									res_ops[1] = captures[1];
									if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
									return true;
								      }
								    }
								}
							    }
							  }
						      }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
			      }
			  }
		        break;
		      }
		    case EQ_EXPR:
		      {
			tree _q20 = TREE_OPERAND (_p0, 0);
			if ((TREE_CODE (_q20) == SSA_NAME
			     || is_gimple_min_invariant (_q20)))
			  {
			    _q20 = do_valueize (valueize, _q20);
			    tree _q21 = TREE_OPERAND (_p0, 1);
			    if ((TREE_CODE (_q21) == SSA_NAME
			         || is_gimple_min_invariant (_q21)))
			      {
				_q21 = do_valueize (valueize, _q21);
				if (tree_swap_operands_p (_q20, _q21))
				  std::swap (_q20, _q21);
				switch (TREE_CODE (_q20))
				  {
				  case SSA_NAME:
				    if (gimple *_d2 = get_def (valueize, _q20))
				      {
					if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					  switch (gimple_assign_rhs_code (_a2))
					    {
					    case IMAGPART_EXPR:
					      {
						tree _q30 = TREE_OPERAND (gimple_assign_rhs1 (_a2), 0);
						if ((TREE_CODE (_q30) == SSA_NAME
						     || is_gimple_min_invariant (_q30)))
						  {
						    _q30 = do_valueize (valueize, _q30);
						    switch (TREE_CODE (_q30))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q30))
						          {
							    if (gcall *_c3 = dyn_cast <gcall *> (_d3))
							      switch (gimple_call_combined_fn (_c3))
								{
								case CFN_SUB_OVERFLOW:
								  if (gimple_call_num_args (_c3) == 2)
								    {
								      tree _q40 = gimple_call_arg (_c3, 0);
								      _q40 = do_valueize (valueize, _q40);
								      tree _q41 = gimple_call_arg (_c3, 1);
								      _q41 = do_valueize (valueize, _q41);
								      if (integer_zerop (_q21))
									{
									  switch (TREE_CODE (_p1))
									    {
									    case SSA_NAME:
									      if (gimple *_d4 = get_def (valueize, _p1))
									        {
										  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
										    switch (gimple_assign_rhs_code (_a4))
										      {
										      case REALPART_EXPR:
										        {
											  tree _q80 = TREE_OPERAND (gimple_assign_rhs1 (_a4), 0);
											  if ((TREE_CODE (_q80) == SSA_NAME
											       || is_gimple_min_invariant (_q80)))
											    {
											      _q80 = do_valueize (valueize, _q80);
											      if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
												{
												  if (integer_zerop (_p2))
												    {
												      {
													tree captures[3] ATTRIBUTE_UNUSED = { _q40, _q41, _q30 };
													if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
													  {
													    if (types_match (type, captures[0], captures[1])
)
													      {
														{
														  res_ops[0] = captures[0];
														  res_ops[1] = captures[1];
														  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 57, __FILE__, __LINE__, false);
														  return true;
														}
													      }
													  }
												      }
												    }
											        }
											    }
										          break;
										        }
										      default:;
										      }
									        }
									      break;
									    default:;
									    }
								        }
								    }
								  break;
								default:;
								}
						          }
						        break;
						      default:;
						      }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
			      }
			  }
		        break;
		      }
		    case NE_EXPR:
		      {
			tree _q20 = TREE_OPERAND (_p0, 0);
			if ((TREE_CODE (_q20) == SSA_NAME
			     || is_gimple_min_invariant (_q20)))
			  {
			    _q20 = do_valueize (valueize, _q20);
			    tree _q21 = TREE_OPERAND (_p0, 1);
			    if ((TREE_CODE (_q21) == SSA_NAME
			         || is_gimple_min_invariant (_q21)))
			      {
				_q21 = do_valueize (valueize, _q21);
				if (tree_swap_operands_p (_q20, _q21))
				  std::swap (_q20, _q21);
				switch (TREE_CODE (_q20))
				  {
				  case SSA_NAME:
				    if (gimple *_d2 = get_def (valueize, _q20))
				      {
					if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					  switch (gimple_assign_rhs_code (_a2))
					    {
					    case IMAGPART_EXPR:
					      {
						tree _q30 = TREE_OPERAND (gimple_assign_rhs1 (_a2), 0);
						if ((TREE_CODE (_q30) == SSA_NAME
						     || is_gimple_min_invariant (_q30)))
						  {
						    _q30 = do_valueize (valueize, _q30);
						    switch (TREE_CODE (_q30))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q30))
						          {
							    if (gcall *_c3 = dyn_cast <gcall *> (_d3))
							      switch (gimple_call_combined_fn (_c3))
								{
								case CFN_SUB_OVERFLOW:
								  if (gimple_call_num_args (_c3) == 2)
								    {
								      tree _q40 = gimple_call_arg (_c3, 0);
								      _q40 = do_valueize (valueize, _q40);
								      tree _q41 = gimple_call_arg (_c3, 1);
								      _q41 = do_valueize (valueize, _q41);
								      if (integer_zerop (_q21))
									{
									  if (integer_zerop (_p1))
									    {
									      switch (TREE_CODE (_p2))
									        {
										case SSA_NAME:
										  if (gimple *_d4 = get_def (valueize, _p2))
										    {
										      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
										        switch (gimple_assign_rhs_code (_a4))
											  {
											  case REALPART_EXPR:
											    {
											      tree _q90 = TREE_OPERAND (gimple_assign_rhs1 (_a4), 0);
											      if ((TREE_CODE (_q90) == SSA_NAME
											           || is_gimple_min_invariant (_q90)))
											        {
												  _q90 = do_valueize (valueize, _q90);
												  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
												    {
												      {
													tree captures[3] ATTRIBUTE_UNUSED = { _q40, _q41, _q30 };
													if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
													  {
													    if (types_match (type, captures[0], captures[1])
)
													      {
														{
														  res_ops[0] = captures[0];
														  res_ops[1] = captures[1];
														  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 58, __FILE__, __LINE__, false);
														  return true;
														}
													      }
													  }
												      }
												    }
											        }
											      break;
											    }
											  default:;
											  }
										    }
										  break;
									        default:;
									        }
									    }
								        }
								    }
								  break;
								default:;
								}
						          }
						        break;
						      default:;
						      }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case MINUS_EXPR:
						    {
						      tree _q50 = gimple_assign_rhs1 (_a2);
						      _q50 = do_valueize (valueize, _q50);
						      tree _q51 = gimple_assign_rhs2 (_a2);
						      _q51 = do_valueize (valueize, _q51);
						      switch (TREE_CODE (_q50))
						        {
							case INTEGER_CST:
							  {
							    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
							      {
								if (integer_zerop (_p2))
								  {
								    {
								      tree captures[3] ATTRIBUTE_UNUSED = { _q50, _q20, _q21 };
								      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
									{
									  if (types_match (type, captures[1])
)
									    {
									      {
 unsigned precision = TYPE_PRECISION (type);
 wide_int max = wi::mask (precision, false, precision);
 wide_int c0 = wi::to_wide (captures[0]);
 wide_int c2 = wi::to_wide (captures[2]);
 wide_int c0_add_1 = wi::add (c0, wi::uhwi (1, precision));
										  if (wi::eq_p (c2, max) && wi::eq_p (c0_add_1, max)
)
										    {
										      {
											res_ops[0] = captures[0];
											res_ops[1] = captures[1];
											if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 59, __FILE__, __LINE__, false);
											return true;
										      }
										    }
									      }
									    }
									}
								    }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			      }
			  }
		        break;
		      }
		    case LE_EXPR:
		      {
			tree _q20 = TREE_OPERAND (_p0, 0);
			if ((TREE_CODE (_q20) == SSA_NAME
			     || is_gimple_min_invariant (_q20)))
			  {
			    _q20 = do_valueize (valueize, _q20);
			    tree _q21 = TREE_OPERAND (_p0, 1);
			    if ((TREE_CODE (_q21) == SSA_NAME
			         || is_gimple_min_invariant (_q21)))
			      {
				_q21 = do_valueize (valueize, _q21);
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case MINUS_EXPR:
						    {
						      tree _q50 = gimple_assign_rhs1 (_a2);
						      _q50 = do_valueize (valueize, _q50);
						      tree _q51 = gimple_assign_rhs2 (_a2);
						      _q51 = do_valueize (valueize, _q51);
						      switch (TREE_CODE (_q50))
						        {
							case INTEGER_CST:
							  {
							    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
							      {
								if (integer_zerop (_p2))
								  {
								    {
								      tree captures[3] ATTRIBUTE_UNUSED = { _q50, _q20, _q21 };
								      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
									{
									  if (types_match (type, captures[1]) && int_fits_type_p (captures[0], type)
)
									    {
									      {
 unsigned precision = TYPE_PRECISION (type);
 wide_int max = wi::mask (precision, false, precision);
 wide_int c0 = wi::to_wide (captures[0]);
 wide_int c2 = wi::to_wide (captures[2]);
 wide_int c2_add_1 = wi::add (c2, wi::uhwi (1, precision));
 bool equal_p = wi::eq_p (c0, c2);
 bool less_than_1_p = !wi::eq_p (c2, max) && wi::eq_p (c2_add_1, c0);
										  if (equal_p || less_than_1_p
)
										    {
										      {
											res_ops[0] = captures[0];
											res_ops[1] = captures[1];
											if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 60, __FILE__, __LINE__, false);
											return true;
										      }
										    }
									      }
									    }
									}
								    }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			      if (integer_onep (_q21))
				{
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p1))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a2);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a2);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
						    {
						      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
							{
							  if (integer_onep (_q51))
							    {
							      if (integer_zerop (_p2))
								{
								  {
								    tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
								    if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
								      {
									if (types_match (type, captures[1])
)
									  {
									    {
									      res_ops[0] = captures[0];
									      res_ops[1] = captures[1];
									      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 61, __FILE__, __LINE__, false);
									      return true;
									    }
									  }
								      }
								  }
							        }
							    }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			        }
			      }
			  }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case MULT_EXPR:
	        {
		  tree _p0 = gimple_assign_rhs1 (_a1);
		  _p0 = do_valueize (valueize, _p0);
		  tree _p1 = gimple_assign_rhs2 (_a1);
		  _p1 = do_valueize (valueize, _p1);
		  if (tree_swap_operands_p (_p0, _p1))
		    std::swap (_p0, _p1);
		  switch (TREE_CODE (_p0))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p0))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  switch (TREE_CODE (_q50))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q50))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GT_EXPR:
							        {
								  tree _q60 = gimple_assign_rhs1 (_a4);
								  _q60 = do_valueize (valueize, _q60);
								  tree _q61 = gimple_assign_rhs2 (_a4);
								  _q61 = do_valueize (valueize, _q61);
								  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
								    {
								      if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
									{
									  {
									    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
									    if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
									      {
										if (types_match (type, captures[0], captures[1])
)
										  {
										    {
										      res_ops[0] = captures[0];
										      res_ops[1] = captures[1];
										      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 62, __FILE__, __LINE__, false);
										      return true;
										    }
										  }
									      }
									  }
								        }
								    }
							          break;
							        }
							      case GE_EXPR:
							        {
								  tree _q60 = gimple_assign_rhs1 (_a4);
								  _q60 = do_valueize (valueize, _q60);
								  tree _q61 = gimple_assign_rhs2 (_a4);
								  _q61 = do_valueize (valueize, _q61);
								  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
								    {
								      if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
									{
									  {
									    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
									    if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
									      {
										if (types_match (type, captures[0], captures[1])
)
										  {
										    {
										      res_ops[0] = captures[0];
										      res_ops[1] = captures[1];
										      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 63, __FILE__, __LINE__, false);
										      return true;
										    }
										  }
									      }
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      CASE_CONVERT:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  switch (TREE_CODE (_q20))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q20))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case GT_EXPR:
					        {
						  tree _q30 = gimple_assign_rhs1 (_a3);
						  _q30 = do_valueize (valueize, _q30);
						  tree _q31 = gimple_assign_rhs2 (_a3);
						  _q31 = do_valueize (valueize, _q31);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case MINUS_EXPR:
							        {
								  tree _q60 = gimple_assign_rhs1 (_a4);
								  _q60 = do_valueize (valueize, _q60);
								  tree _q61 = gimple_assign_rhs2 (_a4);
								  _q61 = do_valueize (valueize, _q61);
								  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
								    {
								      if ((_q61 == _q31 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q31, 0) && types_match (_q61, _q31)))
									{
									  {
									    tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q31 };
									    if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
									      {
										if (types_match (type, captures[0], captures[1])
)
										  {
										    {
										      res_ops[0] = captures[0];
										      res_ops[1] = captures[1];
										      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 62, __FILE__, __LINE__, false);
										      return true;
										    }
										  }
									      }
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case GE_EXPR:
					        {
						  tree _q30 = gimple_assign_rhs1 (_a3);
						  _q30 = do_valueize (valueize, _q30);
						  tree _q31 = gimple_assign_rhs2 (_a3);
						  _q31 = do_valueize (valueize, _q31);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case MINUS_EXPR:
							        {
								  tree _q60 = gimple_assign_rhs1 (_a4);
								  _q60 = do_valueize (valueize, _q60);
								  tree _q61 = gimple_assign_rhs2 (_a4);
								  _q61 = do_valueize (valueize, _q61);
								  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
								    {
								      if ((_q61 == _q31 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q31, 0) && types_match (_q61, _q31)))
									{
									  {
									    tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q31 };
									    if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
									      {
										if (types_match (type, captures[0], captures[1])
)
										  {
										    {
										      res_ops[0] = captures[0];
										      res_ops[1] = captures[1];
										      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 63, __FILE__, __LINE__, false);
										      return true;
										    }
										  }
									      }
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case REALPART_EXPR:
			        {
				  tree _q20 = TREE_OPERAND (gimple_assign_rhs1 (_a2), 0);
				  if ((TREE_CODE (_q20) == SSA_NAME
				       || is_gimple_min_invariant (_q20)))
				    {
				      _q20 = do_valueize (valueize, _q20);
				      switch (TREE_CODE (_q20))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _q20))
					    {
					      if (gcall *_c3 = dyn_cast <gcall *> (_d3))
					        switch (gimple_call_combined_fn (_c3))
						  {
						  case CFN_SUB_OVERFLOW:
						    if (gimple_call_num_args (_c3) == 2)
						      {
							tree _q30 = gimple_call_arg (_c3, 0);
							_q30 = do_valueize (valueize, _q30);
							tree _q31 = gimple_call_arg (_c3, 1);
							_q31 = do_valueize (valueize, _q31);
							switch (TREE_CODE (_p1))
							  {
							  case SSA_NAME:
							    if (gimple *_d4 = get_def (valueize, _p1))
							      {
								if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								  switch (gimple_assign_rhs_code (_a4))
								    {
								    case BIT_XOR_EXPR:
								      {
									tree _q60 = gimple_assign_rhs1 (_a4);
									_q60 = do_valueize (valueize, _q60);
									tree _q61 = gimple_assign_rhs2 (_a4);
									_q61 = do_valueize (valueize, _q61);
									if (tree_swap_operands_p (_q60, _q61))
									  std::swap (_q60, _q61);
									switch (TREE_CODE (_q60))
									  {
									  case SSA_NAME:
									    if (gimple *_d5 = get_def (valueize, _q60))
									      {
										if (gassign *_a5 = dyn_cast <gassign *> (_d5))
										  switch (gimple_assign_rhs_code (_a5))
										    {
										    case IMAGPART_EXPR:
										      {
											tree _q70 = TREE_OPERAND (gimple_assign_rhs1 (_a5), 0);
											if ((TREE_CODE (_q70) == SSA_NAME
											     || is_gimple_min_invariant (_q70)))
											  {
											    _q70 = do_valueize (valueize, _q70);
											    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
											      {
												if (integer_onep (_q61))
												  {
												    {
												      tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _q20 };
												      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
													{
													  if (types_match (type, captures[0], captures[1])
)
													    {
													      {
														res_ops[0] = captures[0];
														res_ops[1] = captures[1];
														if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 64, __FILE__, __LINE__, false);
														return true;
													      }
													    }
													}
												    }
												  }
											      }
											  }
										        break;
										      }
										    default:;
										    }
									      }
									    break;
								          default:;
								          }
								        break;
								      }
								    default:;
								    }
							      }
							    break;
						          default:;
						          }
						      }
						    break;
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case BIT_XOR_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  if (tree_swap_operands_p (_q20, _q21))
				    std::swap (_q20, _q21);
				  switch (TREE_CODE (_q20))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q20))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case IMAGPART_EXPR:
					        {
						  tree _q30 = TREE_OPERAND (gimple_assign_rhs1 (_a3), 0);
						  if ((TREE_CODE (_q30) == SSA_NAME
						       || is_gimple_min_invariant (_q30)))
						    {
						      _q30 = do_valueize (valueize, _q30);
						      if (integer_onep (_q21))
							{
							  switch (TREE_CODE (_p1))
							    {
							    case SSA_NAME:
							      if (gimple *_d4 = get_def (valueize, _p1))
							        {
								  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								    switch (gimple_assign_rhs_code (_a4))
								      {
								      case REALPART_EXPR:
								        {
									  tree _q60 = TREE_OPERAND (gimple_assign_rhs1 (_a4), 0);
									  if ((TREE_CODE (_q60) == SSA_NAME
									       || is_gimple_min_invariant (_q60)))
									    {
									      _q60 = do_valueize (valueize, _q60);
									      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
										{
										  switch (TREE_CODE (_q60))
										    {
										    case SSA_NAME:
										      if (gimple *_d5 = get_def (valueize, _q60))
										        {
											  if (gcall *_c5 = dyn_cast <gcall *> (_d5))
											    switch (gimple_call_combined_fn (_c5))
											      {
											      case CFN_SUB_OVERFLOW:
											        if (gimple_call_num_args (_c5) == 2)
											          {
												    tree _q80 = gimple_call_arg (_c5, 0);
												    _q80 = do_valueize (valueize, _q80);
												    tree _q81 = gimple_call_arg (_c5, 1);
												    _q81 = do_valueize (valueize, _q81);
												    {
												      tree captures[3] ATTRIBUTE_UNUSED = { _q80, _q81, _q30 };
												      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
													{
													  if (types_match (type, captures[0], captures[1])
)
													    {
													      {
														res_ops[0] = captures[0];
														res_ops[1] = captures[1];
														if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 64, __FILE__, __LINE__, false);
														return true;
													      }
													    }
													}
												    }
											          }
											        break;
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									        }
									    }
								          break;
								        }
								      default:;
								      }
							        }
							      break;
							    default:;
							    }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_AND_EXPR:
	        {
		  tree _p0 = gimple_assign_rhs1 (_a1);
		  _p0 = do_valueize (valueize, _p0);
		  tree _p1 = gimple_assign_rhs2 (_a1);
		  _p1 = do_valueize (valueize, _p1);
		  if (tree_swap_operands_p (_p0, _p1))
		    std::swap (_p0, _p1);
		  switch (TREE_CODE (_p0))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p0))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case REALPART_EXPR:
			        {
				  tree _q20 = TREE_OPERAND (gimple_assign_rhs1 (_a2), 0);
				  if ((TREE_CODE (_q20) == SSA_NAME
				       || is_gimple_min_invariant (_q20)))
				    {
				      _q20 = do_valueize (valueize, _q20);
				      switch (TREE_CODE (_q20))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _q20))
					    {
					      if (gcall *_c3 = dyn_cast <gcall *> (_d3))
					        switch (gimple_call_combined_fn (_c3))
						  {
						  case CFN_SUB_OVERFLOW:
						    if (gimple_call_num_args (_c3) == 2)
						      {
							tree _q30 = gimple_call_arg (_c3, 0);
							_q30 = do_valueize (valueize, _q30);
							tree _q31 = gimple_call_arg (_c3, 1);
							_q31 = do_valueize (valueize, _q31);
							switch (TREE_CODE (_p1))
							  {
							  case SSA_NAME:
							    if (gimple *_d4 = get_def (valueize, _p1))
							      {
								if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								  switch (gimple_assign_rhs_code (_a4))
								    {
								    case PLUS_EXPR:
								      {
									tree _q60 = gimple_assign_rhs1 (_a4);
									_q60 = do_valueize (valueize, _q60);
									tree _q61 = gimple_assign_rhs2 (_a4);
									_q61 = do_valueize (valueize, _q61);
									if (tree_swap_operands_p (_q60, _q61))
									  std::swap (_q60, _q61);
									switch (TREE_CODE (_q60))
									  {
									  case SSA_NAME:
									    if (gimple *_d5 = get_def (valueize, _q60))
									      {
										if (gassign *_a5 = dyn_cast <gassign *> (_d5))
										  switch (gimple_assign_rhs_code (_a5))
										    {
										    case IMAGPART_EXPR:
										      {
											tree _q70 = TREE_OPERAND (gimple_assign_rhs1 (_a5), 0);
											if ((TREE_CODE (_q70) == SSA_NAME
											     || is_gimple_min_invariant (_q70)))
											  {
											    _q70 = do_valueize (valueize, _q70);
											    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
											      {
												if (integer_minus_onep (_q61))
												  {
												    {
												      tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _q20 };
												      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
													{
													  if (types_match (type, captures[0], captures[1])
)
													    {
													      {
														res_ops[0] = captures[0];
														res_ops[1] = captures[1];
														if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 65, __FILE__, __LINE__, false);
														return true;
													      }
													    }
													}
												    }
												  }
											      }
											  }
										        break;
										      }
										    default:;
										    }
									      }
									    break;
								          default:;
								          }
								        break;
								      }
								    default:;
								    }
							      }
							    break;
						          default:;
						          }
						      }
						    break;
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case PLUS_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  if (tree_swap_operands_p (_q20, _q21))
				    std::swap (_q20, _q21);
				  switch (TREE_CODE (_q20))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q20))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case IMAGPART_EXPR:
					        {
						  tree _q30 = TREE_OPERAND (gimple_assign_rhs1 (_a3), 0);
						  if ((TREE_CODE (_q30) == SSA_NAME
						       || is_gimple_min_invariant (_q30)))
						    {
						      _q30 = do_valueize (valueize, _q30);
						      if (integer_minus_onep (_q21))
							{
							  switch (TREE_CODE (_p1))
							    {
							    case SSA_NAME:
							      if (gimple *_d4 = get_def (valueize, _p1))
							        {
								  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								    switch (gimple_assign_rhs_code (_a4))
								      {
								      case REALPART_EXPR:
								        {
									  tree _q60 = TREE_OPERAND (gimple_assign_rhs1 (_a4), 0);
									  if ((TREE_CODE (_q60) == SSA_NAME
									       || is_gimple_min_invariant (_q60)))
									    {
									      _q60 = do_valueize (valueize, _q60);
									      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
										{
										  switch (TREE_CODE (_q60))
										    {
										    case SSA_NAME:
										      if (gimple *_d5 = get_def (valueize, _q60))
										        {
											  if (gcall *_c5 = dyn_cast <gcall *> (_d5))
											    switch (gimple_call_combined_fn (_c5))
											      {
											      case CFN_SUB_OVERFLOW:
											        if (gimple_call_num_args (_c5) == 2)
											          {
												    tree _q80 = gimple_call_arg (_c5, 0);
												    _q80 = do_valueize (valueize, _q80);
												    tree _q81 = gimple_call_arg (_c5, 1);
												    _q81 = do_valueize (valueize, _q81);
												    {
												      tree captures[3] ATTRIBUTE_UNUSED = { _q80, _q81, _q30 };
												      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
													{
													  if (types_match (type, captures[0], captures[1])
)
													    {
													      {
														res_ops[0] = captures[0];
														res_ops[1] = captures[1];
														if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 65, __FILE__, __LINE__, false);
														return true;
													      }
													    }
													}
												    }
											          }
											        break;
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									        }
									    }
								          break;
								        }
								      default:;
								      }
							        }
							      break;
							    default:;
							    }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case PLUS_EXPR:
	        {
		  tree _p0 = gimple_assign_rhs1 (_a1);
		  _p0 = do_valueize (valueize, _p0);
		  tree _p1 = gimple_assign_rhs2 (_a1);
		  _p1 = do_valueize (valueize, _p1);
		  if (tree_swap_operands_p (_p0, _p1))
		    std::swap (_p0, _p1);
		  switch (TREE_CODE (_p0))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p0))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MAX_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  if (tree_swap_operands_p (_q20, _q21))
				    std::swap (_q20, _q21);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case INTEGER_CST:
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
						  {
						    if (types_match (type, captures[1]) && int_fits_type_p (captures[1], type)
)
						      {
							{
 unsigned precision = TYPE_PRECISION (type);
 wide_int c1 = wi::to_wide (captures[1]);
 wide_int c2 = wi::to_wide (captures[2]);
 wide_int sum = wi::add (c1, c2);
							    if (wi::eq_p (sum, wi::uhwi (0, precision))
)
							      {
								{
								  res_ops[0] = captures[0];
								  res_ops[1] = captures[1];
								  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 66, __FILE__, __LINE__, false);
								  return true;
								}
							      }
							}
						      }
						  }
					      }
					      break;
					    }
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
	  else if (gphi *_a1 = dyn_cast <gphi *> (_d1))
	    {
	      basic_block _b1 = gimple_bb (_a1);
	      tree _p1, _p2;
	      gcond *_cond_1 = match_cond_with_binary_phi (_a1, &_p1, &_p2);
	      if (_cond_1)
		{
		  tree _cond_lhs_1 = gimple_cond_lhs (_cond_1);
		  tree _cond_rhs_1 = gimple_cond_rhs (_cond_1);
		  tree _p0 = build2 (gimple_cond_code (_cond_1), boolean_type_node, _cond_lhs_1, _cond_rhs_1);
		  switch (TREE_CODE (_p0))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p0))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case GT_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case MINUS_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
						    {
						      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
								if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
								  {
								    if (types_match (type, captures[0], captures[1])
)
								      {
									{
									  res_ops[0] = captures[0];
									  res_ops[1] = captures[1];
									  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 55, __FILE__, __LINE__, false);
									  return true;
									}
								      }
								  }
							      }
							    }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  switch (TREE_CODE (_q50))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q50))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case MINUS_EXPR:
							        {
								  tree _q60 = gimple_assign_rhs1 (_a4);
								  _q60 = do_valueize (valueize, _q60);
								  tree _q61 = gimple_assign_rhs2 (_a4);
								  _q61 = do_valueize (valueize, _q61);
								  switch (TREE_CODE (_q60))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q60))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q70 = gimple_assign_rhs1 (_a5);
										  _q70 = do_valueize (valueize, _q70);
										  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
										    {
										      switch (TREE_CODE (_q61))
										        {
											case SSA_NAME:
											  if (gimple *_d6 = get_def (valueize, _q61))
											    {
											      if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											        switch (gimple_assign_rhs_code (_a6))
												  {
												  CASE_CONVERT:
												    {
												      tree _q90 = gimple_assign_rhs1 (_a6);
												      _q90 = do_valueize (valueize, _q90);
												      if ((_q90 == _q21 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q21, 0) && types_match (_q90, _q21)))
													{
													  if (integer_zerop (_p2))
													    {
													      {
														tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
														if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
														  {
														    if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
														      {
															{
															  res_ops[0] = captures[0];
															  res_ops[1] = captures[1];
															  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
															  return true;
															}
														      }
														  }
													      }
													    }
												        }
												      break;
												    }
												  default:;
												  }
											    }
											  break;
										        default:;
										        }
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
								    {
								      if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
									{
									  if (integer_zerop (_p2))
									    {
									      {
										tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
										if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
										  {
										    if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
										      {
											{
											  res_ops[0] = captures[0];
											  res_ops[1] = captures[1];
											  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
											  return true;
											}
										      }
										  }
									      }
									    }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case MINUS_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_q50))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q50))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      CASE_CONVERT:
							        {
								  tree _q60 = gimple_assign_rhs1 (_a4);
								  _q60 = do_valueize (valueize, _q60);
								  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
								    {
								      switch (TREE_CODE (_q51))
								        {
									case SSA_NAME:
									  if (gimple *_d5 = get_def (valueize, _q51))
									    {
									      if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									        switch (gimple_assign_rhs_code (_a5))
										  {
										  CASE_CONVERT:
										    {
										      tree _q80 = gimple_assign_rhs1 (_a5);
										      _q80 = do_valueize (valueize, _q80);
										      if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
											{
											  if (integer_zerop (_p2))
											    {
											      {
												tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
												if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
												  {
												    if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
												      {
													{
													  res_ops[0] = captures[0];
													  res_ops[1] = captures[1];
													  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
													  return true;
													}
												      }
												  }
											      }
											    }
										        }
										      break;
										    }
										  default:;
										  }
									    }
									  break;
								        default:;
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
						    {
						      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
								if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
								  {
								    if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
								      {
									{
									  res_ops[0] = captures[0];
									  res_ops[1] = captures[1];
									  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
									  return true;
									}
								      }
								  }
							      }
							    }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  if (tree_swap_operands_p (_q20, _q21))
				    std::swap (_q20, _q21);
				  switch (TREE_CODE (_q20))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q20))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case IMAGPART_EXPR:
					        {
						  tree _q30 = TREE_OPERAND (gimple_assign_rhs1 (_a3), 0);
						  if ((TREE_CODE (_q30) == SSA_NAME
						       || is_gimple_min_invariant (_q30)))
						    {
						      _q30 = do_valueize (valueize, _q30);
						      switch (TREE_CODE (_q30))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q30))
							    {
							      if (gcall *_c4 = dyn_cast <gcall *> (_d4))
							        switch (gimple_call_combined_fn (_c4))
								  {
								  case CFN_SUB_OVERFLOW:
								    if (gimple_call_num_args (_c4) == 2)
								      {
									tree _q40 = gimple_call_arg (_c4, 0);
									_q40 = do_valueize (valueize, _q40);
									tree _q41 = gimple_call_arg (_c4, 1);
									_q41 = do_valueize (valueize, _q41);
									if (integer_zerop (_q21))
									  {
									    switch (TREE_CODE (_p1))
									      {
									      case SSA_NAME:
									        if (gimple *_d5 = get_def (valueize, _p1))
									          {
										    if (gassign *_a5 = dyn_cast <gassign *> (_d5))
										      switch (gimple_assign_rhs_code (_a5))
											{
											case REALPART_EXPR:
											  {
											    tree _q80 = TREE_OPERAND (gimple_assign_rhs1 (_a5), 0);
											    if ((TREE_CODE (_q80) == SSA_NAME
											         || is_gimple_min_invariant (_q80)))
											      {
												_q80 = do_valueize (valueize, _q80);
												if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
												  {
												    if (integer_zerop (_p2))
												      {
													{
													  tree captures[3] ATTRIBUTE_UNUSED = { _q40, _q41, _q30 };
													  if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
													    {
													      if (types_match (type, captures[0], captures[1])
)
														{
														  {
														    res_ops[0] = captures[0];
														    res_ops[1] = captures[1];
														    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 57, __FILE__, __LINE__, false);
														    return true;
														  }
														}
													    }
													}
												      }
												  }
											      }
											    break;
											  }
											default:;
											}
									          }
									        break;
									      default:;
									      }
									  }
								      }
								    break;
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  if (tree_swap_operands_p (_q20, _q21))
				    std::swap (_q20, _q21);
				  switch (TREE_CODE (_q20))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q20))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case IMAGPART_EXPR:
					        {
						  tree _q30 = TREE_OPERAND (gimple_assign_rhs1 (_a3), 0);
						  if ((TREE_CODE (_q30) == SSA_NAME
						       || is_gimple_min_invariant (_q30)))
						    {
						      _q30 = do_valueize (valueize, _q30);
						      switch (TREE_CODE (_q30))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q30))
							    {
							      if (gcall *_c4 = dyn_cast <gcall *> (_d4))
							        switch (gimple_call_combined_fn (_c4))
								  {
								  case CFN_SUB_OVERFLOW:
								    if (gimple_call_num_args (_c4) == 2)
								      {
									tree _q40 = gimple_call_arg (_c4, 0);
									_q40 = do_valueize (valueize, _q40);
									tree _q41 = gimple_call_arg (_c4, 1);
									_q41 = do_valueize (valueize, _q41);
									if (integer_zerop (_q21))
									  {
									    if (integer_zerop (_p1))
									      {
										switch (TREE_CODE (_p2))
										  {
										  case SSA_NAME:
										    if (gimple *_d5 = get_def (valueize, _p2))
										      {
											if (gassign *_a5 = dyn_cast <gassign *> (_d5))
											  switch (gimple_assign_rhs_code (_a5))
											    {
											    case REALPART_EXPR:
											      {
												tree _q90 = TREE_OPERAND (gimple_assign_rhs1 (_a5), 0);
												if ((TREE_CODE (_q90) == SSA_NAME
												     || is_gimple_min_invariant (_q90)))
												  {
												    _q90 = do_valueize (valueize, _q90);
												    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
												      {
													{
													  tree captures[3] ATTRIBUTE_UNUSED = { _q40, _q41, _q30 };
													  if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
													    {
													      if (types_match (type, captures[0], captures[1])
)
														{
														  {
														    res_ops[0] = captures[0];
														    res_ops[1] = captures[1];
														    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 58, __FILE__, __LINE__, false);
														    return true;
														  }
														}
													    }
													}
												      }
												  }
											        break;
											      }
											    default:;
											    }
										      }
										    break;
									          default:;
									          }
									      }
									  }
								      }
								    break;
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case MINUS_EXPR:
						      {
							tree _q50 = gimple_assign_rhs1 (_a3);
							_q50 = do_valueize (valueize, _q50);
							tree _q51 = gimple_assign_rhs2 (_a3);
							_q51 = do_valueize (valueize, _q51);
							switch (TREE_CODE (_q50))
							  {
							  case INTEGER_CST:
							    {
							      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
								{
								  if (integer_zerop (_p2))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _q50, _q20, _q21 };
									if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
									  {
									    if (types_match (type, captures[1])
)
									      {
										{
 unsigned precision = TYPE_PRECISION (type);
 wide_int max = wi::mask (precision, false, precision);
 wide_int c0 = wi::to_wide (captures[0]);
 wide_int c2 = wi::to_wide (captures[2]);
 wide_int c0_add_1 = wi::add (c0, wi::uhwi (1, precision));
										    if (wi::eq_p (c2, max) && wi::eq_p (c0_add_1, max)
)
										      {
											{
											  res_ops[0] = captures[0];
											  res_ops[1] = captures[1];
											  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 59, __FILE__, __LINE__, false);
											  return true;
											}
										      }
										}
									      }
									  }
								      }
								    }
							        }
							      break;
							    }
						          default:;
						          }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case MINUS_EXPR:
						      {
							tree _q50 = gimple_assign_rhs1 (_a3);
							_q50 = do_valueize (valueize, _q50);
							tree _q51 = gimple_assign_rhs2 (_a3);
							_q51 = do_valueize (valueize, _q51);
							switch (TREE_CODE (_q50))
							  {
							  case INTEGER_CST:
							    {
							      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
								{
								  if (integer_zerop (_p2))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _q50, _q20, _q21 };
									if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
									  {
									    if (types_match (type, captures[1]) && int_fits_type_p (captures[0], type)
)
									      {
										{
 unsigned precision = TYPE_PRECISION (type);
 wide_int max = wi::mask (precision, false, precision);
 wide_int c0 = wi::to_wide (captures[0]);
 wide_int c2 = wi::to_wide (captures[2]);
 wide_int c2_add_1 = wi::add (c2, wi::uhwi (1, precision));
 bool equal_p = wi::eq_p (c0, c2);
 bool less_than_1_p = !wi::eq_p (c2, max) && wi::eq_p (c2_add_1, c0);
										    if (equal_p || less_than_1_p
)
										      {
											{
											  res_ops[0] = captures[0];
											  res_ops[1] = captures[1];
											  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 60, __FILE__, __LINE__, false);
											  return true;
											}
										      }
										}
									      }
									  }
								      }
								    }
							        }
							      break;
							    }
						          default:;
						          }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
				if (integer_onep (_q21))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _p1))
				          {
					    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					      switch (gimple_assign_rhs_code (_a3))
						{
						case BIT_XOR_EXPR:
						  {
						    tree _q50 = gimple_assign_rhs1 (_a3);
						    _q50 = do_valueize (valueize, _q50);
						    tree _q51 = gimple_assign_rhs2 (_a3);
						    _q51 = do_valueize (valueize, _q51);
						    if (tree_swap_operands_p (_q50, _q51))
						      std::swap (_q50, _q51);
						    if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
						      {
							if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
							  {
							    if (integer_onep (_q51))
							      {
								if (integer_zerop (_p2))
								  {
								    {
								      tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
								      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
									{
									  if (types_match (type, captures[1])
)
									    {
									      {
										res_ops[0] = captures[0];
										res_ops[1] = captures[1];
										if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 61, __FILE__, __LINE__, false);
										return true;
									      }
									    }
									}
								    }
								  }
							      }
							  }
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case GT_EXPR:
		      {
			tree _q20 = TREE_OPERAND (_p0, 0);
			if ((TREE_CODE (_q20) == SSA_NAME
			     || is_gimple_min_invariant (_q20)))
			  {
			    _q20 = do_valueize (valueize, _q20);
			    tree _q21 = TREE_OPERAND (_p0, 1);
			    if ((TREE_CODE (_q21) == SSA_NAME
			         || is_gimple_min_invariant (_q21)))
			      {
				_q21 = do_valueize (valueize, _q21);
				switch (TREE_CODE (_p1))
				  {
				  case SSA_NAME:
				    if (gimple *_d2 = get_def (valueize, _p1))
				      {
					if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					  switch (gimple_assign_rhs_code (_a2))
					    {
					    case MINUS_EXPR:
					      {
						tree _q50 = gimple_assign_rhs1 (_a2);
						_q50 = do_valueize (valueize, _q50);
						tree _q51 = gimple_assign_rhs2 (_a2);
						_q51 = do_valueize (valueize, _q51);
						if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
						  {
						    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
						      {
							if (integer_zerop (_p2))
							  {
							    {
							      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
							      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
								{
								  if (types_match (type, captures[0], captures[1])
)
								    {
								      {
									res_ops[0] = captures[0];
									res_ops[1] = captures[1];
									if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 55, __FILE__, __LINE__, false);
									return true;
								      }
								    }
								}
							    }
							  }
						      }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
			      }
			  }
		        break;
		      }
		    case GE_EXPR:
		      {
			tree _q20 = TREE_OPERAND (_p0, 0);
			if ((TREE_CODE (_q20) == SSA_NAME
			     || is_gimple_min_invariant (_q20)))
			  {
			    _q20 = do_valueize (valueize, _q20);
			    tree _q21 = TREE_OPERAND (_p0, 1);
			    if ((TREE_CODE (_q21) == SSA_NAME
			         || is_gimple_min_invariant (_q21)))
			      {
				_q21 = do_valueize (valueize, _q21);
				switch (TREE_CODE (_p1))
				  {
				  case SSA_NAME:
				    if (gimple *_d2 = get_def (valueize, _p1))
				      {
					if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					  switch (gimple_assign_rhs_code (_a2))
					    {
					    CASE_CONVERT:
					      {
						tree _q50 = gimple_assign_rhs1 (_a2);
						_q50 = do_valueize (valueize, _q50);
						switch (TREE_CODE (_q50))
						  {
						  case SSA_NAME:
						    if (gimple *_d3 = get_def (valueize, _q50))
						      {
							if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							  switch (gimple_assign_rhs_code (_a3))
							    {
							    case MINUS_EXPR:
							      {
								tree _q60 = gimple_assign_rhs1 (_a3);
								_q60 = do_valueize (valueize, _q60);
								tree _q61 = gimple_assign_rhs2 (_a3);
								_q61 = do_valueize (valueize, _q61);
								switch (TREE_CODE (_q60))
								  {
								  case SSA_NAME:
								    if (gimple *_d4 = get_def (valueize, _q60))
								      {
									if (gassign *_a4 = dyn_cast <gassign *> (_d4))
									  switch (gimple_assign_rhs_code (_a4))
									    {
									    CASE_CONVERT:
									      {
										tree _q70 = gimple_assign_rhs1 (_a4);
										_q70 = do_valueize (valueize, _q70);
										if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
										  {
										    switch (TREE_CODE (_q61))
										      {
										      case SSA_NAME:
										        if (gimple *_d5 = get_def (valueize, _q61))
										          {
											    if (gassign *_a5 = dyn_cast <gassign *> (_d5))
											      switch (gimple_assign_rhs_code (_a5))
												{
												CASE_CONVERT:
												  {
												    tree _q90 = gimple_assign_rhs1 (_a5);
												    _q90 = do_valueize (valueize, _q90);
												    if ((_q90 == _q21 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q21, 0) && types_match (_q90, _q21)))
												      {
													if (integer_zerop (_p2))
													  {
													    {
													      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
													      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
														{
														  if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
														    {
														      {
															res_ops[0] = captures[0];
															res_ops[1] = captures[1];
															if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
															return true;
														      }
														    }
														}
													    }
													  }
												      }
												    break;
												  }
												default:;
												}
										          }
										        break;
										      default:;
										      }
										  }
									        break;
									      }
									    default:;
									    }
								      }
								    break;
							          default:;
							          }
								if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
								  {
								    if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
								      {
									if (integer_zerop (_p2))
									  {
									    {
									      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
									      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
										{
										  if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
										    {
										      {
											res_ops[0] = captures[0];
											res_ops[1] = captures[1];
											if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
											return true;
										      }
										    }
										}
									    }
									  }
								      }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
					        break;
					      }
					    case MINUS_EXPR:
					      {
						tree _q50 = gimple_assign_rhs1 (_a2);
						_q50 = do_valueize (valueize, _q50);
						tree _q51 = gimple_assign_rhs2 (_a2);
						_q51 = do_valueize (valueize, _q51);
						switch (TREE_CODE (_q50))
						  {
						  case SSA_NAME:
						    if (gimple *_d3 = get_def (valueize, _q50))
						      {
							if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							  switch (gimple_assign_rhs_code (_a3))
							    {
							    CASE_CONVERT:
							      {
								tree _q60 = gimple_assign_rhs1 (_a3);
								_q60 = do_valueize (valueize, _q60);
								if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
								  {
								    switch (TREE_CODE (_q51))
								      {
								      case SSA_NAME:
								        if (gimple *_d4 = get_def (valueize, _q51))
								          {
									    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
									      switch (gimple_assign_rhs_code (_a4))
										{
										CASE_CONVERT:
										  {
										    tree _q80 = gimple_assign_rhs1 (_a4);
										    _q80 = do_valueize (valueize, _q80);
										    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
										      {
											if (integer_zerop (_p2))
											  {
											    {
											      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
											      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
												{
												  if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
												    {
												      {
													res_ops[0] = captures[0];
													res_ops[1] = captures[1];
													if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
													return true;
												      }
												    }
												}
											    }
											  }
										      }
										    break;
										  }
										default:;
										}
								          }
								        break;
								      default:;
								      }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
						  {
						    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
						      {
							if (integer_zerop (_p2))
							  {
							    {
							      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
							      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
								{
								  if (TYPE_UNSIGNED (TREE_TYPE (captures[0])) && types_match (captures[0], captures[1])
)
								    {
								      {
									res_ops[0] = captures[0];
									res_ops[1] = captures[1];
									if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, false);
									return true;
								      }
								    }
								}
							    }
							  }
						      }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
			      }
			  }
		        break;
		      }
		    case EQ_EXPR:
		      {
			tree _q20 = TREE_OPERAND (_p0, 0);
			if ((TREE_CODE (_q20) == SSA_NAME
			     || is_gimple_min_invariant (_q20)))
			  {
			    _q20 = do_valueize (valueize, _q20);
			    tree _q21 = TREE_OPERAND (_p0, 1);
			    if ((TREE_CODE (_q21) == SSA_NAME
			         || is_gimple_min_invariant (_q21)))
			      {
				_q21 = do_valueize (valueize, _q21);
				if (tree_swap_operands_p (_q20, _q21))
				  std::swap (_q20, _q21);
				switch (TREE_CODE (_q20))
				  {
				  case SSA_NAME:
				    if (gimple *_d2 = get_def (valueize, _q20))
				      {
					if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					  switch (gimple_assign_rhs_code (_a2))
					    {
					    case IMAGPART_EXPR:
					      {
						tree _q30 = TREE_OPERAND (gimple_assign_rhs1 (_a2), 0);
						if ((TREE_CODE (_q30) == SSA_NAME
						     || is_gimple_min_invariant (_q30)))
						  {
						    _q30 = do_valueize (valueize, _q30);
						    switch (TREE_CODE (_q30))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q30))
						          {
							    if (gcall *_c3 = dyn_cast <gcall *> (_d3))
							      switch (gimple_call_combined_fn (_c3))
								{
								case CFN_SUB_OVERFLOW:
								  if (gimple_call_num_args (_c3) == 2)
								    {
								      tree _q40 = gimple_call_arg (_c3, 0);
								      _q40 = do_valueize (valueize, _q40);
								      tree _q41 = gimple_call_arg (_c3, 1);
								      _q41 = do_valueize (valueize, _q41);
								      if (integer_zerop (_q21))
									{
									  switch (TREE_CODE (_p1))
									    {
									    case SSA_NAME:
									      if (gimple *_d4 = get_def (valueize, _p1))
									        {
										  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
										    switch (gimple_assign_rhs_code (_a4))
										      {
										      case REALPART_EXPR:
										        {
											  tree _q80 = TREE_OPERAND (gimple_assign_rhs1 (_a4), 0);
											  if ((TREE_CODE (_q80) == SSA_NAME
											       || is_gimple_min_invariant (_q80)))
											    {
											      _q80 = do_valueize (valueize, _q80);
											      if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
												{
												  if (integer_zerop (_p2))
												    {
												      {
													tree captures[3] ATTRIBUTE_UNUSED = { _q40, _q41, _q30 };
													if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
													  {
													    if (types_match (type, captures[0], captures[1])
)
													      {
														{
														  res_ops[0] = captures[0];
														  res_ops[1] = captures[1];
														  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 57, __FILE__, __LINE__, false);
														  return true;
														}
													      }
													  }
												      }
												    }
											        }
											    }
										          break;
										        }
										      default:;
										      }
									        }
									      break;
									    default:;
									    }
								        }
								    }
								  break;
								default:;
								}
						          }
						        break;
						      default:;
						      }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
			      }
			  }
		        break;
		      }
		    case NE_EXPR:
		      {
			tree _q20 = TREE_OPERAND (_p0, 0);
			if ((TREE_CODE (_q20) == SSA_NAME
			     || is_gimple_min_invariant (_q20)))
			  {
			    _q20 = do_valueize (valueize, _q20);
			    tree _q21 = TREE_OPERAND (_p0, 1);
			    if ((TREE_CODE (_q21) == SSA_NAME
			         || is_gimple_min_invariant (_q21)))
			      {
				_q21 = do_valueize (valueize, _q21);
				if (tree_swap_operands_p (_q20, _q21))
				  std::swap (_q20, _q21);
				switch (TREE_CODE (_q20))
				  {
				  case SSA_NAME:
				    if (gimple *_d2 = get_def (valueize, _q20))
				      {
					if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					  switch (gimple_assign_rhs_code (_a2))
					    {
					    case IMAGPART_EXPR:
					      {
						tree _q30 = TREE_OPERAND (gimple_assign_rhs1 (_a2), 0);
						if ((TREE_CODE (_q30) == SSA_NAME
						     || is_gimple_min_invariant (_q30)))
						  {
						    _q30 = do_valueize (valueize, _q30);
						    switch (TREE_CODE (_q30))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q30))
						          {
							    if (gcall *_c3 = dyn_cast <gcall *> (_d3))
							      switch (gimple_call_combined_fn (_c3))
								{
								case CFN_SUB_OVERFLOW:
								  if (gimple_call_num_args (_c3) == 2)
								    {
								      tree _q40 = gimple_call_arg (_c3, 0);
								      _q40 = do_valueize (valueize, _q40);
								      tree _q41 = gimple_call_arg (_c3, 1);
								      _q41 = do_valueize (valueize, _q41);
								      if (integer_zerop (_q21))
									{
									  if (integer_zerop (_p1))
									    {
									      switch (TREE_CODE (_p2))
									        {
										case SSA_NAME:
										  if (gimple *_d4 = get_def (valueize, _p2))
										    {
										      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
										        switch (gimple_assign_rhs_code (_a4))
											  {
											  case REALPART_EXPR:
											    {
											      tree _q90 = TREE_OPERAND (gimple_assign_rhs1 (_a4), 0);
											      if ((TREE_CODE (_q90) == SSA_NAME
											           || is_gimple_min_invariant (_q90)))
											        {
												  _q90 = do_valueize (valueize, _q90);
												  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
												    {
												      {
													tree captures[3] ATTRIBUTE_UNUSED = { _q40, _q41, _q30 };
													if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
													  {
													    if (types_match (type, captures[0], captures[1])
)
													      {
														{
														  res_ops[0] = captures[0];
														  res_ops[1] = captures[1];
														  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 58, __FILE__, __LINE__, false);
														  return true;
														}
													      }
													  }
												      }
												    }
											        }
											      break;
											    }
											  default:;
											  }
										    }
										  break;
									        default:;
									        }
									    }
								        }
								    }
								  break;
								default:;
								}
						          }
						        break;
						      default:;
						      }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case MINUS_EXPR:
						    {
						      tree _q50 = gimple_assign_rhs1 (_a2);
						      _q50 = do_valueize (valueize, _q50);
						      tree _q51 = gimple_assign_rhs2 (_a2);
						      _q51 = do_valueize (valueize, _q51);
						      switch (TREE_CODE (_q50))
						        {
							case INTEGER_CST:
							  {
							    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
							      {
								if (integer_zerop (_p2))
								  {
								    {
								      tree captures[3] ATTRIBUTE_UNUSED = { _q50, _q20, _q21 };
								      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
									{
									  if (types_match (type, captures[1])
)
									    {
									      {
 unsigned precision = TYPE_PRECISION (type);
 wide_int max = wi::mask (precision, false, precision);
 wide_int c0 = wi::to_wide (captures[0]);
 wide_int c2 = wi::to_wide (captures[2]);
 wide_int c0_add_1 = wi::add (c0, wi::uhwi (1, precision));
										  if (wi::eq_p (c2, max) && wi::eq_p (c0_add_1, max)
)
										    {
										      {
											res_ops[0] = captures[0];
											res_ops[1] = captures[1];
											if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 59, __FILE__, __LINE__, false);
											return true;
										      }
										    }
									      }
									    }
									}
								    }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			      }
			  }
		        break;
		      }
		    case LE_EXPR:
		      {
			tree _q20 = TREE_OPERAND (_p0, 0);
			if ((TREE_CODE (_q20) == SSA_NAME
			     || is_gimple_min_invariant (_q20)))
			  {
			    _q20 = do_valueize (valueize, _q20);
			    tree _q21 = TREE_OPERAND (_p0, 1);
			    if ((TREE_CODE (_q21) == SSA_NAME
			         || is_gimple_min_invariant (_q21)))
			      {
				_q21 = do_valueize (valueize, _q21);
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case MINUS_EXPR:
						    {
						      tree _q50 = gimple_assign_rhs1 (_a2);
						      _q50 = do_valueize (valueize, _q50);
						      tree _q51 = gimple_assign_rhs2 (_a2);
						      _q51 = do_valueize (valueize, _q51);
						      switch (TREE_CODE (_q50))
						        {
							case INTEGER_CST:
							  {
							    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
							      {
								if (integer_zerop (_p2))
								  {
								    {
								      tree captures[3] ATTRIBUTE_UNUSED = { _q50, _q20, _q21 };
								      if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
									{
									  if (types_match (type, captures[1]) && int_fits_type_p (captures[0], type)
)
									    {
									      {
 unsigned precision = TYPE_PRECISION (type);
 wide_int max = wi::mask (precision, false, precision);
 wide_int c0 = wi::to_wide (captures[0]);
 wide_int c2 = wi::to_wide (captures[2]);
 wide_int c2_add_1 = wi::add (c2, wi::uhwi (1, precision));
 bool equal_p = wi::eq_p (c0, c2);
 bool less_than_1_p = !wi::eq_p (c2, max) && wi::eq_p (c2_add_1, c0);
										  if (equal_p || less_than_1_p
)
										    {
										      {
											res_ops[0] = captures[0];
											res_ops[1] = captures[1];
											if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 60, __FILE__, __LINE__, false);
											return true;
										      }
										    }
									      }
									    }
									}
								    }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			      if (integer_onep (_q21))
				{
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p1))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a2);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a2);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
						    {
						      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
							{
							  if (integer_onep (_q51))
							    {
							      if (integer_zerop (_p2))
								{
								  {
								    tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
								    if (INTEGRAL_TYPE_P (type) && TYPE_UNSIGNED (type)
)
								      {
									if (types_match (type, captures[1])
)
									  {
									    {
									      res_ops[0] = captures[0];
									      res_ops[1] = captures[1];
									      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 61, __FILE__, __LINE__, false);
									      return true;
									    }
									  }
								      }
								  }
							        }
							    }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			        }
			      }
			  }
		        break;
		      }
		    default:;
		    }
		}
	    }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_274 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp),
 const enum tree_code ARG_UNUSED (icmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (SCALAR_FLOAT_TYPE_P (TREE_TYPE (captures[1]))
 && ! DECIMAL_FLOAT_TYPE_P (TREE_TYPE (captures[1]))
)
    {
      {
 tree itype = TREE_TYPE (captures[0]);
 format_helper fmt (REAL_MODE_FORMAT (TYPE_MODE (TREE_TYPE (captures[1]))));
 const REAL_VALUE_TYPE *cst = TREE_REAL_CST_PTR (captures[1]);
 bool exception_p = real_isnan (cst)
 && flag_trapping_math
 && ((cmp != EQ_EXPR && cmp != NE_EXPR)
 || (cst->signalling
 && HONOR_SNANS (TREE_TYPE (captures[1]))));
	  if (fmt.can_represent_integral_type_p (itype) && ! exception_p
)
	    {
	      {
 signop isign = TYPE_SIGN (itype);
 REAL_VALUE_TYPE imin, imax;
 real_from_integer (&imin, fmt, wi::min_value (itype), isign);
 real_from_integer (&imax, fmt, wi::max_value (itype), isign);
 REAL_VALUE_TYPE icst;
 if (cmp == GT_EXPR || cmp == GE_EXPR)
 real_ceil (&icst, fmt, cst);
 else if (cmp == LT_EXPR || cmp == LE_EXPR)
 real_floor (&icst, fmt, cst);
 else
 real_trunc (&icst, fmt, cst);
 bool cst_int_p = !real_isnan (cst) && real_identical (&icst, cst);
 bool overflow_p = false;
 wide_int icst_val
 = real_to_integer (&icst, &overflow_p, TYPE_PRECISION (itype));
		  if (real_compare (LT_EXPR, cst, &imin)
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail915;
		      {
			tree tem;
			tem =  constant_boolean_node (cmp == GT_EXPR || cmp == GE_EXPR || cmp == NE_EXPR,
 type);
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 433, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail915:;
		    }
		  else
		    {
		      if (real_compare (GT_EXPR, cst, &imax)
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail916;
			  {
			    tree tem;
			    tem =  constant_boolean_node (cmp == LT_EXPR || cmp == LE_EXPR || cmp == NE_EXPR,
 type);
			    res_op->set_value (tem);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 434, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail916:;
			}
		      else
			{
			  if (cst_int_p
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail917;
			      {
				res_op->set_op (cmp, type, 2);
				res_op->ops[0] = captures[0];
 gcc_assert (!overflow_p);				res_op->ops[1] = 
 wide_int_to_tree (itype, icst_val);
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 435, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail917:;
			    }
			  else
			    {
			      if (cmp == EQ_EXPR || cmp == NE_EXPR
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail918;
				  {
				    tree tem;
				    tem =  constant_boolean_node (cmp == NE_EXPR, type);
				    res_op->set_value (tem);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 436, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail918:;
				}
			      else
				{
				  {
 gcc_checking_assert (!overflow_p);
				      gimple_seq *lseq = seq;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail919;
				      {
					res_op->set_op (icmp, type, 2);
					res_op->ops[0] = captures[0];
					res_op->ops[1] =  wide_int_to_tree (itype, icst_val);
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 437, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail919:;
				  }
				}
			    }
			}
		    }
	      }
	    }
      }
    }
  return false;
}

bool
gimple_simplify_281 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 poly_int64 off; tree base;
 tree addr = (TREE_CODE (captures[0]) == SSA_NAME
 ? gimple_assign_rhs1 (SSA_NAME_DEF_STMT (captures[0])) : captures[0]);
      if (SSA_NAME_IS_DEFAULT_DEF (captures[1])
 && TREE_CODE (SSA_NAME_VAR (captures[1])) == PARM_DECL
 && (base = get_base_address (TREE_OPERAND (addr, 0)))
 && TREE_CODE (base) == VAR_DECL
 && auto_var_in_fn_p (base, current_function_decl)
)
	{
	  if (cmp == NE_EXPR
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail940;
	      {
		tree tem;
		tem =  constant_boolean_node (true, type);
		res_op->set_value (tem);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 451, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail940:;
	    }
	  else
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail941;
	      {
		tree tem;
		tem =  constant_boolean_node (false, type);
		res_op->set_value (tem);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 452, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail941:;
	    }
	}
      else
	{
	  if ((base = get_addr_base_and_unit_offset (TREE_OPERAND (addr, 0), &off))
 && TREE_CODE (base) == MEM_REF
 && TREE_OPERAND (base, 0) == captures[1]
)
	    {
	      {
 off += mem_ref_offset (base).force_shwi ();
		  if (known_ne (off, 0)
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail942;
		      {
			tree tem;
			tem =  constant_boolean_node (cmp == NE_EXPR, type);
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 453, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail942:;
		    }
		  else
		    {
		      if (known_eq (off, 0)
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail943;
			  {
			    tree tem;
			    tem =  constant_boolean_node (cmp == EQ_EXPR, type);
			    res_op->set_value (tem);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 454, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail943:;
			}
		    }
	      }
	    }
	}
  }
  return false;
}

bool
gimple_simplify_285 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (TREE_TYPE (captures[2]))
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && TYPE_PRECISION (TREE_TYPE (captures[1])) == TYPE_PRECISION (TREE_TYPE (captures[2]))
 && TYPE_PRECISION (TREE_TYPE (captures[0])) > TYPE_PRECISION (TREE_TYPE (captures[1]))
 && !wi::neg_p (wi::to_wide (captures[3]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail947;
      {
	res_op->set_op (cmp, type, 2);
	{
	  tree _o1[2], _r1;
	  _o1[0] = captures[2];
	  {
	    tree _o2[1], _r2;
	    {
	      tree _o3[1], _r3;
	      _o3[0] = captures[3];
	      gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o3[0]), _o3[0]);
	      tem_op.resimplify (lseq, valueize);
	      _r3 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r3) goto next_after_fail947;
	      _o2[0] = _r3;
	    }
	    if (TREE_TYPE (_o1[0]) != TREE_TYPE (_o2[0])
	        && !useless_type_conversion_p (TREE_TYPE (_o1[0]), TREE_TYPE (_o2[0])))
	      {
		gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, TREE_TYPE (_o1[0]), _o2[0]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail947;
	      }
	    else
	      _r2 = _o2[0];
	    _o1[1] = _r2;
	  }
	  gimple_match_op tem_op (res_op->cond.any_else (), BIT_AND_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail947;
	  res_op->ops[0] = _r1;
	}
	res_op->ops[1] =  build_zero_cst (TREE_TYPE (captures[2]));
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 458, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail947:;
    }
  return false;
}

bool
gimple_simplify_288 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (tree_expr_nonzero_p (captures[0])
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail950;
      {
	tree tem;
	tem =  constant_boolean_node (cmp == NE_EXPR, type);
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 461, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail950:;
    }
  return false;
}

bool
gimple_simplify_291 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (sgncmp),
 const enum tree_code ARG_UNUSED (cmp),
 const enum tree_code ARG_UNUSED (ncmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && !TYPE_UNSIGNED (TREE_TYPE (captures[0]))
 && types_match (captures[0], captures[2])
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail953;
      {
	res_op->set_op (ncmp, type, 2);
	{
	  tree _o1[2], _r1;
	  _o1[0] = captures[0];
	  _o1[1] = captures[2];
	  gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail953;
	  res_op->ops[0] = _r1;
	}
	res_op->ops[1] = captures[1];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 464, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail953:;
    }
  return false;
}

bool
gimple_simplify_294 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!FLOAT_TYPE_P (TREE_TYPE (captures[3]))
 || !operation_could_trap_p (cmp, true, false, captures[3])
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail956;
      {
	res_op->set_op (COND_EXPR, type, 3);
	res_op->ops[0] = captures[0];
	res_op->ops[0] = unshare_expr (res_op->ops[0]);
	{
	  tree _o1[2], _r1;
	  _o1[0] = captures[1];
	  _o1[1] = captures[3];
	  gimple_match_op tem_op (res_op->cond.any_else (), cmp, type, _o1[0], _o1[1]);
	  tem_op.resimplify (NULL, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, NULL);
	  if (!_r1) goto next_after_fail956;
	  res_op->ops[1] = _r1;
	}
	{
	  tree _o1[2], _r1;
	  _o1[0] = captures[2];
	  _o1[1] = captures[3];
	  gimple_match_op tem_op (res_op->cond.any_else (), cmp, type, _o1[0], _o1[1]);
	  tem_op.resimplify (NULL, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, NULL);
	  if (!_r1) goto next_after_fail956;
	  res_op->ops[2] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 466, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail956:;
    }
  return false;
}

bool
gimple_simplify_299 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (neeq))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (POINTER_TYPE_P (TREE_TYPE (captures[0]))
 && ptrs_compare_unequal (captures[0], captures[1])
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail975;
      {
	tree tem;
	tem =  constant_boolean_node (neeq != EQ_EXPR, type);
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 476, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail975:;
    }
  return false;
}

bool
gimple_simplify_302 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (TREE_TYPE (captures[2]))
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && TYPE_UNSIGNED (TREE_TYPE (captures[2]))
 && (TYPE_PRECISION (TREE_TYPE (captures[1]))
 >= 2 * TYPE_PRECISION (TREE_TYPE (captures[2])))
 && tree_fits_uhwi_p (captures[4])
 && tree_to_uhwi (captures[4]) == TYPE_PRECISION (TREE_TYPE (captures[2]))
 && types_match (captures[2], captures[3])
 && type_has_mode_precision_p (TREE_TYPE (captures[2]))
 && (optab_handler (umulv4_optab, TYPE_MODE (TREE_TYPE (captures[2])))
 != CODE_FOR_nothing)
)
    {
      {
 tree t = TREE_TYPE (captures[2]), cpx = build_complex_type (t);
	  gimple_seq *lseq = seq;
	  if (lseq
	      && (!single_use (captures[0])))
	    lseq = NULL;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail982;
	  {
	    res_op->set_op (cmp, type, 2);
	    {
	      tree _o1[1], _r1;
	      {
		tree _o2[2], _r2;
		_o2[0] = captures[2];
		_o2[1] = captures[3];
		gimple_match_op tem_op (res_op->cond.any_else (), CFN_MUL_OVERFLOW, cpx, _o2[0], _o2[1]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail982;
		_o1[0] = _r2;
	      }
	      gimple_match_op tem_op (res_op->cond.any_else (), IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (_o1[0])), _o1[0]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail982;
	      res_op->ops[0] = _r1;
	    }
	    res_op->ops[1] =  build_zero_cst (t);
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 483, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail982:;
      }
    }
  return false;
}

bool
gimple_simplify_306 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (op),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (integer_zerop (captures[3]) && single_use (captures[0])
)
    {
      {
 tree type0 = TREE_TYPE (captures[1]);
 tree stype = signed_type_for (TREE_TYPE (captures[1]));
 if (integer_zerop (captures[2]))
 stype = NULL_TREE;
	  if (stype
)
	    {
	      gimple_seq *lseq = seq;
	      if (lseq
	          && (!single_use (captures[0])))
	        lseq = NULL;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail996;
	      {
		res_op->set_op (cmp, type, 2);
		{
		  tree _o1[1], _r1;
		  _o1[0] = captures[1];
		  if (stype != TREE_TYPE (_o1[0])
		      && !useless_type_conversion_p (stype, TREE_TYPE (_o1[0])))
		    {
		      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, stype, _o1[0]);
		      tem_op.resimplify (lseq, valueize);
		      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		      if (!_r1) goto next_after_fail996;
		    }
		  else
		    _r1 = _o1[0];
		  res_op->ops[0] = _r1;
		}
		res_op->ops[1] =  build_zero_cst (stype);
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 497, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail996:;
	    }
      }
    }
  else
    {
      {
 bool ok = true;
 tree type0 = TREE_TYPE (captures[1]);
 if (wi::to_widest (captures[2]) == TYPE_PRECISION (type0) - 1)
 ok = false;
	  if (ok && wi::to_wide (captures[3]) == (TYPE_PRECISION (type0) - 1)
)
	    {
	      gimple_seq *lseq = seq;
	      if (lseq
	          && (!single_use (captures[0])))
	        lseq = NULL;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail997;
	      {
		res_op->set_op (op, type, 2);
		res_op->ops[0] = captures[1];
		res_op->ops[1] =  build_one_cst (type0);
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 498, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail997:;
	    }
      }
    }
  return false;
}

bool
gimple_simplify_311 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (VECTOR_MODE_P (TYPE_MODE (TREE_TYPE (captures[0])))
 && can_compare_p (cmp == EQ_EXPR ? EQ : NE, TYPE_MODE (TREE_TYPE (captures[0])),
 ccp_jump)
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1006;
      {
	res_op->set_op (cmp, type, 2);
	res_op->ops[0] = captures[0];
	res_op->ops[1] =  build_zero_cst (TREE_TYPE (captures[0]));
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 507, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1006:;
    }
  return false;
}

bool
gimple_simplify_316 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (copysigns))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!REAL_VALUE_NEGATIVE (TREE_REAL_CST (captures[1]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1012;
      {
	res_op->set_op (ABS_EXPR, type, 1);
	res_op->ops[0] = captures[0];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 513, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1012:;
    }
  else
    {
      if (!direct_internal_fn_supported_p (IFN_COPYSIGN, type,
 OPTIMIZE_FOR_BOTH)
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1013;
	  {
	    res_op->set_op (NEGATE_EXPR, type, 1);
	    {
	      tree _o1[1], _r1;
	      _o1[0] = captures[0];
	      gimple_match_op tem_op (res_op->cond.any_else (), ABS_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1013;
	      res_op->ops[0] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 514, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1013:;
	}
    }
  return false;
}

bool
gimple_simplify_323 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (div))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!integer_zerop (captures[1])
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1022;
      {
	tree tem;
	tem = captures[0];
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 521, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1022:;
    }
  return false;
}

bool
gimple_simplify_326 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (div))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!ALL_FRACT_MODE_P (TYPE_MODE (type))
 && !integer_zerop (captures[0])
 && (!flag_non_call_exceptions || tree_expr_nonzero_p (captures[0]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1025;
      {
	tree tem;
	tem =  build_one_cst (type);
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 524, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1025:;
    }
  return false;
}

bool
gimple_simplify_329 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (div))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 wi::overflow_type overflow;
 wide_int mul = wi::mul (wi::to_wide (captures[2]), wi::to_wide (captures[3]),
 TYPE_SIGN (type), &overflow);
      if (div == EXACT_DIV_EXPR
 || optimize_successive_divisions_p (captures[3], captures[0])
)
	{
	  if (!overflow
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1028;
	      {
		res_op->set_op (div, type, 2);
		res_op->ops[0] = captures[1];
		res_op->ops[1] =  wide_int_to_tree (type, mul);
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 527, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail1028:;
	    }
	  else
	    {
	      if (TYPE_UNSIGNED (type)
 || mul != wi::min_value (TYPE_PRECISION (type), SIGNED)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1029;
		  {
		    tree tem;
		    tem =  build_zero_cst (type);
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 528, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1029:;
		}
	    }
	}
  }
  return false;
}

bool
gimple_simplify_336 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (div))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
int_range_max vr0, vr1, vr2, vr3, vr4;
      if (INTEGRAL_TYPE_P (type)
 && get_range_query (cfun)->range_of_expr (vr1, captures[3])
 && get_range_query (cfun)->range_of_expr (vr2, captures[4])
 && range_op_handler (MULT_EXPR).overflow_free_p (vr1, vr2)
 && get_range_query (cfun)->range_of_expr (vr0, captures[1])
 && get_range_query (cfun)->range_of_expr (vr3, captures[2])
 && range_op_handler (MINUS_EXPR).overflow_free_p (vr0, vr3)
 && get_range_query (cfun)->range_of_expr (vr4, captures[0])
 && !vr4.undefined_p ()
 && (TYPE_UNSIGNED (type)
 || (vr0.nonnegative_p () && vr4.nonnegative_p ())
 || (vr0.nonpositive_p () && vr4.nonpositive_p ()))
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1039;
	  {
	    res_op->set_op (MINUS_EXPR, type, 2);
	    {
	      tree _o1[2], _r1;
	      _o1[0] = captures[1];
	      _o1[1] = captures[4];
	      gimple_match_op tem_op (res_op->cond.any_else (), div, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1039;
	      res_op->ops[0] = _r1;
	    }
	    res_op->ops[1] = captures[3];
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 538, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1039:;
	}
  }
  return false;
}

bool
gimple_simplify_344 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (mod))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if ((TYPE_UNSIGNED (type) || tree_expr_nonnegative_p (captures[0]))
 && INTEGRAL_TYPE_P (type)
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && (TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (captures[1]))
 || TYPE_UNSIGNED (TREE_TYPE (captures[1]))
 || !TYPE_UNSIGNED (type))
 && integer_pow2p (captures[2]) && tree_int_cst_sgn (captures[2]) > 0
)
    {
      {
 tree utype = TREE_TYPE (captures[1]);
 if (!TYPE_OVERFLOW_WRAPS (utype))
 utype = unsigned_type_for (utype);
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1047;
	  {
	    res_op->set_op (BIT_AND_EXPR, type, 2);
	    res_op->ops[0] = captures[0];
	    {
	      tree _o1[1], _r1;
	      {
		tree _o2[2], _r2;
		{
		  tree _o3[1], _r3;
		  _o3[0] = captures[1];
		  if (utype != TREE_TYPE (_o3[0])
		      && !useless_type_conversion_p (utype, TREE_TYPE (_o3[0])))
		    {
		      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, utype, _o3[0]);
		      tem_op.resimplify (lseq, valueize);
		      _r3 = maybe_push_res_to_seq (&tem_op, lseq);
		      if (!_r3) goto next_after_fail1047;
		    }
		  else
		    _r3 = _o3[0];
		  _o2[0] = _r3;
		}
		_o2[1] =  build_one_cst (utype);
		gimple_match_op tem_op (res_op->cond.any_else (), MINUS_EXPR, TREE_TYPE (_o2[0]), _o2[0], _o2[1]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail1047;
		_o1[0] = _r2;
	      }
	      if (type != TREE_TYPE (_o1[0])
	          && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
		{
		  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail1047;
	        }
	      else
	        _r1 = _o1[0];
	      res_op->ops[1] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 546, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1047:;
      }
    }
  return false;
}

bool
gimple_simplify_356 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (op),
 const enum tree_code ARG_UNUSED (neg_op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (flag_unsafe_math_optimizations
)
    {
      if (!HONOR_SIGNED_ZEROS (captures[1]) && !HONOR_INFINITIES (captures[1])
)
	{
	  if (real_less (&dconst0, TREE_REAL_CST_PTR (captures[0]))
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1061;
	      {
		res_op->set_op (op, type, 2);
		res_op->ops[0] = captures[1];
		res_op->ops[1] = captures[2];
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 560, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail1061:;
	    }
	  else
	    {
	      if (real_less (TREE_REAL_CST_PTR (captures[0]), &dconst0)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1062;
		  {
		    res_op->set_op (neg_op, type, 2);
		    res_op->ops[0] = captures[1];
		    res_op->ops[1] = captures[2];
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 561, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1062:;
		}
	    }
	}
    }
  return false;
}

bool
gimple_simplify_363 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[1]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1070;
      {
	res_op->set_op (op, type, 2);
	res_op->ops[0] = captures[2];
	res_op->ops[1] = captures[1];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 569, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1070:;
    }
  return false;
}

bool
gimple_simplify_368 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp),
 const enum tree_code ARG_UNUSED (out))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[1]))
 && types_match (TREE_TYPE (captures[3]), TREE_TYPE (captures[0]))
 && tree_nop_conversion_p (TREE_TYPE (captures[2]), TREE_TYPE (captures[3]))
 && wi::to_wide (captures[4]) != 0
 && single_use (captures[1])
)
    {
      {
 unsigned int prec = TYPE_PRECISION (TREE_TYPE (captures[3]));
 signop sign = TYPE_SIGN (TREE_TYPE (captures[3]));
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1076;
	  {
	    res_op->set_op (out, type, 2);
	    res_op->ops[0] = captures[3];
	    res_op->ops[1] =  wide_int_to_tree (TREE_TYPE (captures[3]),
 wi::max_value (prec, sign)
 - wi::to_wide (captures[4]));
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 575, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1076:;
      }
    }
  return false;
}

bool
gimple_simplify_374 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (single_use (captures[0])
 && ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1114;
      {
	res_op->set_op (cmp, type, 2);
	res_op->ops[0] = captures[2];
	res_op->ops[1] = captures[1];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 596, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1114:;
    }
  return false;
}

bool
gimple_simplify_376 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp),
 const enum tree_code ARG_UNUSED (out))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (TYPE_UNSIGNED (TREE_TYPE (captures[1]))
 && types_match (TREE_TYPE (captures[1]), TREE_TYPE (captures[2]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1116;
      {
	res_op->set_op (out, type, 2);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[0];
	  gimple_match_op tem_op (res_op->cond.any_else (), IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (_o1[0])), _o1[0]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail1116;
	  res_op->ops[0] = _r1;
	}
	res_op->ops[1] =  build_zero_cst (TREE_TYPE (captures[1]));
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 598, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1116:;
    }
  return false;
}

bool
gimple_simplify_379 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp),
 const enum tree_code ARG_UNUSED (neg_cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (flag_unsafe_math_optimizations
)
    {
      {
 tree tem = const_binop (RDIV_EXPR, type, captures[2], captures[1]);
	  if (tem
 && !(REAL_VALUE_ISINF (TREE_REAL_CST (tem))
 || (real_zerop (tem) && !real_zerop (captures[1])))
)
	    {
	      if (real_less (&dconst0, TREE_REAL_CST_PTR (captures[1]))
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1119;
		  {
		    res_op->set_op (cmp, type, 2);
		    res_op->ops[0] = captures[0];
		    res_op->ops[1] =  tem;
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 601, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1119:;
		}
	      else
		{
		  if (real_less (TREE_REAL_CST_PTR (captures[1]), &dconst0)
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1120;
		      {
			res_op->set_op (neg_cmp, type, 2);
			res_op->ops[0] = captures[0];
			res_op->ops[1] =  tem;
			res_op->resimplify (lseq, valueize);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 602, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail1120:;
		    }
		}
	    }
      }
    }
  return false;
}

bool
gimple_simplify_384 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp),
 const enum tree_code ARG_UNUSED (acmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 tree cst = uniform_integer_cst_p (captures[1]);
      if (tree_int_cst_sgn (cst) == -1
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1131;
	  {
	    res_op->set_op (acmp, type, 2);
	    res_op->ops[0] = captures[0];
	    res_op->ops[1] =  build_uniform_cst (TREE_TYPE (captures[1]),
 wide_int_to_tree (TREE_TYPE (cst),
 wi::to_wide (cst)
 + 1));
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 613, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1131:;
	}
  }
  return false;
}

bool
gimple_simplify_385 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp),
 const enum tree_code ARG_UNUSED (eqcmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
)
    {
      {
 tree ty = TREE_TYPE (captures[0]);
 unsigned prec = TYPE_PRECISION (ty);
 wide_int mask = wi::to_wide (captures[2], prec);
 wide_int rhs = wi::to_wide (captures[3], prec);
 signop sgn = TYPE_SIGN (ty);
	  if ((mask & (mask + 1)) == 0 && wi::gt_p (rhs, 0, sgn)
 && (rhs & (rhs + 1)) == 0 && wi::ge_p (mask, rhs, sgn)
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1132;
	      {
		res_op->set_op (eqcmp, type, 2);
		{
		  tree _o1[2], _r1;
		  _o1[0] = captures[1];
		  _o1[1] =  wide_int_to_tree (ty, mask - rhs);
		  gimple_match_op tem_op (res_op->cond.any_else (), BIT_AND_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail1132;
		  res_op->ops[0] = _r1;
		}
		res_op->ops[1] =  build_zero_cst (ty);
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 614, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail1132:;
	    }
      }
    }
  return false;
}

bool
gimple_simplify_391 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (logs),
 const combined_fn ARG_UNUSED (exps),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (flag_unsafe_math_optimizations
)
    {
      if (! HONOR_SIGN_DEPENDENT_ROUNDING (type)
 && ! HONOR_NANS (type) && ! HONOR_INFINITIES (type)
 && ! flag_trapping_math
 && ! flag_errno_math
)
	{
	  gimple_seq *lseq = seq;
	  if (lseq
	      && (!single_use (captures[0])))
	    lseq = NULL;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1138;
	  {
	    res_op->set_op (cmp, type, 2);
	    res_op->ops[0] = captures[1];
	    {
	      tree _o1[1], _r1;
	      _o1[0] = captures[2];
	      gimple_match_op tem_op (res_op->cond.any_else (), logs, TREE_TYPE (_o1[0]), _o1[0]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1138;
	      res_op->ops[1] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 616, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1138:;
	}
    }
  return false;
}

bool
gimple_simplify_396 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (type)
 && wi::ltu_p (wi::to_wide (captures[1]), element_precision (type))
 && wi::ltu_p (wi::to_wide (captures[2]), element_precision (type))
 && wi::to_widest (captures[2]) >= wi::to_widest (captures[1])
 && wi::to_widest (captures[1]) <= wi::ctz (get_nonzero_bits (captures[0]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1147;
      {
	res_op->set_op (LSHIFT_EXPR, type, 2);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[0];
	  if (type != TREE_TYPE (_o1[0])
	      && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
	    {
	      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1147;
	    }
	  else
	    _r1 = _o1[0];
	  res_op->ops[0] = _r1;
	}
	{
	  tree _o1[2], _r1;
	  _o1[0] = captures[2];
	  _o1[1] = captures[1];
	  gimple_match_op tem_op (res_op->cond.any_else (), MINUS_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail1147;
	  res_op->ops[1] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 625, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1147:;
    }
  return false;
}

bool
gimple_simplify_401 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (shiftrotate))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 tree tem = uniform_vector_p (captures[1]);
      if (tem
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1152;
	  {
	    res_op->set_op (shiftrotate, type, 2);
	    res_op->ops[0] = captures[0];
	    res_op->ops[1] =  tem;
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 629, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1152:;
	}
  }
  return false;
}

bool
gimple_simplify_405 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (bit_op),
 const enum tree_code ARG_UNUSED (shift))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (tree_nop_conversion_p (type, TREE_TYPE (captures[2]))
)
    {
      {
 tree mask = int_const_binop (shift, fold_convert (type, captures[3]), captures[4]);
	  if (mask
)
	    {
	      gimple_seq *lseq = seq;
	      if (lseq
	          && (!single_use (captures[0])
	              || !single_use (captures[1])))
	        lseq = NULL;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1159;
	      {
		res_op->set_op (bit_op, type, 2);
		{
		  tree _o1[2], _r1;
		  {
		    tree _o2[1], _r2;
		    _o2[0] = captures[2];
		    if (type != TREE_TYPE (_o2[0])
		        && !useless_type_conversion_p (type, TREE_TYPE (_o2[0])))
		      {
			gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o2[0]);
			tem_op.resimplify (lseq, valueize);
			_r2 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r2) goto next_after_fail1159;
		      }
		    else
		      _r2 = _o2[0];
		    _o1[0] = _r2;
		  }
		  _o1[1] = captures[4];
		  gimple_match_op tem_op (res_op->cond.any_else (), shift, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail1159;
		  res_op->ops[0] = _r1;
		}
		res_op->ops[1] =  mask;
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 635, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail1159:;
	    }
      }
    }
  return false;
}

bool
gimple_simplify_411 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (minmax))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (type)
 && types_match (captures[1], type) && int_fits_type_p (captures[2], type)
 && TYPE_SIGN (TREE_TYPE (captures[0])) == TYPE_SIGN (type)
 && TYPE_PRECISION (TREE_TYPE (captures[0])) > TYPE_PRECISION (type)
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1171;
      {
	res_op->set_op (minmax, type, 2);
	res_op->ops[0] = captures[1];
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[2];
	  if (type != TREE_TYPE (_o1[0])
	      && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
	    {
	      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1171;
	    }
	  else
	    _r1 = _o1[0];
	  res_op->ops[1] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 647, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1171:;
    }
  return false;
}

bool
gimple_simplify_417 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (type)
 && op != MULT_EXPR
 && op != RDIV_EXPR
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[2]))
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && type_has_mode_precision_p (TREE_TYPE (captures[2]))
 && type_has_mode_precision_p (TREE_TYPE (captures[4]))
 && type_has_mode_precision_p (type)
 && TYPE_PRECISION (TREE_TYPE (captures[1])) > TYPE_PRECISION (TREE_TYPE (captures[2]))
 && types_match (captures[2], type)
 && (types_match (captures[2], captures[4])
 || poly_int_tree_p (captures[3]))
)
    {
      if (TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[2]))
)
	{
	  gimple_seq *lseq = seq;
	  if (lseq
	      && (!single_use (captures[0])))
	    lseq = NULL;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1180;
	  {
	    res_op->set_op (op, type, 2);
	    res_op->ops[0] = captures[2];
	    {
	      tree _o1[1], _r1;
	      _o1[0] = captures[4];
	      if (type != TREE_TYPE (_o1[0])
	          && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
		{
		  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail1180;
	        }
	      else
	        _r1 = _o1[0];
	      res_op->ops[1] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 652, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1180:;
	}
      else
	{
	  {
 tree utype = unsigned_type_for (TREE_TYPE (captures[2]));
	      gimple_seq *lseq = seq;
	      if (lseq
	          && (!single_use (captures[0])))
	        lseq = NULL;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1181;
	      {
		res_op->set_op (NOP_EXPR, type, 1);
		{
		  tree _o1[2], _r1;
		  {
		    tree _o2[1], _r2;
		    _o2[0] = captures[2];
		    if (utype != TREE_TYPE (_o2[0])
		        && !useless_type_conversion_p (utype, TREE_TYPE (_o2[0])))
		      {
			gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, utype, _o2[0]);
			tem_op.resimplify (lseq, valueize);
			_r2 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r2) goto next_after_fail1181;
		      }
		    else
		      _r2 = _o2[0];
		    _o1[0] = _r2;
		  }
		  {
		    tree _o2[1], _r2;
		    _o2[0] = captures[4];
		    if (utype != TREE_TYPE (_o2[0])
		        && !useless_type_conversion_p (utype, TREE_TYPE (_o2[0])))
		      {
			gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, utype, _o2[0]);
			tem_op.resimplify (lseq, valueize);
			_r2 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r2) goto next_after_fail1181;
		      }
		    else
		      _r2 = _o2[0];
		    _o1[1] = _r2;
		  }
		  gimple_match_op tem_op (res_op->cond.any_else (), op, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail1181;
		  res_op->ops[0] = _r1;
		}
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 653, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail1181:;
	  }
	}
    }
  else
    {
      if (FLOAT_TYPE_P (type)
 && DECIMAL_FLOAT_TYPE_P (TREE_TYPE (captures[0]))
 == DECIMAL_FLOAT_TYPE_P (type)
)
	{
	  {
 tree arg0 = strip_float_extensions (captures[2]);
 tree arg1 = strip_float_extensions (captures[4]);
 tree itype = TREE_TYPE (captures[0]);
 tree ty1 = TREE_TYPE (arg0);
 tree ty2 = TREE_TYPE (arg1);
 enum tree_code code = TREE_CODE (itype);
	      if (FLOAT_TYPE_P (ty1)
 && FLOAT_TYPE_P (ty2)
)
		{
		  {
 tree newtype = type;
 if (TYPE_MODE (ty1) == SDmode
 || TYPE_MODE (ty2) == SDmode
 || TYPE_MODE (type) == SDmode)
 newtype = dfloat32_type_node;
 if (TYPE_MODE (ty1) == DDmode
 || TYPE_MODE (ty2) == DDmode
 || TYPE_MODE (type) == DDmode)
 newtype = dfloat64_type_node;
 if (TYPE_MODE (ty1) == TDmode
 || TYPE_MODE (ty2) == TDmode
 || TYPE_MODE (type) == TDmode)
 newtype = dfloat128_type_node;
		      if ((newtype == dfloat32_type_node
 || newtype == dfloat64_type_node
 || newtype == dfloat128_type_node)
 && newtype == type
 && types_match (newtype, type)
)
			{
			  gimple_seq *lseq = seq;
			  if (lseq
			      && (!single_use (captures[0])))
			    lseq = NULL;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1182;
			  {
			    res_op->set_op (op, type, 2);
			    {
			      tree _o1[1], _r1;
			      _o1[0] = captures[2];
			      if (newtype != TREE_TYPE (_o1[0])
			          && !useless_type_conversion_p (newtype, TREE_TYPE (_o1[0])))
				{
				  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, newtype, _o1[0]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail1182;
			        }
			      else
			        _r1 = _o1[0];
			      res_op->ops[0] = _r1;
			    }
			    {
			      tree _o1[1], _r1;
			      _o1[0] = captures[4];
			      if (newtype != TREE_TYPE (_o1[0])
			          && !useless_type_conversion_p (newtype, TREE_TYPE (_o1[0])))
				{
				  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, newtype, _o1[0]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail1182;
			        }
			      else
			        _r1 = _o1[0];
			      res_op->ops[1] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 654, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1182:;
			}
		      else
			{
			  {
 if (element_precision (ty1) > element_precision (newtype))
 newtype = ty1;
 if (element_precision (ty2) > element_precision (newtype))
 newtype = ty2;
			      if (element_precision (newtype) < element_precision (itype)
 && (!VECTOR_MODE_P (TYPE_MODE (newtype))
 || target_supports_op_p (newtype, op, optab_default))
 && (flag_unsafe_math_optimizations
 || (element_precision (newtype) == element_precision (type)
 && real_can_shorten_arithmetic (element_mode (itype),
 element_mode (type))
 && !excess_precision_type (newtype)))
 && !types_match (itype, newtype)
)
				{
				  gimple_seq *lseq = seq;
				  if (lseq
				      && (!single_use (captures[0])))
				    lseq = NULL;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1183;
				  {
				    res_op->set_op (NOP_EXPR, type, 1);
				    {
				      tree _o1[2], _r1;
				      {
					tree _o2[1], _r2;
					_o2[0] = captures[2];
					if (newtype != TREE_TYPE (_o2[0])
					    && !useless_type_conversion_p (newtype, TREE_TYPE (_o2[0])))
					  {
					    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, newtype, _o2[0]);
					    tem_op.resimplify (lseq, valueize);
					    _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					    if (!_r2) goto next_after_fail1183;
					  }
					else
					  _r2 = _o2[0];
					_o1[0] = _r2;
				      }
				      {
					tree _o2[1], _r2;
					_o2[0] = captures[4];
					if (newtype != TREE_TYPE (_o2[0])
					    && !useless_type_conversion_p (newtype, TREE_TYPE (_o2[0])))
					  {
					    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, newtype, _o2[0]);
					    tem_op.resimplify (lseq, valueize);
					    _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					    if (!_r2) goto next_after_fail1183;
					  }
					else
					  _r2 = _o2[0];
					_o1[1] = _r2;
				      }
				      gimple_match_op tem_op (res_op->cond.any_else (), op, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				      tem_op.resimplify (lseq, valueize);
				      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				      if (!_r1) goto next_after_fail1183;
				      res_op->ops[0] = _r1;
				    }
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 655, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail1183:;
				}
			  }
			}
		  }
		}
	  }
	}
    }
  return false;
}

bool
gimple_simplify_438 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!TYPE_SATURATING (type)
)
    {
      if (!TYPE_OVERFLOW_SANITIZED (type)
 && !TYPE_OVERFLOW_SANITIZED (TREE_TYPE (captures[0]))
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1212;
	  {
	    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
	    res_op->ops[0] = captures[0];
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 676, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1212:;
	}
    }
  return false;
}

bool
gimple_simplify_443 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1217;
  {
    res_op->set_op (BIT_AND_EXPR, type, 2);
    res_op->ops[0] = captures[0];
    res_op->ops[1] = captures[1];
    res_op->resimplify (lseq, valueize);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 681, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1217:;
  return false;
}

bool
gimple_simplify_447 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (lseq
      && (!single_use (captures[3])
          || !single_use (captures[4])))
    lseq = NULL;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1221;
  {
    res_op->set_op (BIT_AND_EXPR, type, 2);
    res_op->ops[0] = captures[0];
    {
      tree _o1[1], _r1;
      _o1[0] = captures[5];
      gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
      tem_op.resimplify (lseq, valueize);
      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
      if (!_r1) goto next_after_fail1221;
      res_op->ops[1] = _r1;
    }
    res_op->resimplify (lseq, valueize);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 684, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1221:;
  return false;
}

bool
gimple_simplify_454 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1228;
  {
    res_op->set_op (BIT_XOR_EXPR, type, 2);
    res_op->ops[0] = captures[0];
    res_op->ops[1] = captures[1];
    res_op->resimplify (lseq, valueize);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 691, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1228:;
  return false;
}

bool
gimple_simplify_456 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (lseq
      && (!single_use (captures[0])
          || !single_use (captures[3])))
    lseq = NULL;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1230;
  {
    res_op->set_op (BIT_NOT_EXPR, type, 1);
    {
      tree _o1[2], _r1;
      _o1[0] = captures[1];
      _o1[1] = captures[2];
      gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
      tem_op.resimplify (lseq, valueize);
      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
      if (!_r1) goto next_after_fail1230;
      res_op->ops[0] = _r1;
    }
    res_op->resimplify (lseq, valueize);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 693, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1230:;
  return false;
}

bool
gimple_simplify_461 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (POINTER_TYPE_P (TREE_TYPE (captures[0]))
 && tree_nop_conversion_p (type, TREE_TYPE (captures[0]))
)
    {
      {
 unsigned int align;
 unsigned HOST_WIDE_INT bitpos;
 get_pointer_alignment_1 (captures[0], &align, &bitpos);
	  if (wi::ltu_p (wi::to_wide (captures[1]), align / BITS_PER_UNIT)
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1235;
	      {
		tree tem;
		tem =  wide_int_to_tree (type, (wi::to_wide (captures[1])
 & (bitpos / BITS_PER_UNIT)));
		res_op->set_value (tem);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 697, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail1235:;
	    }
      }
    }
  return false;
}

bool
gimple_simplify_468 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (code2),
 const enum tree_code ARG_UNUSED (code1))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if ((TREE_CODE (captures[2]) == INTEGER_CST
 && TREE_CODE (captures[5]) == INTEGER_CST)
 || ((INTEGRAL_TYPE_P (TREE_TYPE (captures[2]))
 || POINTER_TYPE_P (TREE_TYPE (captures[2])))
 && bitwise_equal_p (captures[2], captures[5]))
)
    {
      {
 bool one_before = false;
 bool one_after = false;
 int cmp = 0;
 bool allbits = true;
 if (TREE_CODE (captures[2]) == INTEGER_CST
 && TREE_CODE (captures[5]) == INTEGER_CST)
 {
 allbits = TYPE_PRECISION (TREE_TYPE (captures[2])) <= TYPE_PRECISION (TREE_TYPE (captures[5]));
 auto t1 = wi::to_wide (fold_convert (TREE_TYPE (captures[5]), captures[2]));
 auto t2 = wi::to_wide (captures[5]);
 cmp = wi::cmp (t1, t2, TYPE_SIGN (TREE_TYPE (captures[5])));
 if (cmp < 0
 && t1 == t2 - 1)
 one_before = true;
 if (cmp > 0
 && t1 == t2 + 1)
 one_after = true;
 }
 bool val;
 switch (code2)
 {
 case EQ_EXPR: val = (cmp == 0); break;
 case NE_EXPR: val = (cmp != 0); break;
 case LT_EXPR: val = (cmp < 0); break;
 case GT_EXPR: val = (cmp > 0); break;
 case LE_EXPR: val = (cmp <= 0); break;
 case GE_EXPR: val = (cmp >= 0); break;
 default: gcc_unreachable ();
 }
	  if (code1 == EQ_EXPR && val
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1249;
	      {
		tree tem;
		tem = captures[0];
		res_op->set_value (tem);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 708, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail1249:;
	    }
	  else
	    {
	      if (code1 == EQ_EXPR && !val
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1250;
		  {
		    tree tem;
		    tem =  constant_boolean_node (false, type);
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 709, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1250:;
		}
	      else
		{
		  if (code1 == NE_EXPR && !val && allbits
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1251;
		      {
			tree tem;
			tem = captures[3];
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 710, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail1251:;
		    }
		  else
		    {
		      if (code1 == NE_EXPR
 && code2 == GE_EXPR
 && cmp == 0
 && allbits
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1252;
			  {
			    res_op->set_op (GT_EXPR, type, 2);
			    res_op->ops[0] = captures[4];
			    {
			      tree _o1[1], _r1;
			      _o1[0] = captures[2];
			      if (TREE_TYPE (res_op->ops[0]) != TREE_TYPE (_o1[0])
			          && !useless_type_conversion_p (TREE_TYPE (res_op->ops[0]), TREE_TYPE (_o1[0])))
				{
				  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, TREE_TYPE (res_op->ops[0]), _o1[0]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail1252;
			        }
			      else
			        _r1 = _o1[0];
			      res_op->ops[1] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 711, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1252:;
			}
		      else
			{
			  if (code1 == NE_EXPR
 && code2 == LE_EXPR
 && cmp == 0
 && allbits
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1253;
			      {
				res_op->set_op (LT_EXPR, type, 2);
				res_op->ops[0] = captures[4];
				{
				  tree _o1[1], _r1;
				  _o1[0] = captures[2];
				  if (TREE_TYPE (res_op->ops[0]) != TREE_TYPE (_o1[0])
				      && !useless_type_conversion_p (TREE_TYPE (res_op->ops[0]), TREE_TYPE (_o1[0])))
				    {
				      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, TREE_TYPE (res_op->ops[0]), _o1[0]);
				      tem_op.resimplify (lseq, valueize);
				      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				      if (!_r1) goto next_after_fail1253;
				    }
				  else
				    _r1 = _o1[0];
				  res_op->ops[1] = _r1;
				}
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 712, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail1253:;
			    }
			  else
			    {
			      if (code1 == NE_EXPR
 && code2 == GT_EXPR
 && one_after
 && allbits
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1254;
				  {
				    res_op->set_op (GT_EXPR, type, 2);
				    res_op->ops[0] = captures[4];
				    {
				      tree _o1[1], _r1;
				      _o1[0] = captures[2];
				      if (TREE_TYPE (res_op->ops[0]) != TREE_TYPE (_o1[0])
				          && !useless_type_conversion_p (TREE_TYPE (res_op->ops[0]), TREE_TYPE (_o1[0])))
					{
					  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, TREE_TYPE (res_op->ops[0]), _o1[0]);
					  tem_op.resimplify (lseq, valueize);
					  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					  if (!_r1) goto next_after_fail1254;
				        }
				      else
				        _r1 = _o1[0];
				      res_op->ops[1] = _r1;
				    }
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 713, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail1254:;
				}
			      else
				{
				  if (code1 == NE_EXPR
 && code2 == LT_EXPR
 && one_before
 && allbits
)
				    {
				      gimple_seq *lseq = seq;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1255;
				      {
					res_op->set_op (LT_EXPR, type, 2);
					res_op->ops[0] = captures[4];
					{
					  tree _o1[1], _r1;
					  _o1[0] = captures[2];
					  if (TREE_TYPE (res_op->ops[0]) != TREE_TYPE (_o1[0])
					      && !useless_type_conversion_p (TREE_TYPE (res_op->ops[0]), TREE_TYPE (_o1[0])))
					    {
					      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, TREE_TYPE (res_op->ops[0]), _o1[0]);
					      tem_op.resimplify (lseq, valueize);
					      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r1) goto next_after_fail1255;
					    }
					  else
					    _r1 = _o1[0];
					  res_op->ops[1] = _r1;
					}
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 714, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail1255:;
				    }
				}
			    }
			}
		    }
		}
	    }
      }
    }
  return false;
}

bool
gimple_simplify_485 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if ((wi::to_wide (captures[2]) & 1) != 0
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1303;
      {
	tree tem;
	tem = captures[0];
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 726, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1303:;
    }
  else
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1304;
      {
	tree tem;
	tem =  build_zero_cst (type);
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 727, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1304:;
    }
  return false;
}

bool
gimple_simplify_488 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1307;
  {
    tree tem;
    tem = captures[1];
    res_op->set_value (tem);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 729, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1307:;
  return false;
}

bool
gimple_simplify_491 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (lseq
      && (!single_use (captures[0])))
    lseq = NULL;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1311;
  {
    res_op->set_op (BIT_IOR_EXPR, type, 2);
    res_op->ops[0] = captures[1];
    {
      tree _o1[1], _r1;
      _o1[0] = captures[2];
      gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
      tem_op.resimplify (lseq, valueize);
      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
      if (!_r1) goto next_after_fail1311;
      res_op->ops[1] = _r1;
    }
    res_op->resimplify (lseq, valueize);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 733, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1311:;
  return false;
}

bool
gimple_simplify_493 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (element_precision (type) <= element_precision (TREE_TYPE (captures[0]))
 || !TYPE_UNSIGNED (TREE_TYPE (captures[0]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1313;
      {
	res_op->set_op (NOP_EXPR, type, 1);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[0];
	  gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail1313;
	  res_op->ops[0] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 735, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1313:;
    }
  return false;
}

bool
gimple_simplify_495 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (element_precision (type) <= element_precision (TREE_TYPE (captures[0]))
 || !TYPE_UNSIGNED (TREE_TYPE (captures[0]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1315;
      {
	res_op->set_op (NOP_EXPR, type, 1);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[0];
	  gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail1315;
	  res_op->ops[0] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 737, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1315:;
    }
  return false;
}

bool
gimple_simplify_501 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (rotate))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if ((element_precision (TREE_TYPE (captures[2]))
 <= element_precision (TREE_TYPE (captures[3]))
 || !TYPE_UNSIGNED (TREE_TYPE (captures[3])))
 && (element_precision (type) <= element_precision (TREE_TYPE (captures[2]))
 || !TYPE_UNSIGNED (TREE_TYPE (captures[2])))
)
    {
      {
 tree rotate_type = TREE_TYPE (captures[2]);
	  gimple_seq *lseq = seq;
	  if (lseq
	      && (!single_use (captures[0])
	          || !single_use (captures[1])))
	    lseq = NULL;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1321;
	  {
	    res_op->set_op (NOP_EXPR, type, 1);
	    {
	      tree _o1[2], _r1;
	      {
		tree _o2[1], _r2;
		_o2[0] = captures[3];
		if (rotate_type != TREE_TYPE (_o2[0])
		    && !useless_type_conversion_p (rotate_type, TREE_TYPE (_o2[0])))
		  {
		    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, rotate_type, _o2[0]);
		    tem_op.resimplify (lseq, valueize);
		    _r2 = maybe_push_res_to_seq (&tem_op, lseq);
		    if (!_r2) goto next_after_fail1321;
		  }
		else
		  _r2 = _o2[0];
		_o1[0] = _r2;
	      }
	      _o1[1] = captures[4];
	      gimple_match_op tem_op (res_op->cond.any_else (), rotate, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1321;
	      res_op->ops[0] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 742, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1321:;
      }
    }
  return false;
}

bool
gimple_simplify_509 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (bitwise_equal_p (captures[0], captures[3])
 && expr_no_side_effects_p (captures[2])
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1330;
      {
	tree tem;
	tem = captures[1];
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 749, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1330:;
    }
  return false;
}

bool
gimple_simplify_514 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1335;
  {
    tree tem;
    tem = captures[2];
    res_op->set_value (tem);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 754, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1335:;
  return false;
}

bool
gimple_simplify_520 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!HONOR_SIGNED_ZEROS (type)
 && (
 (INTEGRAL_TYPE_P (type)
 && types_match (TREE_TYPE (captures[0]), TREE_TYPE (captures[1]))
 && types_match (TREE_TYPE (captures[2]), TREE_TYPE (captures[3]))
 && TYPE_PRECISION (TREE_TYPE (captures[1])) <= TYPE_PRECISION (type)
 && TYPE_PRECISION (TREE_TYPE (captures[3])) <= TYPE_PRECISION (type))
 || (types_match (type, TREE_TYPE (captures[1]))
 && types_match (type, TREE_TYPE (captures[3]))))
)
    {
      if (cmp == EQ_EXPR
)
	{
	  if (VECTOR_TYPE_P (type)
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1344;
	      {
		res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
		res_op->ops[0] = captures[2];
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 763, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail1344:;
	    }
	  else
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1345;
	      {
		res_op->set_op (NOP_EXPR, type, 1);
		res_op->ops[0] = captures[2];
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 764, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail1345:;
	    }
	}
      else
	{
	  if (cmp == NE_EXPR
)
	    {
	      if (VECTOR_TYPE_P (type)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1346;
		  {
		    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
		    res_op->ops[0] = captures[0];
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 765, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1346:;
		}
	      else
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1347;
		  {
		    res_op->set_op (NOP_EXPR, type, 1);
		    res_op->ops[0] = captures[0];
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 766, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1347:;
		}
	    }
	  else
	    {
	      if (cmp == LE_EXPR || cmp == UNLE_EXPR || cmp == LT_EXPR || cmp == UNLT_EXPR
)
		{
		  if (!HONOR_NANS (type)
)
		    {
		      if (VECTOR_TYPE_P (type)
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1348;
			  {
			    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] = captures[2];
			      gimple_match_op tem_op (res_op->cond.any_else (), MIN_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail1348;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 767, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1348:;
			}
		      else
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1349;
			  {
			    res_op->set_op (NOP_EXPR, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] = captures[2];
			      gimple_match_op tem_op (res_op->cond.any_else (), MIN_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail1349;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 768, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1349:;
			}
		    }
		}
	      else
		{
		  if (cmp == GE_EXPR || cmp == UNGE_EXPR || cmp == GT_EXPR || cmp == UNGT_EXPR
)
		    {
		      if (!HONOR_NANS (type)
)
			{
			  if (VECTOR_TYPE_P (type)
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1350;
			      {
				res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
				{
				  tree _o1[2], _r1;
				  _o1[0] = captures[0];
				  _o1[1] = captures[2];
				  gimple_match_op tem_op (res_op->cond.any_else (), MAX_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail1350;
				  res_op->ops[0] = _r1;
				}
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 769, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail1350:;
			    }
			  else
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1351;
			      {
				res_op->set_op (NOP_EXPR, type, 1);
				{
				  tree _o1[2], _r1;
				  _o1[0] = captures[0];
				  _o1[1] = captures[2];
				  gimple_match_op tem_op (res_op->cond.any_else (), MAX_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail1351;
				  res_op->ops[0] = _r1;
				}
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 770, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail1351:;
			    }
			}
		    }
		  else
		    {
		      if (cmp == UNEQ_EXPR
)
			{
			  if (!HONOR_NANS (type)
)
			    {
			      if (VECTOR_TYPE_P (type)
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1352;
				  {
				    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
				    res_op->ops[0] = captures[2];
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 771, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail1352:;
				}
			      else
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1353;
				  {
				    res_op->set_op (NOP_EXPR, type, 1);
				    res_op->ops[0] = captures[2];
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 772, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail1353:;
				}
			    }
			}
		      else
			{
			  if (cmp == LTGT_EXPR
)
			    {
			      if (!HONOR_NANS (type)
)
				{
				  if (VECTOR_TYPE_P (type)
)
				    {
				      gimple_seq *lseq = seq;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1354;
				      {
					res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
					res_op->ops[0] = captures[0];
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 773, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail1354:;
				    }
				  else
				    {
				      gimple_seq *lseq = seq;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1355;
				      {
					res_op->set_op (NOP_EXPR, type, 1);
					res_op->ops[0] = captures[0];
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 774, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail1355:;
				    }
				}
			    }
			}
		    }
		}
	    }
	}
    }
  return false;
}

bool
gimple_simplify_536 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (wi::to_wide (uniform_integer_cst_p (captures[3])) == 2
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1407;
      {
	tree tem;
	tem = captures[2];
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 785, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1407:;
    }
  return false;
}

bool
gimple_simplify_543 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (type)
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1416;
      {
	tree tem;
	tem = captures[2];
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 791, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1416:;
    }
  return false;
}

bool
gimple_simplify_548 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1421;
  {
    tree tem;
    tem = captures[3];
    res_op->set_value (tem);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 796, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1421:;
  return false;
}

bool
gimple_simplify_552 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!HONOR_SIGNED_ZEROS (type)
 && bitwise_equal_p (captures[0], captures[1])
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1425;
      {
	tree tem;
	tem = captures[1];
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 797, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1425:;
    }
  return false;
}

bool
gimple_simplify_559 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!HONOR_SIGNED_ZEROS (type)
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1433;
      {
	tree tem;
	tem = captures[0];
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 799, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1433:;
    }
  return false;
}

bool
gimple_simplify_565 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!HONOR_SIGNED_ZEROS (TREE_TYPE (captures[1]))
 && !TYPE_UNSIGNED (TREE_TYPE (captures[1]))
 && element_precision (captures[1])
 <= element_precision (captures[0])
 && bitwise_equal_p (captures[1], captures[2])
)
    {
      if (TYPE_UNSIGNED (TREE_TYPE (captures[2]))
)
	{
	  {
 tree stype = signed_type_for (TREE_TYPE (captures[2]));
	      if (types_match (captures[0], stype)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1445;
		  {
		    res_op->set_op (ABSU_EXPR, type, 1);
		    res_op->ops[0] = captures[0];
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 803, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1445:;
		}
	      else
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1446;
		  {
		    res_op->set_op (ABSU_EXPR, type, 1);
		    {
		      tree _o1[1], _r1;
		      _o1[0] = captures[2];
		      if (stype != TREE_TYPE (_o1[0])
		          && !useless_type_conversion_p (stype, TREE_TYPE (_o1[0])))
			{
			  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, stype, _o1[0]);
			  tem_op.resimplify (lseq, valueize);
			  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r1) goto next_after_fail1446;
		        }
		      else
		        _r1 = _o1[0];
		      res_op->ops[0] = _r1;
		    }
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 804, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1446:;
		}
	  }
	}
      else
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1447;
	  {
	    res_op->set_op (ABS_EXPR, type, 1);
	    res_op->ops[0] = captures[2];
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 805, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1447:;
	}
    }
  return false;
}

bool
gimple_simplify_571 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!HONOR_SIGNED_ZEROS (TREE_TYPE (captures[1]))
 && !TYPE_UNSIGNED (TREE_TYPE (captures[1]))
 && element_precision (captures[1])
 <= element_precision (captures[0])
 && bitwise_equal_p (captures[1], captures[2])
)
    {
      if ((ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[2]))
 && !TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[2])))
 || TYPE_UNSIGNED (TREE_TYPE (captures[2]))
)
	{
	  {
 tree stype = signed_type_for (TREE_TYPE (captures[2]));
 tree utype = unsigned_type_for (TREE_TYPE (captures[2]));
	      if (types_match (captures[0], stype)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1460;
		  {
		    res_op->set_op (NOP_EXPR, type, 1);
		    {
		      tree _o1[1], _r1;
		      {
			tree _o2[1], _r2;
			_o2[0] = captures[0];
			gimple_match_op tem_op (res_op->cond.any_else (), ABSU_EXPR, utype, _o2[0]);
			tem_op.resimplify (lseq, valueize);
			_r2 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r2) goto next_after_fail1460;
			_o1[0] = _r2;
		      }
		      gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
		      tem_op.resimplify (lseq, valueize);
		      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		      if (!_r1) goto next_after_fail1460;
		      res_op->ops[0] = _r1;
		    }
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 811, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1460:;
		}
	      else
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1461;
		  {
		    res_op->set_op (NOP_EXPR, type, 1);
		    {
		      tree _o1[1], _r1;
		      {
			tree _o2[1], _r2;
			{
			  tree _o3[1], _r3;
			  _o3[0] = captures[2];
			  if (stype != TREE_TYPE (_o3[0])
			      && !useless_type_conversion_p (stype, TREE_TYPE (_o3[0])))
			    {
			      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, stype, _o3[0]);
			      tem_op.resimplify (lseq, valueize);
			      _r3 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r3) goto next_after_fail1461;
			    }
			  else
			    _r3 = _o3[0];
			  _o2[0] = _r3;
			}
			gimple_match_op tem_op (res_op->cond.any_else (), ABSU_EXPR, utype, _o2[0]);
			tem_op.resimplify (lseq, valueize);
			_r2 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r2) goto next_after_fail1461;
			_o1[0] = _r2;
		      }
		      gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
		      tem_op.resimplify (lseq, valueize);
		      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		      if (!_r1) goto next_after_fail1461;
		      res_op->ops[0] = _r1;
		    }
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 812, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1461:;
		}
	  }
	}
      else
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1462;
	  {
	    res_op->set_op (NOP_EXPR, type, 1);
	    {
	      tree _o1[1], _r1;
	      {
		tree _o2[1], _r2;
		_o2[0] = captures[2];
		gimple_match_op tem_op (res_op->cond.any_else (), ABS_EXPR, TREE_TYPE (_o2[0]), _o2[0]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail1462;
		_o1[0] = _r2;
	      }
	      gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1462;
	      res_op->ops[0] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 813, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1462:;
	}
    }
  return false;
}

bool
gimple_simplify_587 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (minmax))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1483;
  {
    tree tem;
    tem = captures[0];
    res_op->set_value (tem);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 826, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1483:;
  return false;
}

bool
gimple_simplify_593 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (minmax),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 poly_int64 off0, off1;
 tree base0, base1;
 int equal = address_compare (cmp, TREE_TYPE (captures[0]), captures[1], captures[3], base0, base1,
 off0, off1,
0
);
      if (equal == 1
)
	{
	  if (minmax == MIN_EXPR
)
	    {
	      if (known_le (off0, off1)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1492;
		  {
		    tree tem;
		    tem = captures[0];
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 830, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1492:;
		}
	      else
		{
		  if (known_gt (off0, off1)
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1493;
		      {
			tree tem;
			tem = captures[2];
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 831, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail1493:;
		    }
		}
	    }
	  else
	    {
	      if (known_ge (off0, off1)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1494;
		  {
		    tree tem;
		    tem = captures[0];
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 832, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1494:;
		}
	      else
		{
		  if (known_lt (off0, off1)
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1495;
		      {
			tree tem;
			tem = captures[2];
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 833, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail1495:;
		    }
		}
	    }
	}
  }
  return false;
}

bool
gimple_simplify_611 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (VECTOR_INTEGER_TYPE_P (TREE_TYPE (captures[3]))
 && VECTOR_INTEGER_TYPE_P (TREE_TYPE (captures[0]))
 && !TYPE_UNSIGNED (TREE_TYPE (captures[0]))
 && VECTOR_TYPE_P (TREE_TYPE (captures[1]))
 && VECTOR_TYPE_P (type)
 && tree_int_cst_le (TYPE_SIZE (TREE_TYPE (type)),
 TYPE_SIZE (TREE_TYPE (TREE_TYPE (captures[1]))))
 && TYPE_SIZE (type) == TYPE_SIZE (TREE_TYPE (captures[1]))
)
    {
      {
 tree vtype = TREE_TYPE (captures[1]);
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1522;
	  {
	    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
	    {
	      tree _o1[3], _r1;
	      _o1[0] = captures[2];
	      {
		tree _o2[1], _r2;
		_o2[0] = captures[5];
		gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, vtype, _o2[0]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail1522;
		_o1[1] = _r2;
	      }
	      {
		tree _o2[1], _r2;
		_o2[0] = captures[6];
		gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, vtype, _o2[0]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail1522;
		_o1[2] = _r2;
	      }
	      gimple_match_op tem_op (res_op->cond.any_else (), VEC_COND_EXPR, TREE_TYPE (_o1[1]), _o1[0], _o1[1], _o1[2]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1522;
	      res_op->ops[0] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 852, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1522:;
      }
    }
  return false;
}

bool
gimple_simplify_626 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (cond_len_op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 tree op_type = TREE_TYPE (captures[5]);
      if (inverse_conditions_p (captures[0], captures[2])
 && element_precision (type) == element_precision (op_type)
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1537;
	  {
	    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
	    {
	      tree _o1[6], _r1;
	      _o1[0] = captures[2];
	      _o1[1] = captures[3];
	      _o1[2] = captures[4];
	      {
		tree _o2[1], _r2;
		_o2[0] = captures[1];
		gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, op_type, _o2[0]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail1537;
		_o1[3] = _r2;
	      }
	      _o1[4] = captures[6];
	      _o1[5] = captures[7];
	      gimple_match_op tem_op (res_op->cond.any_else (), cond_len_op, TREE_TYPE (_o1[1]), _o1[0], _o1[1], _o1[2], _o1[3], _o1[4], _o1[5]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1537;
	      res_op->ops[0] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 862, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1537:;
	}
  }
  return false;
}

bool
gimple_simplify_634 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (ovf))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && TYPE_PRECISION (TREE_TYPE (captures[0])) > TYPE_PRECISION (TREE_TYPE (captures[1]))
 && (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) || TYPE_UNSIGNED (TREE_TYPE (captures[1])))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1545;
      {
	res_op->set_op (ovf, type, 2);
	res_op->ops[0] = captures[1];
	res_op->ops[1] = captures[2];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 870, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1545:;
    }
  return false;
}

bool
gimple_simplify_643 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (fns))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1554;
  {
    tree tem;
    tem = captures[0];
    res_op->set_value (tem);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 879, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1554:;
  return false;
}

bool
gimple_simplify_649 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (froms),
 const combined_fn ARG_UNUSED (tos))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (optimize && canonicalize_math_p ()
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1560;
      {
	res_op->set_op (tos, type, 1);
	res_op->ops[0] = captures[0];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 885, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1560:;
    }
  return false;
}

bool
gimple_simplify_656 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (SIGNBIT))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1567;
  {
    tree tem;
    tem =  integer_zero_node;
    res_op->set_value (tem);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 892, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1567:;
  return false;
}

bool
gimple_simplify_662 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (canonicalize_math_after_vectorization_p ()
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1573;
      {
	res_op->set_op (CFN_FNMA, type, 3);
	res_op->ops[0] = captures[0];
	res_op->ops[1] = captures[1];
	res_op->ops[2] = captures[2];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 898, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1573:;
    }
  return false;
}

bool
gimple_simplify_670 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (ctz))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 tree t = TREE_TYPE (captures[0]);
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1581;
      {
	res_op->set_op (ctz, type, 1);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[1];
	  if (t != TREE_TYPE (_o1[0])
	      && !useless_type_conversion_p (t, TREE_TYPE (_o1[0])))
	    {
	      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, t, _o1[0]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1581;
	    }
	  else
	    _r1 = _o1[0];
	  res_op->ops[0] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 903, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1581:;
  }
  return false;
}

bool
gimple_simplify_679 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (bswap),
 const combined_fn ARG_UNUSED (parity))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && TYPE_PRECISION (TREE_TYPE (captures[0]))
 >= TYPE_PRECISION (TREE_TYPE (captures[1]))
)
    {
      {
 tree type0 = TREE_TYPE (captures[0]);
 tree type1 = TREE_TYPE (captures[1]);
	  gimple_seq *lseq = seq;
	  if (lseq
	      && (!single_use (captures[1])))
	    lseq = NULL;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1595;
	  {
	    res_op->set_op (parity, type, 1);
	    {
	      tree _o1[1], _r1;
	      {
		tree _o2[1], _r2;
		_o2[0] = captures[2];
		if (type1 != TREE_TYPE (_o2[0])
		    && !useless_type_conversion_p (type1, TREE_TYPE (_o2[0])))
		  {
		    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type1, _o2[0]);
		    tem_op.resimplify (lseq, valueize);
		    _r2 = maybe_push_res_to_seq (&tem_op, lseq);
		    if (!_r2) goto next_after_fail1595;
		  }
		else
		  _r2 = _o2[0];
		_o1[0] = _r2;
	      }
	      if (type0 != TREE_TYPE (_o1[0])
	          && !useless_type_conversion_p (type0, TREE_TYPE (_o1[0])))
		{
		  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type0, _o1[0]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail1595;
	        }
	      else
	        _r1 = _o1[0];
	      res_op->ops[0] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 915, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1595:;
      }
    }
  return false;
}

bool
gimple_simplify_685 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (FFS))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && TYPE_PRECISION (TREE_TYPE (captures[0])) > TYPE_PRECISION (TREE_TYPE (captures[1]))
)
    {
      {
 combined_fn cfn = CFN_LAST;
 tree type0 = TREE_TYPE (captures[1]);
 if (TREE_CODE (type0) == BITINT_TYPE)
 {
 if (TYPE_PRECISION (type0) > MAX_FIXED_MODE_SIZE)
 cfn = CFN_FFS;
 else
 type0
 = build_nonstandard_integer_type (TYPE_PRECISION (type0),
 0);
 }
 type0 = signed_type_for (type0);
 if (cfn == CFN_LAST
 && direct_internal_fn_supported_p (IFN_FFS, type0,
 OPTIMIZE_FOR_BOTH))
 cfn = CFN_FFS;
 if (cfn == CFN_LAST
 && TYPE_PRECISION (TREE_TYPE (captures[0])) > BITS_PER_WORD
 && !direct_internal_fn_supported_p (IFN_FFS,
 TREE_TYPE (captures[0]),
 OPTIMIZE_FOR_BOTH))
 {
 if (TYPE_PRECISION (type0)
 == TYPE_PRECISION (integer_type_node))
 cfn = CFN_BUILT_IN_FFS;
 else if (TYPE_PRECISION (type0)
 == TYPE_PRECISION (long_long_integer_type_node))
 cfn = CFN_BUILT_IN_FFSLL;
 }
	  if (cfn == CFN_FFS
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1603;
	      {
		res_op->set_op (CFN_FFS, type, 1);
		{
		  tree _o1[1], _r1;
		  _o1[0] = captures[1];
		  if (type0 != TREE_TYPE (_o1[0])
		      && !useless_type_conversion_p (type0, TREE_TYPE (_o1[0])))
		    {
		      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type0, _o1[0]);
		      tem_op.resimplify (lseq, valueize);
		      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		      if (!_r1) goto next_after_fail1603;
		    }
		  else
		    _r1 = _o1[0];
		  res_op->ops[0] = _r1;
		}
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 921, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail1603:;
	    }
	  else
	    {
	      if (cfn == CFN_BUILT_IN_FFS
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1604;
		  {
		    res_op->set_op (CFN_BUILT_IN_FFS, type, 1);
		    {
		      tree _o1[1], _r1;
		      _o1[0] = captures[1];
		      if (type0 != TREE_TYPE (_o1[0])
		          && !useless_type_conversion_p (type0, TREE_TYPE (_o1[0])))
			{
			  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type0, _o1[0]);
			  tem_op.resimplify (lseq, valueize);
			  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r1) goto next_after_fail1604;
		        }
		      else
		        _r1 = _o1[0];
		      res_op->ops[0] = _r1;
		    }
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 922, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1604:;
		}
	      else
		{
		  if (cfn == CFN_BUILT_IN_FFSLL
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1605;
		      {
			res_op->set_op (CFN_BUILT_IN_FFSLL, type, 1);
			{
			  tree _o1[1], _r1;
			  _o1[0] = captures[1];
			  if (type0 != TREE_TYPE (_o1[0])
			      && !useless_type_conversion_p (type0, TREE_TYPE (_o1[0])))
			    {
			      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type0, _o1[0]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail1605;
			    }
			  else
			    _r1 = _o1[0];
			  res_op->ops[0] = _r1;
			}
			res_op->resimplify (lseq, valueize);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 923, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail1605:;
		    }
		}
	    }
      }
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_COSH (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    const combined_fn coss = CFN_BUILT_IN_COSH;
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1650;
		    {
		      res_op->set_op (coss, type, 1);
		      res_op->ops[0] = captures[0];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 951, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1650:;
		  }
	          break;
	        }
	      case ABS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    const combined_fn coss = CFN_BUILT_IN_COSH;
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1651;
		    {
		      res_op->set_op (coss, type, 1);
		      res_op->ops[0] = captures[0];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 951, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1651:;
		  }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_COPYSIGN:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		      if (gimple_simplify_421 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGN, CFN_BUILT_IN_COSH))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGNF:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		      if (gimple_simplify_421 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGNF, CFN_BUILT_IN_COSH))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGNL:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		      if (gimple_simplify_421 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGNL, CFN_BUILT_IN_COSH))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_ATANH:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		      if (gimple_simplify_423 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COSH, CFN_BUILT_IN_ATANH, CFN_BUILT_IN_SQRT))
		        return true;
		    }
	          }
	        break;
	      case CFN_COPYSIGN:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		      if (gimple_simplify_421 (res_op, seq, valueize, type, captures, CFN_COPYSIGN, CFN_BUILT_IN_COSH))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_CCOSHL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1674;
		    {
		      res_op->set_op (CFN_BUILT_IN_CCOSHL, type, 1);
		      res_op->ops[0] = captures[0];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 963, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1674:;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_BIT_NOT_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q21 };
				    if (gimple_simplify_491 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q40, _q20 };
				    if (gimple_simplify_491 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_IOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q21 };
				    if (gimple_simplify_492 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q40, _q20 };
				    if (gimple_simplify_492 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q21 };
				    gimple_seq *lseq = seq;
				    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1690;
				    {
				      res_op->set_op (PLUS_EXPR, type, 2);
				      res_op->ops[0] = captures[0];
				      res_op->ops[1] = captures[1];
				      res_op->resimplify (lseq, valueize);
				      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 967, __FILE__, __LINE__, true);
				      return true;
				    }
next_after_fail1690:;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
		    gimple_seq *lseq = seq;
		    if (lseq
		        && (!single_use (captures[0])))
		      lseq = NULL;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1691;
		    {
		      res_op->set_op (PLUS_EXPR, type, 2);
		      {
			tree _o1[1], _r1;
			_o1[0] = captures[1];
			gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
			tem_op.resimplify (lseq, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r1) goto next_after_fail1691;
			res_op->ops[0] = _r1;
		      }
		      res_op->ops[1] = captures[2];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 968, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1691:;
		  }
		  if (integer_each_onep (_q21))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_493 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q21 };
				    if (gimple_simplify_494 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q40, _q20 };
				    if (gimple_simplify_494 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case INTEGER_CST:
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			  if ((INTEGRAL_TYPE_P (type)
 && TYPE_UNSIGNED (type))
 || (!TYPE_OVERFLOW_SANITIZED (type)
 && may_negate_without_overflow_p (captures[2]))
)
			    {
			      gimple_seq *lseq = seq;
			      if (lseq
			          && (!single_use (captures[0])))
			        lseq = NULL;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1692;
			      {
				res_op->set_op (PLUS_EXPR, type, 2);
				{
				  tree _o1[1], _r1;
				  _o1[0] = captures[1];
				  gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail1692;
				  res_op->ops[0] = _r1;
				}
				res_op->ops[1] =  const_unop (NEGATE_EXPR, type, captures[2]);
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 969, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail1692:;
			    }
			}
		        break;
		      }
		    default:;
		    }
		if (integer_all_onesp (_q21))
		  {
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_495 (res_op, seq, valueize, type, captures))
		        return true;
		    }
		  }
	          break;
	        }
	      case RSHIFT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
		    if (!TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[0])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1693;
			{
			  res_op->set_op (RSHIFT_EXPR, type, 2);
			  {
			    tree _o1[1], _r1;
			    _o1[0] = captures[1];
			    gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail1693;
			    res_op->ops[0] = _r1;
			  }
			  res_op->ops[1] = captures[2];
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 970, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail1693:;
		      }
		    else
		      {
			if (INTEGRAL_TYPE_P (type)
 && !wi::neg_p (tree_nonzero_bits (captures[1]))
)
			  {
			    {
 tree stype = signed_type_for (TREE_TYPE (captures[1]));
				gimple_seq *lseq = seq;
				if (lseq
				    && (!single_use (captures[0])))
				  lseq = NULL;
				if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1694;
				{
				  res_op->set_op (NOP_EXPR, type, 1);
				  {
				    tree _o1[2], _r1;
				    {
				      tree _o2[1], _r2;
				      {
					tree _o3[1], _r3;
					_o3[0] = captures[1];
					if (stype != TREE_TYPE (_o3[0])
					    && !useless_type_conversion_p (stype, TREE_TYPE (_o3[0])))
					  {
					    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, stype, _o3[0]);
					    tem_op.resimplify (lseq, valueize);
					    _r3 = maybe_push_res_to_seq (&tem_op, lseq);
					    if (!_r3) goto next_after_fail1694;
					  }
					else
					  _r3 = _o3[0];
					_o2[0] = _r3;
				      }
				      gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o2[0]), _o2[0]);
				      tem_op.resimplify (NULL, valueize);
				      _r2 = maybe_push_res_to_seq (&tem_op, NULL);
				      if (!_r2) goto next_after_fail1694;
				      _o1[0] = _r2;
				    }
				    _o1[1] = captures[2];
				    gimple_match_op tem_op (res_op->cond.any_else (), RSHIFT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				    tem_op.resimplify (lseq, valueize);
				    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				    if (!_r1) goto next_after_fail1694;
				    res_op->ops[0] = _r1;
				  }
				  res_op->resimplify (lseq, valueize);
				  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 971, __FILE__, __LINE__, true);
				  return true;
				}
next_after_fail1694:;
			    }
			  }
		      }
		  }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q40, _q21 };
						    if (gimple_simplify_496 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q30, _q21 };
				    if (gimple_simplify_496 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_NOT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1695;
		    {
		      tree tem;
		      tem = captures[0];
		      res_op->set_value (tem);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 972, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1695:;
		  }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NEGATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
				    if (gimple_simplify_497 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (integer_each_onep (_q31))
				    {
				      {
					tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
					if (gimple_simplify_493 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
			          break;
			        }
			      case PLUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (integer_all_onesp (_q31))
				    {
				      {
					tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
					if (gimple_simplify_495 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
			          break;
			        }
			      case BIT_XOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q31))
				    {
				    case INTEGER_CST:
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q31 };
					  if (gimple_simplify_498 (res_op, seq, valueize, type, captures))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  {
						    tree captures[2] ATTRIBUTE_UNUSED = { _q40, _q31 };
						    if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q31))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q31))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  {
						    tree captures[2] ATTRIBUTE_UNUSED = { _q50, _q30 };
						    if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case RSHIFT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  switch (TREE_CODE (_q40))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q40))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_NOT_EXPR:
							        {
								  tree _q50 = gimple_assign_rhs1 (_a4);
								  _q50 = do_valueize (valueize, _q50);
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q50, _q31 };
								    if (gimple_simplify_500 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case BIT_NOT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q40, _q31 };
						    if (gimple_simplify_500 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case LROTATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  switch (TREE_CODE (_q40))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q40))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_NOT_EXPR:
							        {
								  tree _q50 = gimple_assign_rhs1 (_a4);
								  _q50 = do_valueize (valueize, _q50);
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q50, _q31 };
								    if (gimple_simplify_501 (res_op, seq, valueize, type, captures, LROTATE_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case BIT_NOT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q40, _q31 };
						    if (gimple_simplify_501 (res_op, seq, valueize, type, captures, LROTATE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case RROTATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  switch (TREE_CODE (_q40))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q40))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_NOT_EXPR:
							        {
								  tree _q50 = gimple_assign_rhs1 (_a4);
								  _q50 = do_valueize (valueize, _q50);
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q50, _q31 };
								    if (gimple_simplify_501 (res_op, seq, valueize, type, captures, RROTATE_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case BIT_NOT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q40, _q31 };
						    if (gimple_simplify_501 (res_op, seq, valueize, type, captures, RROTATE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    if (gimple_simplify_497 (res_op, seq, valueize, type, captures))
		      return true;
		  }
	          break;
	        }
	      case BIT_XOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			  if (gimple_simplify_498 (res_op, seq, valueize, type, captures))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q21 };
				    if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q40, _q20 };
				    if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (gimple_truth_valued_p (_q20, valueize))
		    {
		      if (gimple_truth_valued_p (_q21, valueize))
			{
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			    if (INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && TYPE_PRECISION (TREE_TYPE (captures[1])) == 1
)
			      {
				gimple_seq *lseq = seq;
				if (lseq
				    && (!single_use (captures[0])))
				  lseq = NULL;
				if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1696;
				{
				  res_op->set_op (NOP_EXPR, type, 1);
				  {
				    tree _o1[2], _r1;
				    _o1[0] = captures[1];
				    _o1[1] = captures[2];
				    gimple_match_op tem_op (res_op->cond.any_else (), EQ_EXPR, boolean_type_node, _o1[0], _o1[1]);
				    tem_op.resimplify (lseq, valueize);
				    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				    if (!_r1) goto next_after_fail1696;
				    res_op->ops[0] = _r1;
				  }
				  res_op->resimplify (lseq, valueize);
				  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 973, __FILE__, __LINE__, true);
				  return true;
				}
next_after_fail1696:;
			      }
			  }
		        }
		    }
	          break;
	        }
	      case MIN_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q21 };
				    if (gimple_simplify_502 (res_op, seq, valueize, type, captures, MIN_EXPR, MAX_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q40, _q20 };
				    if (gimple_simplify_502 (res_op, seq, valueize, type, captures, MIN_EXPR, MAX_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case MAX_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q21 };
				    if (gimple_simplify_502 (res_op, seq, valueize, type, captures, MAX_EXPR, MIN_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q40, _q20 };
				    if (gimple_simplify_502 (res_op, seq, valueize, type, captures, MAX_EXPR, MIN_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q40, _q21 };
						    if (gimple_simplify_503 (res_op, seq, valueize, type, captures, LROTATE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q30, _q21 };
				    if (gimple_simplify_503 (res_op, seq, valueize, type, captures, LROTATE_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case RROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q40, _q21 };
						    if (gimple_simplify_503 (res_op, seq, valueize, type, captures, RROTATE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q30, _q21 };
				    if (gimple_simplify_503 (res_op, seq, valueize, type, captures, RROTATE_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case VEC_COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22 };
		    gimple_seq *lseq = seq;
		    if (lseq
		        && (!single_use (captures[0])))
		      lseq = NULL;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1697;
		    {
		      res_op->set_op (VEC_COND_EXPR, type, 3);
		      res_op->ops[0] = captures[1];
		      {
			tree _o1[1], _r1;
			_o1[0] = captures[2];
			gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
			tem_op.resimplify (NULL, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, NULL);
			if (!_r1) goto next_after_fail1697;
			res_op->ops[1] = _r1;
		      }
		      {
			tree _o1[1], _r1;
			_o1[0] = captures[3];
			gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
			tem_op.resimplify (NULL, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, NULL);
			if (!_r1) goto next_after_fail1697;
			res_op->ops[2] = _r1;
		      }
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 933, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1697:;
		  }
	          break;
	        }
	      case LT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_504 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR, UNGE_EXPR))
		      return true;
		  }
	          break;
	        }
	      case LE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_504 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR, UNGT_EXPR))
		      return true;
		  }
	          break;
	        }
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_504 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR, NE_EXPR))
		      return true;
		  }
	          break;
	        }
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_504 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR, EQ_EXPR))
		      return true;
		  }
	          break;
	        }
	      case GE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_504 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR, UNLT_EXPR))
		      return true;
		  }
	          break;
	        }
	      case GT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_504 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR, UNLE_EXPR))
		      return true;
		  }
	          break;
	        }
	      case UNORDERED_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_504 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR, ORDERED_EXPR))
		      return true;
		  }
	          break;
	        }
	      case ORDERED_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_504 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR, UNORDERED_EXPR))
		      return true;
		  }
	          break;
	        }
	      case UNLT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_504 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR, GE_EXPR))
		      return true;
		  }
	          break;
	        }
	      case UNLE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_504 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR, GT_EXPR))
		      return true;
		  }
	          break;
	        }
	      case UNGT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_504 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR, LE_EXPR))
		      return true;
		  }
	          break;
	        }
	      case UNGE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_504 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR, LT_EXPR))
		      return true;
		  }
	          break;
	        }
	      case UNEQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_504 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR, LTGT_EXPR))
		      return true;
		  }
	          break;
	        }
	      case LTGT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_504 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR, UNEQ_EXPR))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_TANF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_ATANF:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_639 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_TANF, CFN_BUILT_IN_ATANF))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_TAN (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_ATAN:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_639 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_TAN, CFN_BUILT_IN_ATAN))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_TANL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_ATANL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_639 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_TANL, CFN_BUILT_IN_ATANL))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_TAN (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_ATAN:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_639 (res_op, seq, valueize, type, captures, CFN_TAN, CFN_ATAN))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_SIN (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_ATAN:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		      if (gimple_simplify_640 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_SIN, CFN_BUILT_IN_ATAN, CFN_BUILT_IN_SQRT, CFN_BUILT_IN_COPYSIGN))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_SINHF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_ATANHF:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		      if (gimple_simplify_641 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_SINHF, CFN_BUILT_IN_ATANHF, CFN_BUILT_IN_SQRTF))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_TRUNCF16 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_TRUNCF16:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_642 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_TRUNCF16))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_643 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_TRUNCF16))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_TRUNCF128X (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_TRUNCF128X:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_642 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_TRUNCF128X))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_643 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_TRUNCF128X))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_FLOORF32X (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_FLOORF32X:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_642 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FLOORF32X))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_643 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FLOORF32X))
        return true;
    }
  }
if (tree_expr_nonnegative_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_646 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FLOORF32X, CFN_BUILT_IN_TRUNCF32X))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_CEILF32 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_CEILF32:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_642 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CEILF32))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_643 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CEILF32))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_CEIL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_CEIL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_642 (res_op, seq, valueize, type, captures, CFN_CEIL))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_643 (res_op, seq, valueize, type, captures, CFN_CEIL))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_ROUNDF128 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_ROUNDF128:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_642 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ROUNDF128))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_643 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ROUNDF128))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_NEARBYINTL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (gimple_double_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_645 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_NEARBYINTL, CFN_BUILT_IN_NEARBYINT))
			  return true;
		      }
		    }
		  if (gimple_float_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_644 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_NEARBYINTL, CFN_BUILT_IN_NEARBYINTF))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_NEARBYINTL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_642 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_NEARBYINTL))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_643 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_NEARBYINTL))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_RINTF16 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_RINTF16:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_642 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_RINTF16))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_643 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_RINTF16))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_RINTF128X (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_RINTF128X:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_642 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_RINTF128X))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_643 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_RINTF128X))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_LCEILL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (gimple_double_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_649 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LCEILL, CFN_BUILT_IN_LCEIL))
			  return true;
		      }
		    }
		  if (gimple_float_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_650 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LCEILL, CFN_BUILT_IN_LCEILF))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_652 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LCEILL))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_LROUNDL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (gimple_double_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_649 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LROUNDL, CFN_BUILT_IN_LROUND))
			  return true;
		      }
		    }
		  if (gimple_float_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_650 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LROUNDL, CFN_BUILT_IN_LROUNDF))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_652 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LROUNDL))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_LLFLOOR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (gimple_float_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_650 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LLFLOOR, CFN_BUILT_IN_LLFLOORF))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (tree_expr_nonnegative_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_651 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LLFLOOR))
        return true;
    }
  }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_652 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LLFLOOR))
        return true;
    }
  }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_654 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IFLOOR, CFN_BUILT_IN_LFLOOR, CFN_BUILT_IN_LLFLOOR))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_IFLOORF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (tree_expr_nonnegative_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_651 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IFLOORF))
	  return true;
      }
    }
  if (integer_valued_real_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_652 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IFLOORF))
	  return true;
      }
    }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_653 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IFLOORF, CFN_BUILT_IN_LFLOORF, CFN_BUILT_IN_LLFLOORF))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_LLFLOORF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (tree_expr_nonnegative_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_651 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LLFLOORF))
	  return true;
      }
    }
  if (integer_valued_real_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_652 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LLFLOORF))
	  return true;
      }
    }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_654 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IFLOORF, CFN_BUILT_IN_LFLOORF, CFN_BUILT_IN_LLFLOORF))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_LLROUND (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (integer_valued_real_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_652 (res_op, seq, valueize, type, captures, CFN_LLROUND))
	  return true;
      }
    }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_654 (res_op, seq, valueize, type, captures, CFN_IROUND, CFN_LROUND, CFN_LLROUND))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_CPROJF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (!HONOR_INFINITIES (type)
)
      {
	gimple_seq *lseq = seq;
	if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1901;
	{
	  tree tem;
	  tem = captures[0];
	  res_op->set_value (tem);
	  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1007, __FILE__, __LINE__, true);
	  return true;
	}
next_after_fail1901:;
      }
  }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case COMPLEX_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case REAL_CST:
		      {
			if (tree_expr_nonnegative_p (_q21))
			  {
			    {
			      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			      if (real_isinf (TREE_REAL_CST_PTR (captures[0]))
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1902;
				  {
				    tree tem;
				    tem =  build_complex_inf (type, false);
				    res_op->set_value (tem);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1008, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail1902:;
				}
			    }
			  }
		        break;
		      }
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case REAL_CST:
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			  if (real_isinf (TREE_REAL_CST_PTR (captures[1]))
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1903;
			      {
				tree tem;
				tem =  build_complex_inf (type, TREE_REAL_CST_PTR (captures[1])->sign);
				res_op->set_value (tem);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1009, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail1903:;
			    }
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_POPCOUNT (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LROTATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31 };
				    if (gimple_simplify_673 (res_op, seq, valueize, type, captures, LROTATE_EXPR, CFN_BUILT_IN_POPCOUNT))
				      return true;
				  }
			          break;
			        }
			      case RROTATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31 };
				    if (gimple_simplify_673 (res_op, seq, valueize, type, captures, RROTATE_EXPR, CFN_BUILT_IN_POPCOUNT))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  else if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			    switch (gimple_call_combined_fn (_c2))
			      {
			      case CFN_BUILT_IN_BSWAP128:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_672 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128, CFN_BUILT_IN_POPCOUNT))
				        return true;
				    }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP16:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_672 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16, CFN_BUILT_IN_POPCOUNT))
				        return true;
				    }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP32:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_672 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32, CFN_BUILT_IN_POPCOUNT))
				        return true;
				    }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP64:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_672 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64, CFN_BUILT_IN_POPCOUNT))
				        return true;
				    }
			          }
			        break;
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		    if (gimple_simplify_674 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNT))
		      return true;
		  }
	          break;
	        }
	      case LROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
		    if (gimple_simplify_676 (res_op, seq, valueize, type, captures, LROTATE_EXPR, CFN_BUILT_IN_POPCOUNT))
		      return true;
		  }
	          break;
	        }
	      case RROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
		    if (gimple_simplify_676 (res_op, seq, valueize, type, captures, RROTATE_EXPR, CFN_BUILT_IN_POPCOUNT))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_BSWAP128:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_675 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128, CFN_BUILT_IN_POPCOUNT))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP16:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_675 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16, CFN_BUILT_IN_POPCOUNT))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP32:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_675 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32, CFN_BUILT_IN_POPCOUNT))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP64:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_675 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64, CFN_BUILT_IN_POPCOUNT))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_677 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNT))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_PARITYIMAX (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_NOT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    if (gimple_simplify_678 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYIMAX))
		      return true;
		  }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LROTATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31 };
				    if (gimple_simplify_680 (res_op, seq, valueize, type, captures, LROTATE_EXPR, CFN_BUILT_IN_PARITYIMAX))
				      return true;
				  }
			          break;
			        }
			      case RROTATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31 };
				    if (gimple_simplify_680 (res_op, seq, valueize, type, captures, RROTATE_EXPR, CFN_BUILT_IN_PARITYIMAX))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  else if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			    switch (gimple_call_combined_fn (_c2))
			      {
			      case CFN_BUILT_IN_BSWAP128:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_679 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128, CFN_BUILT_IN_PARITYIMAX))
				        return true;
				    }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP16:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_679 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16, CFN_BUILT_IN_PARITYIMAX))
				        return true;
				    }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP32:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_679 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32, CFN_BUILT_IN_PARITYIMAX))
				        return true;
				    }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP64:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_679 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64, CFN_BUILT_IN_PARITYIMAX))
				        return true;
				    }
			          }
			        break;
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		    if (gimple_simplify_681 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYIMAX))
		      return true;
		  }
	          break;
	        }
	      case LROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
		    if (gimple_simplify_683 (res_op, seq, valueize, type, captures, LROTATE_EXPR, CFN_BUILT_IN_PARITYIMAX))
		      return true;
		  }
	          break;
	        }
	      case RROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
		    if (gimple_simplify_683 (res_op, seq, valueize, type, captures, RROTATE_EXPR, CFN_BUILT_IN_PARITYIMAX))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_BSWAP128:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_682 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128, CFN_BUILT_IN_PARITYIMAX))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP16:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_682 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16, CFN_BUILT_IN_PARITYIMAX))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP32:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_682 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32, CFN_BUILT_IN_PARITYIMAX))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP64:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_682 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64, CFN_BUILT_IN_PARITYIMAX))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_677 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYIMAX))
      return true;
  }
  return false;
}

bool
gimple_simplify_EQ_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
			if (gimple_simplify_219 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_219 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case CEIL_MOD_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_pow2p (_q21))
		    {
		      if (integer_zerop (_p1))
			{
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_220 (res_op, seq, valueize, type, captures, EQ_EXPR, CEIL_MOD_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case FLOOR_MOD_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_pow2p (_q21))
		    {
		      if (integer_zerop (_p1))
			{
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_220 (res_op, seq, valueize, type, captures, EQ_EXPR, FLOOR_MOD_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case ROUND_MOD_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_pow2p (_q21))
		    {
		      if (integer_zerop (_p1))
			{
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_220 (res_op, seq, valueize, type, captures, EQ_EXPR, ROUND_MOD_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case TRUNC_MOD_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_pow2p (_q21))
		    {
		      if (integer_zerop (_p1))
			{
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_220 (res_op, seq, valueize, type, captures, EQ_EXPR, TRUNC_MOD_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case LSHIFT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (gimple_zero_one_valued_p (_q20, valueize))
		    {
		      switch (TREE_CODE (_q21))
		        {
			case INTEGER_CST:
			  {
			    if (integer_zerop (_p1))
			      {
				{
				  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				  if (tree_fits_shwi_p (captures[1])
 && tree_to_shwi (captures[1]) > 0
 && tree_to_shwi (captures[1]) < TYPE_PRECISION (TREE_TYPE (captures[0]))
)
				    {
				      gimple_seq *lseq = seq;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2175;
				      {
					res_op->set_op (EQ_EXPR, type, 2);
					res_op->ops[0] = captures[0];
					res_op->ops[1] = captures[2];
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1101, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail2175:;
				    }
				}
			      }
			    break;
			  }
		        default:;
		        }
		    }
	          break;
	        }
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (gimple_truth_valued_p (_q20, valueize))
		    {
		      if (gimple_truth_valued_p (_q21, valueize))
			{
			  switch (TREE_CODE (_p1))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p1))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case BIT_XOR_EXPR:
				        {
					  tree _q50 = gimple_assign_rhs1 (_a2);
					  _q50 = do_valueize (valueize, _q50);
					  tree _q51 = gimple_assign_rhs2 (_a2);
					  _q51 = do_valueize (valueize, _q51);
					  if (tree_swap_operands_p (_q50, _q51))
					    std::swap (_q50, _q51);
					  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					    {
					      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
						{
						  {
						    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
						    gimple_seq *lseq = seq;
						    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2176;
						    {
						      res_op->set_op (BIT_NOT_EXPR, type, 1);
						      {
							tree _o1[2], _r1;
							_o1[0] = captures[0];
							_o1[1] = captures[1];
							gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
							tem_op.resimplify (lseq, valueize);
							_r1 = maybe_push_res_to_seq (&tem_op, lseq);
							if (!_r1) goto next_after_fail2176;
							res_op->ops[0] = _r1;
						      }
						      res_op->resimplify (lseq, valueize);
						      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1015, __FILE__, __LINE__, true);
						      return true;
						    }
next_after_fail2176:;
						  }
					        }
					    }
					  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
					    {
					      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
						{
						  {
						    tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
						    gimple_seq *lseq = seq;
						    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2177;
						    {
						      res_op->set_op (BIT_NOT_EXPR, type, 1);
						      {
							tree _o1[2], _r1;
							_o1[0] = captures[0];
							_o1[1] = captures[1];
							gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
							tem_op.resimplify (lseq, valueize);
							_r1 = maybe_push_res_to_seq (&tem_op, lseq);
							if (!_r1) goto next_after_fail2177;
							res_op->ops[0] = _r1;
						      }
						      res_op->resimplify (lseq, valueize);
						      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1015, __FILE__, __LINE__, true);
						      return true;
						    }
next_after_fail2177:;
						  }
					        }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
	          break;
	        }
	      case BIT_XOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if (gimple_truth_valued_p (_q50, valueize))
					{
					  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					    {
					      if (gimple_truth_valued_p (_q51, valueize))
						{
						  {
						    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
						    gimple_seq *lseq = seq;
						    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2178;
						    {
						      res_op->set_op (BIT_NOT_EXPR, type, 1);
						      {
							tree _o1[2], _r1;
							_o1[0] = captures[0];
							_o1[1] = captures[1];
							gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
							tem_op.resimplify (lseq, valueize);
							_r1 = maybe_push_res_to_seq (&tem_op, lseq);
							if (!_r1) goto next_after_fail2178;
							res_op->ops[0] = _r1;
						      }
						      res_op->resimplify (lseq, valueize);
						      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1015, __FILE__, __LINE__, true);
						      return true;
						    }
next_after_fail2178:;
						  }
					        }
					    }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if (gimple_truth_valued_p (_q50, valueize))
					{
					  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					    {
					      if (gimple_truth_valued_p (_q51, valueize))
						{
						  {
						    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
						    gimple_seq *lseq = seq;
						    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2179;
						    {
						      res_op->set_op (BIT_NOT_EXPR, type, 1);
						      {
							tree _o1[2], _r1;
							_o1[0] = captures[0];
							_o1[1] = captures[1];
							gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
							tem_op.resimplify (lseq, valueize);
							_r1 = maybe_push_res_to_seq (&tem_op, lseq);
							if (!_r1) goto next_after_fail2179;
							res_op->ops[0] = _r1;
						      }
						      res_op->resimplify (lseq, valueize);
						      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1015, __FILE__, __LINE__, true);
						      return true;
						    }
next_after_fail2179:;
						  }
					        }
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_NOT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (gimple_truth_valued_p (_q20, valueize))
		    {
		      if (gimple_truth_valued_p (_p1, valueize))
			{
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_222 (res_op, seq, valueize, type, captures))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case MULT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MULT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
					if (gimple_simplify_223 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q51 };
					if (gimple_simplify_223 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _q50 };
					if (gimple_simplify_223 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _q51 };
					if (gimple_simplify_223 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case MULT_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
					      if (gimple_simplify_224 (res_op, seq, valueize, type, captures, EQ_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case EXACT_DIV_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_q31))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							switch (TREE_CODE (_q60))
							  {
							  case SSA_NAME:
							    if (gimple *_d4 = get_def (valueize, _q60))
							      {
								if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								  switch (gimple_assign_rhs_code (_a4))
								    {
								    case EXACT_DIV_EXPR:
								      {
									tree _q70 = gimple_assign_rhs1 (_a4);
									_q70 = do_valueize (valueize, _q70);
									tree _q71 = gimple_assign_rhs2 (_a4);
									_q71 = do_valueize (valueize, _q71);
									if ((_q71 == _q31 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q31, 0) && types_match (_q71, _q31)))
									  {
									    {
									      tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q30, _q31, _q70 };
									      if (gimple_simplify_225 (res_op, seq, valueize, type, captures, EQ_EXPR))
									        return true;
									    }
									  }
								        break;
								      }
								    default:;
								    }
							      }
							    break;
						          default:;
						          }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case PLUS_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_q41))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q41))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p1, _q40, _q20 };
							if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p1, _q41, _q20 };
							if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_q41 == _q20 && ! TREE_SIDE_EFFECTS (_q41)) || (operand_equal_p (_q41, _q20, 0) && types_match (_q41, _q20)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p1, _q40, _q20 };
					if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q40 == _q20 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _q20, 0) && types_match (_q40, _q20)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p1, _q41, _q20 };
					if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		{
		  tree _p1_pops[1];
		  if (gimple_nop_convert (_p1, _p1_pops, valueize))
		    {
		      tree _q40 = _p1_pops[0];
		      switch (TREE_CODE (_q40))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q40))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case PLUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      switch (TREE_CODE (_q51))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _q51))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q40, _q50, _q20 };
							    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _q50))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a3);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q40, _q51, _q20 };
							    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q40, _q50, _q20 };
					    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q40, _q51, _q20 };
					    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		}
	          break;
	        }
	      case EXACT_DIV_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case EXACT_DIV_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					  {
					    {
					      tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q50 };
					      if (gimple_simplify_225 (res_op, seq, valueize, type, captures, EQ_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case TRUNC_DIV_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
				if (gimple_simplify_228 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case PLUS_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
					if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
 || TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[0])))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2180;
					    {
					      res_op->set_op (EQ_EXPR, type, 2);
					      res_op->ops[0] = captures[0];
					      res_op->ops[1] = captures[2];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1047, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2180:;
					  }
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q51 };
					if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
 || TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[0])))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2181;
					    {
					      res_op->set_op (EQ_EXPR, type, 2);
					      res_op->ops[0] = captures[0];
					      res_op->ops[1] = captures[2];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1047, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2181:;
					  }
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _q50 };
					if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
 || TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[0])))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2182;
					    {
					      res_op->set_op (EQ_EXPR, type, 2);
					      res_op->ops[0] = captures[0];
					      res_op->ops[1] = captures[2];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1047, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2182:;
					  }
				      }
				    }
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _q51 };
					if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
 || TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[0])))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2183;
					    {
					      res_op->set_op (EQ_EXPR, type, 2);
					      res_op->ops[0] = captures[0];
					      res_op->ops[1] = captures[2];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1047, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2183:;
					  }
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q40 };
							if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q30 };
							if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q30 };
					if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q40 };
					if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
					if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q20 };
					if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
			if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q20 };
			if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case POINTER_PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case POINTER_PLUS_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q51 };
					if (gimple_simplify_229 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q30, _q21 };
							if (gimple_simplify_230 (res_op, seq, valueize, type, captures, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q30, _q21 };
					if (gimple_simplify_230 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
					if (gimple_simplify_230 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
			if (gimple_simplify_230 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
					if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
 || TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[0])))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2184;
					    {
					      res_op->set_op (EQ_EXPR, type, 2);
					      res_op->ops[0] = captures[0];
					      res_op->ops[1] = captures[2];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1048, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2184:;
					  }
				      }
				    }
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q51 };
					if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[1]))
 || TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[1])))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2185;
					    {
					      res_op->set_op (EQ_EXPR, type, 2);
					      res_op->ops[0] = captures[2];
					      res_op->ops[1] = captures[1];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1049, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2185:;
					  }
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p0, _q21 };
			if (gimple_simplify_231 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case POINTER_DIFF_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case POINTER_DIFF_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q50 };
					if (gimple_simplify_232 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q51 };
					if (gimple_simplify_233 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p0_pops[1];
  if (gimple_logical_inverted_value (_p0, _p0_pops, valueize))
    {
      tree _q20 = _p0_pops[0];
      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
	{
	  if (gimple_truth_valued_p (_p1, valueize))
	    {
	      {
		tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		if (gimple_simplify_221 (res_op, seq, valueize, type, captures, EQ_EXPR))
		  return true;
	      }
	    }
        }
    }
}
{
  tree _p0_pops[1];
  if (gimple_nop_convert (_p0, _p0_pops, valueize))
    {
      tree _q20 = _p0_pops[0];
      switch (TREE_CODE (_q20))
        {
	case SSA_NAME:
	  if (gimple *_d1 = get_def (valueize, _q20))
	    {
	      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	        switch (gimple_assign_rhs_code (_a1))
		  {
		  case PLUS_EXPR:
		    {
		      tree _q30 = gimple_assign_rhs1 (_a1);
		      _q30 = do_valueize (valueize, _q30);
		      tree _q31 = gimple_assign_rhs2 (_a1);
		      _q31 = do_valueize (valueize, _q31);
		      if (tree_swap_operands_p (_q30, _q31))
		        std::swap (_q30, _q31);
		      switch (TREE_CODE (_q31))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q31))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q50 };
							    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      switch (TREE_CODE (_q30))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q30))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q40 = gimple_assign_rhs1 (_a2);
				      _q40 = do_valueize (valueize, _q40);
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q40 };
							    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q40 };
					    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      switch (TREE_CODE (_q31))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q31))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q50 };
					    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q31 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q31, 0) && types_match (_q60, _q31)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31 };
					    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q30 };
					    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q31 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q31, 0) && types_match (_p1, _q31)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31 };
			    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
			      return true;
			  }
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q30 };
			    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
			      return true;
			  }
		        }
		      break;
		    }
		  case POINTER_PLUS_EXPR:
		    {
		      tree _q30 = gimple_assign_rhs1 (_a1);
		      _q30 = do_valueize (valueize, _q30);
		      tree _q31 = gimple_assign_rhs2 (_a1);
		      _q31 = do_valueize (valueize, _q31);
		      switch (TREE_CODE (_q30))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q30))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q40 = gimple_assign_rhs1 (_a2);
				      _q40 = do_valueize (valueize, _q40);
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q40, _q31 };
							    if (gimple_simplify_234 (res_op, seq, valueize, type, captures, EQ_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q40, _q31 };
					    if (gimple_simplify_234 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31 };
					    if (gimple_simplify_234 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31 };
			    if (gimple_simplify_234 (res_op, seq, valueize, type, captures, EQ_EXPR))
			      return true;
			  }
		        }
		      break;
		    }
		  default:;
		  }
	    }
	  break;
        default:;
        }
    }
}
if (gimple_truth_valued_p (_p0, valueize))
  {
    switch (TREE_CODE (_p1))
      {
      case SSA_NAME:
        if (gimple *_d1 = get_def (valueize, _p1))
          {
	    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	      switch (gimple_assign_rhs_code (_a1))
		{
		case BIT_NOT_EXPR:
		  {
		    tree _q30 = gimple_assign_rhs1 (_a1);
		    _q30 = do_valueize (valueize, _q30);
		    if (gimple_truth_valued_p (_q30, valueize))
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _p1, _q30, _p0 };
			  if (gimple_simplify_222 (res_op, seq, valueize, type, captures))
			    return true;
			}
		      }
		    break;
		  }
		default:;
		}
          }
        break;
      default:;
      }
  {
    tree _p1_pops[1];
    if (gimple_logical_inverted_value (_p1, _p1_pops, valueize))
      {
	tree _q30 = _p1_pops[0];
	if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
	  {
	    {
	      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	      if (gimple_simplify_221 (res_op, seq, valueize, type, captures, EQ_EXPR))
	        return true;
	    }
	  }
      }
  }
  }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case PLUS_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  switch (TREE_CODE (_q31))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q31))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _p0 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _p0, 0) && types_match (_q50, _p0)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p1, _q30, _p0 };
					if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p1, _q31, _p0 };
					if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _p0, 0) && types_match (_q31, _p0)))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p1, _q30, _p0 };
			if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p1, _q31, _p0 };
			if (gimple_simplify_227 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p1_pops[1];
  if (gimple_nop_convert (_p1, _p1_pops, valueize))
    {
      tree _q30 = _p1_pops[0];
      switch (TREE_CODE (_q30))
        {
	case SSA_NAME:
	  if (gimple *_d1 = get_def (valueize, _q30))
	    {
	      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	        switch (gimple_assign_rhs_code (_a1))
		  {
		  case PLUS_EXPR:
		    {
		      tree _q40 = gimple_assign_rhs1 (_a1);
		      _q40 = do_valueize (valueize, _q40);
		      tree _q41 = gimple_assign_rhs2 (_a1);
		      _q41 = do_valueize (valueize, _q41);
		      if (tree_swap_operands_p (_q40, _q41))
		        std::swap (_q40, _q41);
		      switch (TREE_CODE (_q41))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q41))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p0 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p0, 0) && types_match (_q60, _p0)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q30, _q40, _p0 };
					    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      switch (TREE_CODE (_q40))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q40))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _p0 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _p0, 0) && types_match (_q50, _p0)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q30, _q41, _p0 };
					    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_q41 == _p0 && ! TREE_SIDE_EFFECTS (_q41)) || (operand_equal_p (_q41, _p0, 0) && types_match (_q41, _p0)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q30, _q40, _p0 };
			    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
			      return true;
			  }
		        }
		      if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q30, _q41, _p0 };
			    if (gimple_simplify_226 (res_op, seq, valueize, type, captures, EQ_EXPR))
			      return true;
			  }
		        }
		      break;
		    }
		  default:;
		  }
	    }
	  break;
        default:;
        }
    }
}
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case POINTER_PLUS_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p1, _q20, _q41 };
							if (gimple_simplify_230 (res_op, seq, valueize, type, captures, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_q40 == _q20 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _q20, 0) && types_match (_q40, _q20)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p1, _q20, _q41 };
					if (gimple_simplify_230 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		{
		  tree _p1_pops[1];
		  if (gimple_nop_convert (_p1, _p1_pops, valueize))
		    {
		      tree _q40 = _p1_pops[0];
		      switch (TREE_CODE (_q40))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q40))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case POINTER_PLUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _q50))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a3);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q40, _q20, _q51 };
							    if (gimple_simplify_234 (res_op, seq, valueize, type, captures, EQ_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q40, _q20, _q51 };
					    if (gimple_simplify_234 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		}
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case POINTER_PLUS_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p1, _p0, _q31 };
					if (gimple_simplify_230 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p1, _p0, _q31 };
			if (gimple_simplify_230 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p1_pops[1];
  if (gimple_nop_convert (_p1, _p1_pops, valueize))
    {
      tree _q30 = _p1_pops[0];
      switch (TREE_CODE (_q30))
        {
	case SSA_NAME:
	  if (gimple *_d1 = get_def (valueize, _q30))
	    {
	      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	        switch (gimple_assign_rhs_code (_a1))
		  {
		  case POINTER_PLUS_EXPR:
		    {
		      tree _q40 = gimple_assign_rhs1 (_a1);
		      _q40 = do_valueize (valueize, _q40);
		      tree _q41 = gimple_assign_rhs2 (_a1);
		      _q41 = do_valueize (valueize, _q41);
		      switch (TREE_CODE (_q40))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q40))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _p0 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _p0, 0) && types_match (_q50, _p0)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q30, _p0, _q41 };
					    if (gimple_simplify_234 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q30, _p0, _q41 };
			    if (gimple_simplify_234 (res_op, seq, valueize, type, captures, EQ_EXPR))
			      return true;
			  }
		        }
		      break;
		    }
		  default:;
		  }
	    }
	  break;
        default:;
        }
    }
}
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case ADDR_EXPR:
	        {
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case POINTER_PLUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q31 };
				    if (gimple_simplify_235 (res_op, seq, valueize, type, captures, EQ_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case POINTER_PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case ADDR_EXPR:
			        {
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p1, _q20, _q21 };
				    if (gimple_simplify_235 (res_op, seq, valueize, type, captures, EQ_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case ADDR_EXPR:
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _p1, _q20, _q21 };
			  if (gimple_simplify_235 (res_op, seq, valueize, type, captures, EQ_EXPR))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case ADDR_EXPR:
			        {
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case POINTER_PLUS_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_q50))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q50))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case ADDR_EXPR:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
								    if (gimple_simplify_236 (res_op, seq, valueize, type, captures, EQ_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    case ADDR_EXPR:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
							  if (gimple_simplify_236 (res_op, seq, valueize, type, captures, EQ_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case ADDR_EXPR:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case POINTER_PLUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case ADDR_EXPR:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
							  if (gimple_simplify_236 (res_op, seq, valueize, type, captures, EQ_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					      }
					    break;
					  case ADDR_EXPR:
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
						if (gimple_simplify_236 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					      break;
					    }
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case ADDR_EXPR:
      {
	switch (TREE_CODE (_p1))
	  {
	  case SSA_NAME:
	    if (gimple *_d1 = get_def (valueize, _p1))
	      {
		if (gassign *_a1 = dyn_cast <gassign *> (_d1))
		  switch (gimple_assign_rhs_code (_a1))
		    {
		    case POINTER_PLUS_EXPR:
		      {
			tree _q30 = gimple_assign_rhs1 (_a1);
			_q30 = do_valueize (valueize, _q30);
			tree _q31 = gimple_assign_rhs2 (_a1);
			_q31 = do_valueize (valueize, _q31);
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q31 };
			  if (gimple_simplify_235 (res_op, seq, valueize, type, captures, EQ_EXPR))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
	      }
	    break;
          default:;
          }
        break;
      }
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MINUS_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _q31 };
			if (gimple_simplify_231 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case TRUNC_DIV_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			if (gimple_simplify_237 (res_op, seq, valueize, type, captures, EQ_EXPR, LT_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case MINUS_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_q50))
						    {
						    case INTEGER_CST:
						      {
							switch (TREE_CODE (_q51))
							  {
							  case SSA_NAME:
							    if (gimple *_d4 = get_def (valueize, _q51))
							      {
								if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								  switch (gimple_assign_rhs_code (_a4))
								    {
								    CASE_CONVERT:
								      {
									tree _q70 = gimple_assign_rhs1 (_a4);
									_q70 = do_valueize (valueize, _q70);
									if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
									  {
									    {
									      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
									      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
									        return true;
									    }
									  }
								        break;
								      }
								    default:;
								    }
							      }
							    break;
						          default:;
						          }
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_q31))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q31))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q50 = gimple_assign_rhs1 (_a3);
							_q50 = do_valueize (valueize, _q50);
							switch (TREE_CODE (_p1))
							  {
							  case SSA_NAME:
							    if (gimple *_d4 = get_def (valueize, _p1))
							      {
								if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								  switch (gimple_assign_rhs_code (_a4))
								    {
								    CASE_CONVERT:
								      {
									tree _q70 = gimple_assign_rhs1 (_a4);
									_q70 = do_valueize (valueize, _q70);
									if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
									  {
									    {
									      tree captures[2] ATTRIBUTE_UNUSED = { _q50, _q30 };
									      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
									        return true;
									    }
									  }
								        break;
								      }
								    default:;
								    }
							      }
							    break;
						          default:;
						          }
							if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
							  {
							    {
							      tree captures[2] ATTRIBUTE_UNUSED = { _q50, _q30 };
							      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
							        return true;
							    }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q31 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q31, 0) && types_match (_q60, _q31)))
							  {
							    {
							      tree captures[2] ATTRIBUTE_UNUSED = { _q31, _q30 };
							      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
							        return true;
							    }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_p1 == _q31 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q31, 0) && types_match (_p1, _q31)))
					  {
					    {
					      tree captures[2] ATTRIBUTE_UNUSED = { _q31, _q30 };
					      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case MINUS_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_q50))
						    {
						    case INTEGER_CST:
						      {
							if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
							  {
							    {
							      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
							      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
							        return true;
							    }
							  }
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case MINUS_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  switch (TREE_CODE (_q40))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_q41))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q41))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    {
							      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
							      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
							        return true;
							    }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q41 == _q20 && ! TREE_SIDE_EFFECTS (_q41)) || (operand_equal_p (_q41, _q20, 0) && types_match (_q41, _q20)))
					  {
					    {
					      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
					      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_q21))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _q21))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q40 = gimple_assign_rhs1 (_a2);
					_q40 = do_valueize (valueize, _q40);
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
							  {
							    {
							      tree captures[2] ATTRIBUTE_UNUSED = { _q40, _q20 };
							      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
							        return true;
							    }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
					  {
					    {
					      tree captures[2] ATTRIBUTE_UNUSED = { _q40, _q20 };
					      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
					  {
					    {
					      tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
					      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    {
			      tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
			      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
			        return true;
			    }
			  }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  switch (TREE_CODE (_q40))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_q41))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q41))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _p0 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p0, 0) && types_match (_q60, _p0)))
							  {
							    {
							      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q40 };
							      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
							        return true;
							    }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q41 == _p0 && ! TREE_SIDE_EFFECTS (_q41)) || (operand_equal_p (_q41, _p0, 0) && types_match (_q41, _p0)))
					  {
					    {
					      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q40 };
					      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  switch (TREE_CODE (_q30))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_q31))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _q31))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _p0 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _p0, 0) && types_match (_q50, _p0)))
					  {
					    {
					      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
					      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _p0, 0) && types_match (_q31, _p0)))
			  {
			    {
			      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
			      if (gimple_simplify_238 (res_op, seq, valueize, type, captures, EQ_EXPR))
			        return true;
			    }
			  }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case LT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case GT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LT_EXPR, GT_EXPR, EQ_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR, GT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR, LE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case GE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LE_EXPR, GE_EXPR, EQ_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR, GE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR, LT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case GT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case GT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LT_EXPR, GT_EXPR, EQ_EXPR))
					      return true;
					  }
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LT_EXPR, GT_EXPR, EQ_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR, GT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR, LE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case LT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LT_EXPR, GT_EXPR, EQ_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case GE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case GE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LE_EXPR, GE_EXPR, EQ_EXPR))
					      return true;
					  }
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LE_EXPR, GE_EXPR, EQ_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR, GE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR, LT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LE_EXPR, GE_EXPR, EQ_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR, GT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR, GE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR, GT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR, GE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR, LE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR, LT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR, LE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_240 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR, LT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case MIN_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MAX_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (!HONOR_NANS (captures[0])
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2186;
						{
						  res_op->set_op (EQ_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1017, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2186:;
					      }
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
					    if (!HONOR_NANS (captures[0])
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2187;
						{
						  res_op->set_op (EQ_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1017, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2187:;
					      }
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			if (gimple_simplify_241 (res_op, seq, valueize, type, captures, MIN_EXPR, EQ_EXPR, LE_EXPR))
			  return true;
		      }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
			if (gimple_simplify_241 (res_op, seq, valueize, type, captures, MIN_EXPR, EQ_EXPR, LE_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case MAX_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MIN_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (!HONOR_NANS (captures[0])
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2188;
						{
						  res_op->set_op (EQ_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1017, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2188:;
					      }
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (!HONOR_NANS (captures[0])
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2189;
						{
						  res_op->set_op (EQ_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1017, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2189:;
					      }
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			if (gimple_simplify_241 (res_op, seq, valueize, type, captures, MAX_EXPR, EQ_EXPR, GE_EXPR))
			  return true;
		      }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
			if (gimple_simplify_241 (res_op, seq, valueize, type, captures, MAX_EXPR, EQ_EXPR, GE_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (gimple_with_possible_nonzero_bits (_p0, valueize))
  {
    if (gimple_with_known_nonzero_bits (_p1, valueize))
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  if (gimple_simplify_239 (res_op, seq, valueize, type, captures, EQ_EXPR))
	    return true;
	}
      }
  }
if (gimple_with_known_nonzero_bits (_p0, valueize))
  {
    if (gimple_with_possible_nonzero_bits (_p1, valueize))
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p1, _p0 };
	  if (gimple_simplify_239 (res_op, seq, valueize, type, captures, EQ_EXPR))
	    return true;
	}
      }
  }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MIN_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q31 };
			if (gimple_simplify_241 (res_op, seq, valueize, type, captures, MIN_EXPR, EQ_EXPR, LE_EXPR))
			  return true;
		      }
		    }
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _p0, 0) && types_match (_q31, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
			if (gimple_simplify_241 (res_op, seq, valueize, type, captures, MIN_EXPR, EQ_EXPR, LE_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case MAX_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q31 };
			if (gimple_simplify_241 (res_op, seq, valueize, type, captures, MAX_EXPR, EQ_EXPR, GE_EXPR))
			  return true;
		      }
		    }
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _p0, 0) && types_match (_q31, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
			if (gimple_simplify_241 (res_op, seq, valueize, type, captures, MAX_EXPR, EQ_EXPR, GE_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MIN_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				if (gimple_simplify_242 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case MAX_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				if (gimple_simplify_243 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			if (gimple_simplify_244 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LSHIFT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (integer_pow2p (_q30))
				    {
				      if (integer_pow2p (_q21))
					{
					  if (integer_zerop (_p1))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _q21 };
						if (gimple_simplify_245 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
						  return true;
					      }
					    }
				        }
				    }
				  switch (TREE_CODE (_q31))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_q21))
					  {
					  case INTEGER_CST:
					    {
					      switch (TREE_CODE (_p1))
					        {
						case INTEGER_CST:
						  {
						    {
						      tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1 };
						      if (gimple_simplify_246 (res_op, seq, valueize, type, captures, EQ_EXPR))
						        return true;
						    }
						    break;
						  }
					        default:;
					        }
					      break;
					    }
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
				  if (integer_onep (_q30))
				    {
				      if (integer_pow2p (_q21))
					{
					  if (integer_zerop (_p1))
					    {
					      {
						tree captures[2] ATTRIBUTE_UNUSED = { _q31, _q21 };
						if (gimple_simplify_247 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
						  return true;
					      }
					    }
				        }
				    }
			          break;
			        }
			      case RSHIFT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (integer_pow2p (_q30))
				    {
				      if (integer_pow2p (_q21))
					{
					  if (integer_zerop (_p1))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _q21 };
						if (gimple_simplify_248 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
						  return true;
					      }
					    }
				        }
				    }
				  switch (TREE_CODE (_q31))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_q21))
					  {
					  case INTEGER_CST:
					    {
					      switch (TREE_CODE (_p1))
					        {
						case INTEGER_CST:
						  {
						    {
						      tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1 };
						      if (gimple_simplify_249 (res_op, seq, valueize, type, captures, EQ_EXPR))
						        return true;
						    }
						    break;
						  }
					        default:;
					        }
					      break;
					    }
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      switch (TREE_CODE (_q30))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q30))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case LSHIFT_EXPR:
				    {
				      tree _q40 = gimple_assign_rhs1 (_a2);
				      _q40 = do_valueize (valueize, _q40);
				      tree _q41 = gimple_assign_rhs2 (_a2);
				      _q41 = do_valueize (valueize, _q41);
				      if (integer_onep (_q40))
					{
					  if (integer_pow2p (_q21))
					    {
					      if (integer_zerop (_p1))
						{
						  {
						    tree captures[2] ATTRIBUTE_UNUSED = { _q41, _q21 };
						    if (gimple_simplify_247 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
						      return true;
						  }
					        }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		}
	          break;
	        }
	      case LSHIFT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				if (gimple_simplify_250 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case LROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LROTATE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
					if (gimple_simplify_251 (res_op, seq, valueize, type, captures, LROTATE_EXPR, RROTATE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				if (gimple_simplify_252 (res_op, seq, valueize, type, captures, LROTATE_EXPR, RROTATE_EXPR, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case INTEGER_CST:
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			  if (gimple_simplify_253 (res_op, seq, valueize, type, captures, LROTATE_EXPR, RROTATE_EXPR, EQ_EXPR))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case RROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case RROTATE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
					if (gimple_simplify_251 (res_op, seq, valueize, type, captures, RROTATE_EXPR, LROTATE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				if (gimple_simplify_252 (res_op, seq, valueize, type, captures, RROTATE_EXPR, LROTATE_EXPR, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case INTEGER_CST:
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			  if (gimple_simplify_253 (res_op, seq, valueize, type, captures, RROTATE_EXPR, LROTATE_EXPR, EQ_EXPR))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case MULT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case TRUNC_DIV_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if ((_q21 == _q31 && ! TREE_SIDE_EFFECTS (_q21)) || (operand_equal_p (_q21, _q31, 0) && types_match (_q21, _q31)))
				    {
				      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
					    if (gimple_simplify_254 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case TRUNC_DIV_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if ((_q41 == _q20 && ! TREE_SIDE_EFFECTS (_q41)) || (operand_equal_p (_q41, _q20, 0) && types_match (_q41, _q20)))
				    {
				      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q40, _q20 };
					    if (gimple_simplify_254 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MULT_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case TRUNC_DIV_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
				    {
				      if ((_q31 == _q41 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _q41, 0) && types_match (_q31, _q41)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _p0, _q41 };
					    if (gimple_simplify_254 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q31))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q31))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case TRUNC_DIV_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _p0 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _p0, 0) && types_match (_q50, _p0)))
				    {
				      if ((_q51 == _q30 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q30, 0) && types_match (_q51, _q30)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q31, _p0, _q30 };
					    if (gimple_simplify_254 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case VEC_COND_EXPR:
			        {
				  tree _q60 = gimple_assign_rhs1 (_a2);
				  _q60 = do_valueize (valueize, _q60);
				  tree _q61 = gimple_assign_rhs2 (_a2);
				  _q61 = do_valueize (valueize, _q61);
				  tree _q62 = gimple_assign_rhs3 (_a2);
				  _q62 = do_valueize (valueize, _q62);
				  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				    {
				      {
					tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1, _q61, _q62 };
					if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (EQ_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]), TREE_TYPE (captures[1]))))
)
					  {
					    gimple_seq *lseq = seq;
					    if (lseq
					        && (!single_use (captures[0])
					            || !single_use (captures[4])))
					      lseq = NULL;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2190;
					    {
					      res_op->set_op (VEC_COND_EXPR, type, 3);
					      res_op->ops[0] = captures[1];
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[2];
						_o1[1] = captures[5];
						gimple_match_op tem_op (res_op->cond.any_else (), EQ_EXPR, type, _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail2190;
						res_op->ops[1] = _r1;
					      }
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[3];
						_o1[1] = captures[6];
						gimple_match_op tem_op (res_op->cond.any_else (), EQ_EXPR, type, _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail2190;
						res_op->ops[2] = _r1;
					      }
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1018, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2190:;
					  }
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1 };
		    if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (EQ_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]), TREE_TYPE (captures[1]))))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[0])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2191;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[1];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[2];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), EQ_EXPR, type, _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2191;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[3];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), EQ_EXPR, type, _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2191;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1019, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2191:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_BSWAP128:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d2 = get_def (valueize, _p1))
		          {
			    if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			      switch (gimple_call_combined_fn (_c2))
				{
				case CFN_BUILT_IN_BSWAP128:
				  if (gimple_call_num_args (_c2) == 1)
				    {
				      tree _q40 = gimple_call_arg (_c2, 0);
				      _q40 = do_valueize (valueize, _q40);
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q40 };
					if (gimple_simplify_255 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_BSWAP128))
					  return true;
				      }
				    }
				  break;
				default:;
				}
		          }
		        break;
		      case INTEGER_CST:
		        {
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			    if (gimple_simplify_256 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_BSWAP128))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP16:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d2 = get_def (valueize, _p1))
		          {
			    if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			      switch (gimple_call_combined_fn (_c2))
				{
				case CFN_BUILT_IN_BSWAP16:
				  if (gimple_call_num_args (_c2) == 1)
				    {
				      tree _q40 = gimple_call_arg (_c2, 0);
				      _q40 = do_valueize (valueize, _q40);
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q40 };
					if (gimple_simplify_255 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_BSWAP16))
					  return true;
				      }
				    }
				  break;
				default:;
				}
		          }
		        break;
		      case INTEGER_CST:
		        {
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			    if (gimple_simplify_256 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_BSWAP16))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP32:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d2 = get_def (valueize, _p1))
		          {
			    if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			      switch (gimple_call_combined_fn (_c2))
				{
				case CFN_BUILT_IN_BSWAP32:
				  if (gimple_call_num_args (_c2) == 1)
				    {
				      tree _q40 = gimple_call_arg (_c2, 0);
				      _q40 = do_valueize (valueize, _q40);
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q40 };
					if (gimple_simplify_255 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_BSWAP32))
					  return true;
				      }
				    }
				  break;
				default:;
				}
		          }
		        break;
		      case INTEGER_CST:
		        {
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			    if (gimple_simplify_256 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_BSWAP32))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP64:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d2 = get_def (valueize, _p1))
		          {
			    if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			      switch (gimple_call_combined_fn (_c2))
				{
				case CFN_BUILT_IN_BSWAP64:
				  if (gimple_call_num_args (_c2) == 1)
				    {
				      tree _q40 = gimple_call_arg (_c2, 0);
				      _q40 = do_valueize (valueize, _q40);
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q40 };
					if (gimple_simplify_255 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_BSWAP64))
					  return true;
				      }
				    }
				  break;
				default:;
				}
		          }
		        break;
		      case INTEGER_CST:
		        {
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			    if (gimple_simplify_256 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_BSWAP64))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_COND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  tree _q32 = gimple_assign_rhs3 (_a1);
		  _q32 = do_valueize (valueize, _q32);
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p1, _q30, _q31, _q32 };
		    if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (EQ_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[3]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[2]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[3]), TREE_TYPE (captures[2]))))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[1])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2192;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[2];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[3];
			    gimple_match_op tem_op (res_op->cond.any_else (), EQ_EXPR, type, _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2192;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), EQ_EXPR, type, _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2192;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1020, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2192:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case COND_EXPR:
			        {
				  tree _q60 = gimple_assign_rhs1 (_a2);
				  _q60 = do_valueize (valueize, _q60);
				  tree _q61 = gimple_assign_rhs2 (_a2);
				  _q61 = do_valueize (valueize, _q61);
				  tree _q62 = gimple_assign_rhs3 (_a2);
				  _q62 = do_valueize (valueize, _q62);
				  if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
				    {
				      if ((_q62 == _q22 && ! TREE_SIDE_EFFECTS (_q62)) || (operand_equal_p (_q62, _q22, 0) && types_match (_q62, _q22)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q22, _q60 };
					    const enum tree_code eqne = EQ_EXPR;
					    if (!HONOR_NANS (captures[1])
 && types_match (TREE_TYPE (captures[0]), TREE_TYPE (captures[3]))
 && types_match (type, TREE_TYPE (captures[0]))
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2193;
						{
						  res_op->set_op (COND_EXPR, type, 3);
						  {
						    tree _o1[2], _r1;
						    {
						      tree _o2[2], _r2;
						      _o2[0] = captures[0];
						      if (COMPARISON_CLASS_P (_o2[0]))
						        {
						          if (!seq) return false;
						          _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
						        }
						      _o2[1] = captures[3];
						      if (COMPARISON_CLASS_P (_o2[1]))
						        {
						          if (!seq) return false;
						          _o2[1] = gimple_build (seq, TREE_CODE (_o2[1]), TREE_TYPE (_o2[1]), TREE_OPERAND (_o2[1], 0), TREE_OPERAND (_o2[1], 1));
						        }
						      gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o2[0]), _o2[0], _o2[1]);
						      tem_op.resimplify (lseq, valueize);
						      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r2) goto next_after_fail2193;
						      _o1[0] = _r2;
						    }
						    {
						      tree _o2[2], _r2;
						      _o2[0] = captures[1];
						      _o2[1] = captures[2];
						      gimple_match_op tem_op (res_op->cond.any_else (), NE_EXPR, type, _o2[0], _o2[1]);
						      tem_op.resimplify (lseq, valueize);
						      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r2) goto next_after_fail2193;
						      _o1[1] = _r2;
						    }
						    gimple_match_op tem_op (res_op->cond.any_else (), BIT_AND_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						    tem_op.resimplify (lseq, valueize);
						    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r1) goto next_after_fail2193;
						    res_op->ops[0] = _r1;
						  }
						  res_op->ops[1] =  constant_boolean_node (eqne == NE_EXPR, type);
						  res_op->ops[2] =  constant_boolean_node (eqne != NE_EXPR, type);
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1102, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2193:;
					      }
					  }
				        }
				    }
				  if ((_q61 == _q22 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q22, 0) && types_match (_q61, _q22)))
				    {
				      if ((_q62 == _q21 && ! TREE_SIDE_EFFECTS (_q62)) || (operand_equal_p (_q62, _q21, 0) && types_match (_q62, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q22, _q60 };
					    const enum tree_code eqne = EQ_EXPR;
					    if (!HONOR_NANS (captures[1])
 && types_match (TREE_TYPE (captures[0]), TREE_TYPE (captures[3]))
 && types_match (type, TREE_TYPE (captures[0]))
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2194;
						{
						  res_op->set_op (COND_EXPR, type, 3);
						  {
						    tree _o1[2], _r1;
						    {
						      tree _o2[2], _r2;
						      _o2[0] = captures[0];
						      if (COMPARISON_CLASS_P (_o2[0]))
						        {
						          if (!seq) return false;
						          _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
						        }
						      _o2[1] = captures[3];
						      if (COMPARISON_CLASS_P (_o2[1]))
						        {
						          if (!seq) return false;
						          _o2[1] = gimple_build (seq, TREE_CODE (_o2[1]), TREE_TYPE (_o2[1]), TREE_OPERAND (_o2[1], 0), TREE_OPERAND (_o2[1], 1));
						        }
						      gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o2[0]), _o2[0], _o2[1]);
						      tem_op.resimplify (lseq, valueize);
						      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r2) goto next_after_fail2194;
						      _o1[0] = _r2;
						    }
						    {
						      tree _o2[2], _r2;
						      _o2[0] = captures[1];
						      _o2[1] = captures[2];
						      gimple_match_op tem_op (res_op->cond.any_else (), EQ_EXPR, type, _o2[0], _o2[1]);
						      tem_op.resimplify (lseq, valueize);
						      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r2) goto next_after_fail2194;
						      _o1[1] = _r2;
						    }
						    gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						    tem_op.resimplify (lseq, valueize);
						    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r1) goto next_after_fail2194;
						    res_op->ops[0] = _r1;
						  }
						  res_op->ops[1] =  constant_boolean_node (eqne != NE_EXPR, type);
						  res_op->ops[2] =  constant_boolean_node (eqne == NE_EXPR, type);
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1103, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2194:;
					      }
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case VEC_COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case VEC_COND_EXPR:
			        {
				  tree _q60 = gimple_assign_rhs1 (_a2);
				  _q60 = do_valueize (valueize, _q60);
				  tree _q61 = gimple_assign_rhs2 (_a2);
				  _q61 = do_valueize (valueize, _q61);
				  tree _q62 = gimple_assign_rhs3 (_a2);
				  _q62 = do_valueize (valueize, _q62);
				  if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
				    {
				      if ((_q62 == _q22 && ! TREE_SIDE_EFFECTS (_q62)) || (operand_equal_p (_q62, _q22, 0) && types_match (_q62, _q22)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q22, _q60 };
					    const enum tree_code eqne = EQ_EXPR;
					    if (!HONOR_NANS (captures[1])
 && types_match (TREE_TYPE (captures[0]), TREE_TYPE (captures[3]))
 && types_match (type, TREE_TYPE (captures[0]))
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2195;
						{
						  res_op->set_op (VEC_COND_EXPR, type, 3);
						  {
						    tree _o1[2], _r1;
						    {
						      tree _o2[2], _r2;
						      _o2[0] = captures[0];
						      _o2[1] = captures[3];
						      gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o2[0]), _o2[0], _o2[1]);
						      tem_op.resimplify (lseq, valueize);
						      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r2) goto next_after_fail2195;
						      _o1[0] = _r2;
						    }
						    {
						      tree _o2[2], _r2;
						      _o2[0] = captures[1];
						      _o2[1] = captures[2];
						      gimple_match_op tem_op (res_op->cond.any_else (), NE_EXPR, type, _o2[0], _o2[1]);
						      tem_op.resimplify (lseq, valueize);
						      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r2) goto next_after_fail2195;
						      _o1[1] = _r2;
						    }
						    gimple_match_op tem_op (res_op->cond.any_else (), BIT_AND_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						    tem_op.resimplify (lseq, valueize);
						    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r1) goto next_after_fail2195;
						    res_op->ops[0] = _r1;
						  }
						  res_op->ops[1] =  constant_boolean_node (eqne == NE_EXPR, type);
						  res_op->ops[2] =  constant_boolean_node (eqne != NE_EXPR, type);
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1102, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2195:;
					      }
					  }
				        }
				    }
				  if ((_q61 == _q22 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q22, 0) && types_match (_q61, _q22)))
				    {
				      if ((_q62 == _q21 && ! TREE_SIDE_EFFECTS (_q62)) || (operand_equal_p (_q62, _q21, 0) && types_match (_q62, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q22, _q60 };
					    const enum tree_code eqne = EQ_EXPR;
					    if (!HONOR_NANS (captures[1])
 && types_match (TREE_TYPE (captures[0]), TREE_TYPE (captures[3]))
 && types_match (type, TREE_TYPE (captures[0]))
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2196;
						{
						  res_op->set_op (VEC_COND_EXPR, type, 3);
						  {
						    tree _o1[2], _r1;
						    {
						      tree _o2[2], _r2;
						      _o2[0] = captures[0];
						      _o2[1] = captures[3];
						      gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o2[0]), _o2[0], _o2[1]);
						      tem_op.resimplify (lseq, valueize);
						      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r2) goto next_after_fail2196;
						      _o1[0] = _r2;
						    }
						    {
						      tree _o2[2], _r2;
						      _o2[0] = captures[1];
						      _o2[1] = captures[2];
						      gimple_match_op tem_op (res_op->cond.any_else (), EQ_EXPR, type, _o2[0], _o2[1]);
						      tem_op.resimplify (lseq, valueize);
						      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r2) goto next_after_fail2196;
						      _o1[1] = _r2;
						    }
						    gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						    tem_op.resimplify (lseq, valueize);
						    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r1) goto next_after_fail2196;
						    res_op->ops[0] = _r1;
						  }
						  res_op->ops[1] =  constant_boolean_node (eqne != NE_EXPR, type);
						  res_op->ops[2] =  constant_boolean_node (eqne == NE_EXPR, type);
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1103, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2196:;
					      }
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_truep (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_257 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR, UNGE_EXPR))
			  return true;
		      }
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_258 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR, UNGE_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case LE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_truep (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_257 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR, UNGT_EXPR))
			  return true;
		      }
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_258 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR, UNGT_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (integer_truep (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_257 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR, NE_EXPR))
			  return true;
		      }
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_258 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR, NE_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (integer_truep (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_257 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR, EQ_EXPR))
			  return true;
		      }
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_258 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case GE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_truep (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_257 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR, UNLT_EXPR))
			  return true;
		      }
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_258 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR, UNLT_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case GT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_truep (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_257 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR, UNLE_EXPR))
			  return true;
		      }
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_258 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR, UNLE_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case UNORDERED_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (integer_truep (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_257 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR, ORDERED_EXPR))
			  return true;
		      }
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_258 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR, ORDERED_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case ORDERED_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (integer_truep (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_257 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR, UNORDERED_EXPR))
			  return true;
		      }
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_258 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR, UNORDERED_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case UNLT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_truep (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_257 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR, GE_EXPR))
			  return true;
		      }
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_258 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR, GE_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case UNLE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_truep (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_257 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR, GT_EXPR))
			  return true;
		      }
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_258 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR, GT_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case UNGT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_truep (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_257 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR, LE_EXPR))
			  return true;
		      }
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_258 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR, LE_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case UNGE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_truep (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_257 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR, LT_EXPR))
			  return true;
		      }
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_258 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR, LT_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case UNEQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (integer_truep (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_257 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR, LTGT_EXPR))
			  return true;
		      }
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_258 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR, LTGT_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case LTGT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (integer_truep (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_257 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR, UNEQ_EXPR))
			  return true;
		      }
		    }
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_258 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR, UNEQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_259 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case POINTER_DIFF_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_260 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case MULT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				if (gimple_simplify_262 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		      if (integer_zerop (_p1))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
			    if (gimple_simplify_261 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
			      return true;
			  }
		        }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  if ((_p1 == _p0 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _p0, 0) && types_match (_p1, _p0)))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_263 (res_op, seq, valueize, type, captures, EQ_EXPR))
	  return true;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree _q40_pops[1];
				    if (gimple_maybe_bit_not (_q40, _q40_pops, valueize))
				      {
					tree _q50 = _q40_pops[0];
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
					  if (gimple_simplify_264 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_maybe_bit_not (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q50, _q30 };
					  if (gimple_simplify_264 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  {
    tree _p1_pops[1];
    if (gimple_maybe_bit_not (_p1, _p1_pops, valueize))
      {
	tree _q30 = _p1_pops[0];
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
	  if (gimple_simplify_264 (res_op, seq, valueize, type, captures, EQ_EXPR))
	    return true;
	}
      }
  }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_NOT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _p1, _q40 };
				    if (gimple_simplify_267 (res_op, seq, valueize, type, captures, EQ_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		{
		  tree _p1_pops[1];
		  if (gimple_nop_convert (_p1, _p1_pops, valueize))
		    {
		      tree _q40 = _p1_pops[0];
		      switch (TREE_CODE (_q40))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q40))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_NOT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q40, _q50 };
					if (gimple_simplify_267 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		}
		if (CONSTANT_CLASS_P (_p1))
		  {
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
		      if (gimple_simplify_266 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
		        return true;
		    }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p0_pops[1];
  if (gimple_maybe_bit_not (_p0, _p0_pops, valueize))
    {
      tree _q20 = _p0_pops[0];
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p1, _q20 };
	if (gimple_simplify_264 (res_op, seq, valueize, type, captures, EQ_EXPR))
	  return true;
      }
    }
}
{
  tree _p0_pops[1];
  if (gimple_nop_convert (_p0, _p0_pops, valueize))
    {
      tree _q20 = _p0_pops[0];
      switch (TREE_CODE (_q20))
        {
	case SSA_NAME:
	  if (gimple *_d1 = get_def (valueize, _q20))
	    {
	      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	        switch (gimple_assign_rhs_code (_a1))
		  {
		  case BIT_NOT_EXPR:
		    {
		      tree _q30 = gimple_assign_rhs1 (_a1);
		      _q30 = do_valueize (valueize, _q30);
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_NOT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _p1, _q50 };
					if (gimple_simplify_265 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    {
		      tree _p1_pops[1];
		      if (gimple_nop_convert (_p1, _p1_pops, valueize))
		        {
			  tree _q50 = _p1_pops[0];
			  switch (TREE_CODE (_q50))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _q50))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case BIT_NOT_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  {
					    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q50, _q60 };
					    if (gimple_simplify_265 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
		    if (CONSTANT_CLASS_P (_p1))
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _p1 };
			  if (gimple_simplify_266 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
			    return true;
			}
		      }
		      break;
		    }
		  default:;
		  }
	    }
	  break;
        default:;
        }
    }
}
  switch (TREE_CODE (_p1))
    {
    case REAL_CST:
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  if (gimple_simplify_268 (res_op, seq, valueize, type, captures, EQ_EXPR))
	    return true;
	}
        break;
      }
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case REAL_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case REAL_CST:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				if (gimple_simplify_269 (res_op, seq, valueize, type, captures, PLUS_EXPR, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case REAL_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case REAL_CST:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				if (gimple_simplify_269 (res_op, seq, valueize, type, captures, MINUS_EXPR, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case REAL_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case REAL_CST:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				if (gimple_simplify_270 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case FLOAT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case FLOAT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q40 };
				    if (gimple_simplify_273 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case REAL_CST:
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			  if (gimple_simplify_274 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case EXACT_DIV_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case INTEGER_CST:
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			  if (gimple_simplify_275 (res_op, seq, valueize, type, captures, EQ_EXPR))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NEGATE_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
				    if (gimple_simplify_276 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		if (CONSTANT_CLASS_P (_p1))
		  {
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		      if (gimple_simplify_277 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
		        return true;
		    }
		  }
	          break;
	        }
	      case ABS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (zerop (_p1))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			const enum tree_code eqne = EQ_EXPR;
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2197;
			{
			  res_op->set_op (eqne, type, 2);
			  res_op->ops[0] = captures[0];
			  res_op->ops[1] =  build_zero_cst (TREE_TYPE (captures[0]));
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1104, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2197:;
		      }
		    }
	          break;
	        }
	      case ABSU_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (zerop (_p1))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			const enum tree_code eqne = EQ_EXPR;
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2198;
			{
			  res_op->set_op (eqne, type, 2);
			  res_op->ops[0] = captures[0];
			  res_op->ops[1] =  build_zero_cst (TREE_TYPE (captures[0]));
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1104, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2198:;
		      }
		    }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _q40 };
				    if (gimple_simplify_278 (res_op, seq, valueize, type, captures, EQ_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _p1 };
		    if (gimple_simplify_279 (res_op, seq, valueize, type, captures, EQ_EXPR))
		      return true;
		  }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_IOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q31))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case INTEGER_CST:
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q30, _q31, _p1 };
						if (gimple_simplify_280 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					      break;
					    }
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case ADDR_EXPR:
	        {
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
			  if (gimple_simplify_281 (res_op, seq, valueize, type, captures, EQ_EXPR))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case BIT_IOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
				if (gimple_simplify_280 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case BIT_XOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (integer_zerop (_p1))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			if (gimple_simplify_282 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			if (gimple_simplify_283 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
			if (gimple_simplify_283 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_SQRTF:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d2 = get_def (valueize, _p1))
		          {
			    if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			      switch (gimple_call_combined_fn (_c2))
				{
				case CFN_BUILT_IN_SQRTF:
				  if (gimple_call_num_args (_c2) == 1)
				    {
				      tree _q40 = gimple_call_arg (_c2, 0);
				      _q40 = do_valueize (valueize, _q40);
				      {
					tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
					if (gimple_simplify_272 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_SQRTF, EQ_EXPR))
					  return true;
				      }
				    }
				  break;
				default:;
				}
		          }
		        break;
		      case REAL_CST:
		        {
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			    if (gimple_simplify_271 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_SQRTF, EQ_EXPR))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_SQRTL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d2 = get_def (valueize, _p1))
		          {
			    if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			      switch (gimple_call_combined_fn (_c2))
				{
				case CFN_BUILT_IN_SQRTL:
				  if (gimple_call_num_args (_c2) == 1)
				    {
				      tree _q40 = gimple_call_arg (_c2, 0);
				      _q40 = do_valueize (valueize, _q40);
				      {
					tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
					if (gimple_simplify_272 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_SQRTL, EQ_EXPR))
					  return true;
				      }
				    }
				  break;
				default:;
				}
		          }
		        break;
		      case REAL_CST:
		        {
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			    if (gimple_simplify_271 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_SQRTL, EQ_EXPR))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_SQRT:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d2 = get_def (valueize, _p1))
		          {
			    if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			      switch (gimple_call_combined_fn (_c2))
				{
				case CFN_BUILT_IN_SQRT:
				  if (gimple_call_num_args (_c2) == 1)
				    {
				      tree _q40 = gimple_call_arg (_c2, 0);
				      _q40 = do_valueize (valueize, _q40);
				      {
					tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
					if (gimple_simplify_272 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_SQRT, EQ_EXPR))
					  return true;
				      }
				    }
				  break;
				default:;
				}
		          }
		        break;
		      case REAL_CST:
		        {
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			    if (gimple_simplify_271 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_SQRT, EQ_EXPR))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_SQRT:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d2 = get_def (valueize, _p1))
		          {
			    if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			      switch (gimple_call_combined_fn (_c2))
				{
				case CFN_SQRT:
				  if (gimple_call_num_args (_c2) == 1)
				    {
				      tree _q40 = gimple_call_arg (_c2, 0);
				      _q40 = do_valueize (valueize, _q40);
				      {
					tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
					if (gimple_simplify_272 (res_op, seq, valueize, type, captures, CFN_SQRT, EQ_EXPR))
					  return true;
				      }
				    }
				  break;
				default:;
				}
		          }
		        break;
		      case REAL_CST:
		        {
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			    if (gimple_simplify_271 (res_op, seq, valueize, type, captures, CFN_SQRT, EQ_EXPR))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      default:;
	      }
        }
      break;
    case ADDR_EXPR:
      {
	switch (TREE_CODE (_p1))
	  {
	  case SSA_NAME:
	    {
	      {
		tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
		if (gimple_simplify_281 (res_op, seq, valueize, type, captures, EQ_EXPR))
		  return true;
	      }
	      break;
	    }
          default:;
          }
        break;
      }
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_XOR_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q31 };
			if (gimple_simplify_283 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _p0, 0) && types_match (_q31, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
			if (gimple_simplify_283 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			if (gimple_simplify_284 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
			if (gimple_simplify_284 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_AND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q31 };
			if (gimple_simplify_284 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _p0, 0) && types_match (_q31, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
			if (gimple_simplify_284 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  switch (TREE_CODE (_q31))
						    {
						    case INTEGER_CST:
						      {
							switch (TREE_CODE (_p1))
							  {
							  case SSA_NAME:
							    if (gimple *_d4 = get_def (valueize, _p1))
							      {
								if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								  switch (gimple_assign_rhs_code (_a4))
								    {
								    CASE_CONVERT:
								      {
									tree _q70 = gimple_assign_rhs1 (_a4);
									_q70 = do_valueize (valueize, _q70);
									if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
									  {
									    {
									      tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q30, _q40, _q31 };
									      if (gimple_simplify_285 (res_op, seq, valueize, type, captures, EQ_EXPR))
									        return true;
									    }
									  }
								        break;
								      }
								    default:;
								    }
							      }
							    break;
						          default:;
						          }
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  switch (TREE_CODE (_q50))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q50))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      CASE_CONVERT:
							        {
								  tree _q60 = gimple_assign_rhs1 (_a4);
								  _q60 = do_valueize (valueize, _q60);
								  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
								    {
								      switch (TREE_CODE (_q51))
								        {
									case INTEGER_CST:
									  {
									    {
									      tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q50, _q20, _q51 };
									      if (gimple_simplify_285 (res_op, seq, valueize, type, captures, EQ_EXPR))
									        return true;
									    }
									    break;
									  }
								        default:;
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_IOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			if (gimple_simplify_286 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
			if (gimple_simplify_286 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_IOR_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _p0, 0) && types_match (_q31, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q30, _p0 };
			if (gimple_simplify_286 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q31, _p0 };
			if (gimple_simplify_286 (res_op, seq, valueize, type, captures, EQ_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q31))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case INTEGER_CST:
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q30, _q31, _p1 };
						if (gimple_simplify_287 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					      break;
					    }
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_XOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
				if (gimple_simplify_287 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p0_pops[1];
  if (gimple_nop_convert (_p0, _p0_pops, valueize))
    {
      tree _q20 = _p0_pops[0];
      if (integer_zerop (_p1))
	{
	  {
	    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
	    if (gimple_simplify_288 (res_op, seq, valueize, type, captures, EQ_EXPR))
	      return true;
	  }
        }
    }
}
  if (integer_zerop (_p1))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_288 (res_op, seq, valueize, type, captures, EQ_EXPR))
	  return true;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50 };
					if (gimple_simplify_289 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_289 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50 };
					if (gimple_simplify_289 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51 };
					if (gimple_simplify_289 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (integer_pow2p (_q21))
		    {
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			    if (gimple_simplify_290 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case GE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case GE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (integer_zerop (_q51))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
					    if (gimple_simplify_291 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR, GE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  case LT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (integer_zerop (_q51))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q50, _q51, _q20 };
					    if (gimple_simplify_292 (res_op, seq, valueize, type, captures, EQ_EXPR, LT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      case LT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case LT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (integer_zerop (_q51))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
					    if (gimple_simplify_291 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR, GE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  case GE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (integer_zerop (_q51))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
					    if (gimple_simplify_293 (res_op, seq, valueize, type, captures, EQ_EXPR, LT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      case COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q22, _p1 };
		    if (gimple_simplify_294 (res_op, seq, valueize, type, captures, EQ_EXPR))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case COND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  tree _q32 = gimple_assign_rhs3 (_a1);
		  _q32 = do_valueize (valueize, _q32);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q31, _q32, _p0 };
		    if (gimple_simplify_294 (res_op, seq, valueize, type, captures, EQ_EXPR))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_pow2p (_q21))
				    {
				      if (integer_zerop (_p1))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q21 };
					    if (gimple_simplify_295 (res_op, seq, valueize, type, captures, EQ_EXPR, GE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (integer_pow2p (_q21))
		    {
		      if (integer_zerop (_p1))
			{
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q20, _q21 };
			    if (gimple_simplify_296 (res_op, seq, valueize, type, captures, EQ_EXPR, GE_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case ADDR_EXPR:
			        {
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  switch (TREE_CODE (_q40))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q40))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case ADDR_EXPR:
							        {
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q40 };
								    if (gimple_simplify_297 (res_op, seq, valueize, type, captures, EQ_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    case ADDR_EXPR:
						      {
							{
							  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q40 };
							  if (gimple_simplify_297 (res_op, seq, valueize, type, captures, EQ_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      case ADDR_EXPR:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
						    if (gimple_simplify_297 (res_op, seq, valueize, type, captures, EQ_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    case ADDR_EXPR:
				      {
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
					  if (gimple_simplify_297 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case ADDR_EXPR:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q40 = gimple_assign_rhs1 (_a2);
					_q40 = do_valueize (valueize, _q40);
					switch (TREE_CODE (_q40))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q40))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case ADDR_EXPR:
						      {
							{
							  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q40 };
							  if (gimple_simplify_297 (res_op, seq, valueize, type, captures, EQ_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					      }
					    break;
					  case ADDR_EXPR:
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q40 };
						if (gimple_simplify_297 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					      break;
					    }
				          default:;
				          }
				        break;
				      }
				    case ADDR_EXPR:
				      {
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
					  if (gimple_simplify_297 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
			  case ADDR_EXPR:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
				if (gimple_simplify_297 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case ADDR_EXPR:
	        {
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case ADDR_EXPR:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q30 };
						    if (gimple_simplify_298 (res_op, seq, valueize, type, captures, EQ_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    case ADDR_EXPR:
				      {
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q30 };
					  if (gimple_simplify_298 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      case ADDR_EXPR:
			        {
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _p1 };
				    if (gimple_simplify_298 (res_op, seq, valueize, type, captures, EQ_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case ADDR_EXPR:
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _p1 };
			  if (gimple_simplify_298 (res_op, seq, valueize, type, captures, EQ_EXPR))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case ADDR_EXPR:
      {
	switch (TREE_CODE (_p1))
	  {
	  case SSA_NAME:
	    if (gimple *_d1 = get_def (valueize, _p1))
	      {
		if (gassign *_a1 = dyn_cast <gassign *> (_d1))
		  switch (gimple_assign_rhs_code (_a1))
		    {
		    CASE_CONVERT:
		      {
			tree _q30 = gimple_assign_rhs1 (_a1);
			_q30 = do_valueize (valueize, _q30);
			switch (TREE_CODE (_q30))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _q30))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case ADDR_EXPR:
				      {
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q30 };
					  if (gimple_simplify_298 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
			  case ADDR_EXPR:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q30 };
				if (gimple_simplify_298 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    case ADDR_EXPR:
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _p1 };
			  if (gimple_simplify_298 (res_op, seq, valueize, type, captures, EQ_EXPR))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
	      }
	    break;
	  case ADDR_EXPR:
	    {
	      {
		tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _p1 };
		if (gimple_simplify_298 (res_op, seq, valueize, type, captures, EQ_EXPR))
		  return true;
	      }
	      break;
	    }
          default:;
          }
        break;
      }
    default:;
    }
  {
    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
    if (gimple_simplify_299 (res_op, seq, valueize, type, captures, EQ_EXPR))
      return true;
  }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case INTEGER_CST:
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			  if (gimple_simplify_300 (res_op, seq, valueize, type, captures, EQ_EXPR))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q31))
				    {
				    case INTEGER_CST:
				      {
					if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					  {
					    {
					      tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q31 };
					      if (gimple_simplify_301 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q31))
				    {
				    case INTEGER_CST:
				      {
					if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					  {
					    {
					      tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q31 };
					      if (gimple_simplify_301 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NE_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
				    {
				      switch (TREE_CODE (_q41))
				        {
					case INTEGER_CST:
					  {
					    {
					      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q41 };
					      if (gimple_simplify_301 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
					        return true;
					    }
					    break;
					  }
				        default:;
				        }
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
				    {
				      switch (TREE_CODE (_q41))
				        {
					case INTEGER_CST:
					  {
					    {
					      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q41 };
					      if (gimple_simplify_301 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
					        return true;
					    }
					    break;
					  }
				        default:;
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_onep (_p1))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (TREE_CODE (TREE_TYPE (captures[0])) == BOOLEAN_TYPE
 && types_match (type, TREE_TYPE (captures[0]))
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2199;
	  {
	    tree tem;
	    tem = captures[0];
	    res_op->set_value (tem);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1105, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail2199:;
	}
    }
  }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case VECTOR_CST:
		      {
			if (integer_zerop (_p1))
			  {
			    {
			      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			      const enum tree_code cmp = EQ_EXPR;
			      const enum tree_code icmp = LE_EXPR;
			      {
 tree csts = bitmask_inv_cst_vector_p (captures[2]);
				  if (csts && (VECTOR_TYPE_P (TREE_TYPE (captures[2])) || single_use (captures[0]))
)
				    {
				      {
 auto optab = VECTOR_TYPE_P (TREE_TYPE (captures[2]))
 ? optab_vector : optab_default;
 tree utype = unsigned_type_for (TREE_TYPE (captures[2]));
					  if (target_supports_op_p (utype, icmp, optab)
 || (optimize_vectors_before_lowering_p ()
 && (!target_supports_op_p (type, cmp, optab)
 || !target_supports_op_p (type, BIT_AND_EXPR, optab)))
)
					    {
					      if (TYPE_UNSIGNED (TREE_TYPE (captures[2]))
)
						{
						  gimple_seq *lseq = seq;
						  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2200;
						  {
						    res_op->set_op (icmp, type, 2);
						    res_op->ops[0] = captures[1];
						    res_op->ops[1] =  csts;
						    res_op->resimplify (lseq, valueize);
						    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1106, __FILE__, __LINE__, true);
						    return true;
						  }
next_after_fail2200:;
						}
					      else
						{
						  gimple_seq *lseq = seq;
						  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2201;
						  {
						    res_op->set_op (icmp, type, 2);
						    {
						      tree _o1[1], _r1;
						      _o1[0] = captures[1];
						      gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, utype, _o1[0]);
						      tem_op.resimplify (lseq, valueize);
						      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r1) goto next_after_fail2201;
						      res_op->ops[0] = _r1;
						    }
						    res_op->ops[1] =  csts;
						    res_op->resimplify (lseq, valueize);
						    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1107, __FILE__, __LINE__, true);
						    return true;
						  }
next_after_fail2201:;
						}
					    }
				      }
				    }
			      }
			    }
			  }
		        break;
		      }
		    case INTEGER_CST:
		      {
			if (integer_zerop (_p1))
			  {
			    {
			      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			      const enum tree_code cmp = EQ_EXPR;
			      const enum tree_code icmp = LE_EXPR;
			      {
 tree csts = bitmask_inv_cst_vector_p (captures[2]);
				  if (csts && (VECTOR_TYPE_P (TREE_TYPE (captures[2])) || single_use (captures[0]))
)
				    {
				      {
 auto optab = VECTOR_TYPE_P (TREE_TYPE (captures[2]))
 ? optab_vector : optab_default;
 tree utype = unsigned_type_for (TREE_TYPE (captures[2]));
					  if (target_supports_op_p (utype, icmp, optab)
 || (optimize_vectors_before_lowering_p ()
 && (!target_supports_op_p (type, cmp, optab)
 || !target_supports_op_p (type, BIT_AND_EXPR, optab)))
)
					    {
					      if (TYPE_UNSIGNED (TREE_TYPE (captures[2]))
)
						{
						  gimple_seq *lseq = seq;
						  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2202;
						  {
						    res_op->set_op (icmp, type, 2);
						    res_op->ops[0] = captures[1];
						    res_op->ops[1] =  csts;
						    res_op->resimplify (lseq, valueize);
						    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1106, __FILE__, __LINE__, true);
						    return true;
						  }
next_after_fail2202:;
						}
					      else
						{
						  gimple_seq *lseq = seq;
						  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2203;
						  {
						    res_op->set_op (icmp, type, 2);
						    {
						      tree _o1[1], _r1;
						      _o1[0] = captures[1];
						      gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, utype, _o1[0]);
						      tem_op.resimplify (lseq, valueize);
						      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r1) goto next_after_fail2203;
						      res_op->ops[0] = _r1;
						    }
						    res_op->ops[1] =  csts;
						    res_op->resimplify (lseq, valueize);
						    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1107, __FILE__, __LINE__, true);
						    return true;
						  }
next_after_fail2203:;
						}
					    }
				      }
				    }
			      }
			    }
			  }
		        break;
		      }
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case VECTOR_CST:
		      {
			if (integer_zerop (_p1))
			  {
			    {
			      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q21, _q20 };
			      const enum tree_code cmp = EQ_EXPR;
			      const enum tree_code icmp = LE_EXPR;
			      {
 tree csts = bitmask_inv_cst_vector_p (captures[2]);
				  if (csts && (VECTOR_TYPE_P (TREE_TYPE (captures[2])) || single_use (captures[0]))
)
				    {
				      {
 auto optab = VECTOR_TYPE_P (TREE_TYPE (captures[2]))
 ? optab_vector : optab_default;
 tree utype = unsigned_type_for (TREE_TYPE (captures[2]));
					  if (target_supports_op_p (utype, icmp, optab)
 || (optimize_vectors_before_lowering_p ()
 && (!target_supports_op_p (type, cmp, optab)
 || !target_supports_op_p (type, BIT_AND_EXPR, optab)))
)
					    {
					      if (TYPE_UNSIGNED (TREE_TYPE (captures[2]))
)
						{
						  gimple_seq *lseq = seq;
						  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2204;
						  {
						    res_op->set_op (icmp, type, 2);
						    res_op->ops[0] = captures[1];
						    res_op->ops[1] =  csts;
						    res_op->resimplify (lseq, valueize);
						    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1106, __FILE__, __LINE__, true);
						    return true;
						  }
next_after_fail2204:;
						}
					      else
						{
						  gimple_seq *lseq = seq;
						  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2205;
						  {
						    res_op->set_op (icmp, type, 2);
						    {
						      tree _o1[1], _r1;
						      _o1[0] = captures[1];
						      gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, utype, _o1[0]);
						      tem_op.resimplify (lseq, valueize);
						      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r1) goto next_after_fail2205;
						      res_op->ops[0] = _r1;
						    }
						    res_op->ops[1] =  csts;
						    res_op->resimplify (lseq, valueize);
						    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1107, __FILE__, __LINE__, true);
						    return true;
						  }
next_after_fail2205:;
						}
					    }
				      }
				    }
			      }
			    }
			  }
		        break;
		      }
		    case INTEGER_CST:
		      {
			if (integer_zerop (_p1))
			  {
			    {
			      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q21, _q20 };
			      const enum tree_code cmp = EQ_EXPR;
			      const enum tree_code icmp = LE_EXPR;
			      {
 tree csts = bitmask_inv_cst_vector_p (captures[2]);
				  if (csts && (VECTOR_TYPE_P (TREE_TYPE (captures[2])) || single_use (captures[0]))
)
				    {
				      {
 auto optab = VECTOR_TYPE_P (TREE_TYPE (captures[2]))
 ? optab_vector : optab_default;
 tree utype = unsigned_type_for (TREE_TYPE (captures[2]));
					  if (target_supports_op_p (utype, icmp, optab)
 || (optimize_vectors_before_lowering_p ()
 && (!target_supports_op_p (type, cmp, optab)
 || !target_supports_op_p (type, BIT_AND_EXPR, optab)))
)
					    {
					      if (TYPE_UNSIGNED (TREE_TYPE (captures[2]))
)
						{
						  gimple_seq *lseq = seq;
						  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2206;
						  {
						    res_op->set_op (icmp, type, 2);
						    res_op->ops[0] = captures[1];
						    res_op->ops[1] =  csts;
						    res_op->resimplify (lseq, valueize);
						    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1106, __FILE__, __LINE__, true);
						    return true;
						  }
next_after_fail2206:;
						}
					      else
						{
						  gimple_seq *lseq = seq;
						  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2207;
						  {
						    res_op->set_op (icmp, type, 2);
						    {
						      tree _o1[1], _r1;
						      _o1[0] = captures[1];
						      gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, utype, _o1[0]);
						      tem_op.resimplify (lseq, valueize);
						      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r1) goto next_after_fail2207;
						      res_op->ops[0] = _r1;
						    }
						    res_op->ops[1] =  csts;
						    res_op->resimplify (lseq, valueize);
						    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1107, __FILE__, __LINE__, true);
						    return true;
						  }
next_after_fail2207:;
						}
					    }
				      }
				    }
			      }
			    }
			  }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case RSHIFT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MULT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  switch (TREE_CODE (_q31))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q31))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      CASE_CONVERT:
							        {
								  tree _q60 = gimple_assign_rhs1 (_a4);
								  _q60 = do_valueize (valueize, _q60);
								  switch (TREE_CODE (_q21))
								    {
								    case INTEGER_CST:
								      {
									if (integer_zerop (_p1))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q60, _q21 };
									      if (gimple_simplify_302 (res_op, seq, valueize, type, captures, EQ_EXPR))
									        return true;
									    }
									  }
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
				if (gimple_simplify_303 (res_op, seq, valueize, type, captures, PLUS_EXPR, MINUS_EXPR, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
				if (gimple_simplify_303 (res_op, seq, valueize, type, captures, MINUS_EXPR, PLUS_EXPR, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				if (gimple_simplify_304 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_CLZ:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_305 (res_op, seq, valueize, type, captures, EQ_EXPR, LT_EXPR, CFN_BUILT_IN_CLZ))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_CTZ:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_307 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_CTZ))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_FFS:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_310 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_FFS))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_REDUC_IOR:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    if (integer_zerop (_p1))
		      {
			{
			  tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			  if (gimple_simplify_311 (res_op, seq, valueize, type, captures, EQ_EXPR))
			    return true;
			}
		      }
	          }
	        break;
	      case CFN_BUILT_IN_FFSIMAX:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_310 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_FFSIMAX))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_POPCOUNT:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    if (integer_zerop (_p1))
		      {
			{
			  tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			  if (gimple_simplify_309 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR, CFN_BUILT_IN_POPCOUNT))
			    return true;
			}
		      }
	          }
	        break;
	      case CFN_BUILT_IN_CLZL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_305 (res_op, seq, valueize, type, captures, EQ_EXPR, LT_EXPR, CFN_BUILT_IN_CLZL))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_CTZL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_307 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_CTZL))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_FFSL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_310 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_FFSL))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_POPCOUNTLL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    if (integer_zerop (_p1))
		      {
			{
			  tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			  if (gimple_simplify_309 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR, CFN_BUILT_IN_POPCOUNTLL))
			    return true;
			}
		      }
	          }
	        break;
	      case CFN_BUILT_IN_CTZIMAX:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_307 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_CTZIMAX))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_POPCOUNT:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    if (integer_zerop (_p1))
		      {
			{
			  tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			  if (gimple_simplify_309 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR, CFN_POPCOUNT))
			    return true;
			}
		      }
	          }
	        break;
	      case CFN_CLZ:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_305 (res_op, seq, valueize, type, captures, EQ_EXPR, LT_EXPR, CFN_CLZ))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
			    if (gimple_simplify_306 (res_op, seq, valueize, type, captures, EQ_EXPR, LT_EXPR))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_CTZ:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_307 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_CTZ))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
			    if (gimple_simplify_308 (res_op, seq, valueize, type, captures, EQ_EXPR))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_FFS:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_310 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_FFS))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_POPCOUNTIMAX:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    if (integer_zerop (_p1))
		      {
			{
			  tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			  if (gimple_simplify_309 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR, CFN_BUILT_IN_POPCOUNTIMAX))
			    return true;
			}
		      }
	          }
	        break;
	      case CFN_BUILT_IN_CLZIMAX:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_305 (res_op, seq, valueize, type, captures, EQ_EXPR, LT_EXPR, CFN_BUILT_IN_CLZIMAX))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_POPCOUNTL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    if (integer_zerop (_p1))
		      {
			{
			  tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			  if (gimple_simplify_309 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR, CFN_BUILT_IN_POPCOUNTL))
			    return true;
			}
		      }
	          }
	        break;
	      case CFN_BUILT_IN_CLZLL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_305 (res_op, seq, valueize, type, captures, EQ_EXPR, LT_EXPR, CFN_BUILT_IN_CLZLL))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_CTZLL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_307 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_CTZLL))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_FFSLL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_310 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_FFSLL))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CEIL_MOD_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (integer_zerop (_p0))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_338 (res_op, seq, valueize, type, captures, CEIL_MOD_EXPR))
	  return true;
      }
    }
  if (integer_onep (_p1))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_339 (res_op, seq, valueize, type, captures, CEIL_MOD_EXPR))
	  return true;
      }
    }
  if (integer_minus_onep (_p1))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_340 (res_op, seq, valueize, type, captures, CEIL_MOD_EXPR))
	  return true;
      }
    }
  if ((_p1 == _p0 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _p0, 0) && types_match (_p1, _p0)))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_341 (res_op, seq, valueize, type, captures, CEIL_MOD_EXPR))
	  return true;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case CEIL_MOD_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_342 (res_op, seq, valueize, type, captures, CEIL_MOD_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case MULT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				if (gimple_simplify_343 (res_op, seq, valueize, type, captures, CEIL_MOD_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case VEC_COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case VEC_COND_EXPR:
			        {
				  tree _q60 = gimple_assign_rhs1 (_a2);
				  _q60 = do_valueize (valueize, _q60);
				  tree _q61 = gimple_assign_rhs2 (_a2);
				  _q61 = do_valueize (valueize, _q61);
				  tree _q62 = gimple_assign_rhs3 (_a2);
				  _q62 = do_valueize (valueize, _q62);
				  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				    {
				      {
					tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1, _q61, _q62 };
					if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (CEIL_MOD_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]), TREE_TYPE (captures[1]))))
)
					  {
					    gimple_seq *lseq = seq;
					    if (lseq
					        && (!single_use (captures[0])
					            || !single_use (captures[4])))
					      lseq = NULL;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2360;
					    {
					      res_op->set_op (VEC_COND_EXPR, type, 3);
					      res_op->ops[0] = captures[1];
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[2];
						_o1[1] = captures[5];
						gimple_match_op tem_op (res_op->cond.any_else (), CEIL_MOD_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail2360;
						res_op->ops[1] = _r1;
					      }
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[3];
						_o1[1] = captures[6];
						gimple_match_op tem_op (res_op->cond.any_else (), CEIL_MOD_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail2360;
						res_op->ops[2] = _r1;
					      }
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1018, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2360:;
					  }
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1 };
		    if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (CEIL_MOD_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]), TREE_TYPE (captures[1]))))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[0])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2361;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[1];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[2];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), CEIL_MOD_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2361;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[3];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), CEIL_MOD_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2361;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1019, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2361:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_COND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  tree _q32 = gimple_assign_rhs3 (_a1);
		  _q32 = do_valueize (valueize, _q32);
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p1, _q30, _q31, _q32 };
		    if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (CEIL_MOD_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[3]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[2]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[3]), TREE_TYPE (captures[2]))))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[1])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2362;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[2];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[3];
			    gimple_match_op tem_op (res_op->cond.any_else (), CEIL_MOD_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2362;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), CEIL_MOD_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2362;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1020, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2362:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_TRUNC_MOD_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (integer_zerop (_p0))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_338 (res_op, seq, valueize, type, captures, TRUNC_MOD_EXPR))
	  return true;
      }
    }
  if (integer_onep (_p1))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_339 (res_op, seq, valueize, type, captures, TRUNC_MOD_EXPR))
	  return true;
      }
    }
  if (integer_minus_onep (_p1))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_340 (res_op, seq, valueize, type, captures, TRUNC_MOD_EXPR))
	  return true;
      }
    }
  if ((_p1 == _p0 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _p0, 0) && types_match (_p1, _p0)))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_341 (res_op, seq, valueize, type, captures, TRUNC_MOD_EXPR))
	  return true;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case TRUNC_MOD_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_342 (res_op, seq, valueize, type, captures, TRUNC_MOD_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case MULT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				if (gimple_simplify_343 (res_op, seq, valueize, type, captures, TRUNC_MOD_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NEGATE_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q40 };
				    if (gimple_simplify_393 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		{
		  tree _q30_pops[1];
		  if (gimple_power_of_two_cand (_q30, _q30_pops, valueize))
		    {
		      tree _q40 = _q30_pops[0];
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q40 };
			if (gimple_simplify_344 (res_op, seq, valueize, type, captures, TRUNC_MOD_EXPR))
			  return true;
		      }
		    }
		}
	          break;
	        }
	      case NEGATE_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
		    if (gimple_simplify_393 (res_op, seq, valueize, type, captures))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case INTEGER_CST:
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  if (TYPE_SIGN (type) == SIGNED
 && !TREE_OVERFLOW (captures[1])
 && wi::neg_p (wi::to_wide (captures[1]))
 && !TYPE_OVERFLOW_TRAPS (type)
 && !sign_bit_p (captures[1], captures[1])
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2366;
	      {
		res_op->set_op (TRUNC_MOD_EXPR, type, 2);
		res_op->ops[0] = captures[0];
		{
		  tree _o1[1], _r1;
		  _o1[0] = captures[1];
		  gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail2366;
		  res_op->ops[1] = _r1;
		}
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1128, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail2366:;
	    }
	}
        break;
      }
    default:;
    }
{
  tree _p1_pops[1];
  if (gimple_power_of_two_cand (_p1, _p1_pops, valueize))
    {
      tree _q30 = _p1_pops[0];
      {
	tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _q30 };
	if (gimple_simplify_344 (res_op, seq, valueize, type, captures, TRUNC_MOD_EXPR))
	  return true;
      }
    }
}
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case VEC_COND_EXPR:
			        {
				  tree _q60 = gimple_assign_rhs1 (_a2);
				  _q60 = do_valueize (valueize, _q60);
				  tree _q61 = gimple_assign_rhs2 (_a2);
				  _q61 = do_valueize (valueize, _q61);
				  tree _q62 = gimple_assign_rhs3 (_a2);
				  _q62 = do_valueize (valueize, _q62);
				  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				    {
				      {
					tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1, _q61, _q62 };
					if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (TRUNC_MOD_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]), TREE_TYPE (captures[1]))))
)
					  {
					    gimple_seq *lseq = seq;
					    if (lseq
					        && (!single_use (captures[0])
					            || !single_use (captures[4])))
					      lseq = NULL;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2367;
					    {
					      res_op->set_op (VEC_COND_EXPR, type, 3);
					      res_op->ops[0] = captures[1];
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[2];
						_o1[1] = captures[5];
						gimple_match_op tem_op (res_op->cond.any_else (), TRUNC_MOD_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail2367;
						res_op->ops[1] = _r1;
					      }
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[3];
						_o1[1] = captures[6];
						gimple_match_op tem_op (res_op->cond.any_else (), TRUNC_MOD_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail2367;
						res_op->ops[2] = _r1;
					      }
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1018, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2367:;
					  }
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1 };
		    if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (TRUNC_MOD_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]), TREE_TYPE (captures[1]))))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[0])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2368;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[1];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[2];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), TRUNC_MOD_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2368;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[3];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), TRUNC_MOD_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2368;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1019, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2368:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_COND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  tree _q32 = gimple_assign_rhs3 (_a1);
		  _q32 = do_valueize (valueize, _q32);
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p1, _q30, _q31, _q32 };
		    if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (TRUNC_MOD_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[3]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[2]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[3]), TREE_TYPE (captures[2]))))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[1])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2369;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[2];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[3];
			    gimple_match_op tem_op (res_op->cond.any_else (), TRUNC_MOD_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2369;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), TRUNC_MOD_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2369;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1020, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2369:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_POWF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case REAL_CST:
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			  const combined_fn pows = CFN_BUILT_IN_POWF;
			  {
 HOST_WIDE_INT n;
			      if (real_isinteger (&TREE_REAL_CST (captures[1]), &n) && (n & 1) == 0
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2391;
				  {
				    res_op->set_op (pows, type, 2);
				    res_op->ops[0] = captures[0];
				    res_op->ops[1] = captures[1];
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1138, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail2391:;
				}
			  }
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case ABS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case REAL_CST:
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			  const combined_fn pows = CFN_BUILT_IN_POWF;
			  {
 HOST_WIDE_INT n;
			      if (real_isinteger (&TREE_REAL_CST (captures[1]), &n) && (n & 1) == 0
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2392;
				  {
				    res_op->set_op (pows, type, 2);
				    res_op->ops[0] = captures[0];
				    res_op->ops[1] = captures[1];
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1138, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail2392:;
				}
			  }
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case RDIV_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (real_onep (_q20))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
			if (gimple_simplify_425 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POWF))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_SQRTF:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		      if (flag_unsafe_math_optimizations && canonicalize_math_p ()
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2393;
			  {
			    res_op->set_op (CFN_BUILT_IN_POWF, type, 2);
			    res_op->ops[0] = captures[0];
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[1];
			      _o1[1] =  build_real (type, dconsthalf);
			      gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail2393;
			      res_op->ops[1] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1139, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail2393:;
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_EXP10F:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2394;
			  {
			    res_op->set_op (CFN_BUILT_IN_EXP10F, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] = captures[1];
			      gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail2394;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1140, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail2394:;
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_EXPF:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2395;
			  {
			    res_op->set_op (CFN_BUILT_IN_EXPF, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] = captures[1];
			      gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail2395;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1140, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail2395:;
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_POWF:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    if (tree_expr_nonnegative_p (_q20))
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			  if (flag_unsafe_math_optimizations && canonicalize_math_p ()
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2396;
			      {
				res_op->set_op (CFN_BUILT_IN_POWF, type, 2);
				res_op->ops[0] = captures[0];
				{
				  tree _o1[2], _r1;
				  _o1[0] = captures[1];
				  _o1[1] = captures[2];
				  gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail2396;
				  res_op->ops[1] = _r1;
				}
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1141, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail2396:;
			    }
			}
		      }
	          }
	        break;
	      case CFN_BUILT_IN_POW10F:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2397;
			  {
			    res_op->set_op (CFN_BUILT_IN_POW10F, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] = captures[1];
			      gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail2397;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1140, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail2397:;
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGN:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    switch (TREE_CODE (_p1))
		      {
		      case REAL_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_424 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGN, CFN_BUILT_IN_POWF))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGNF:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    switch (TREE_CODE (_p1))
		      {
		      case REAL_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_424 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGNF, CFN_BUILT_IN_POWF))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGNL:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    switch (TREE_CODE (_p1))
		      {
		      case REAL_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_424 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGNL, CFN_BUILT_IN_POWF))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_CBRTF:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    if (tree_expr_nonnegative_p (_q20))
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			  if (flag_unsafe_math_optimizations && canonicalize_math_p ()
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2398;
			      {
				res_op->set_op (CFN_BUILT_IN_POWF, type, 2);
				res_op->ops[0] = captures[0];
				{
				  tree _o1[2], _r1;
				  _o1[0] = captures[1];
				  _o1[1] =  build_real_truncate (type, dconst_third ());
				  gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail2398;
				  res_op->ops[1] = _r1;
				}
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1142, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail2398:;
			    }
			}
		      }
	          }
	        break;
	      case CFN_BUILT_IN_EXP2F:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2399;
			  {
			    res_op->set_op (CFN_BUILT_IN_EXP2F, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] = captures[1];
			      gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail2399;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1140, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail2399:;
			}
		    }
	          }
	        break;
	      case CFN_COPYSIGN:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    switch (TREE_CODE (_p1))
		      {
		      case REAL_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_424 (res_op, seq, valueize, type, captures, CFN_COPYSIGN, CFN_BUILT_IN_POWF))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      default:;
	      }
        }
      break;
    case REAL_CST:
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  if (gimple_simplify_427 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POWF, CFN_BUILT_IN_EXPF, CFN_BUILT_IN_LOGF, CFN_BUILT_IN_EXP2F, CFN_BUILT_IN_LOG2F))
	    return true;
	}
        break;
      }
    default:;
    }
if (real_zerop (_p0))
  {
    {
      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
      if (gimple_simplify_426 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POWF))
        return true;
    }
  }
if (real_onep (_p0))
  {
    {
      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
      if (gimple_simplify_428 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POWF))
        return true;
    }
  }
  switch (TREE_CODE (_p1))
    {
    case REAL_CST:
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  {
 const REAL_VALUE_TYPE *value = TREE_REAL_CST_PTR (captures[1]);
 REAL_VALUE_TYPE tmp;
	      if (real_equal (value, &dconst0)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2400;
		  {
		    tree tem;
		    tem =  build_real (type, dconst1);
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1143, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail2400:;
		}
	      else
		{
		  if (real_equal (value, &dconst1)
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2401;
		      {
			tree tem;
			tem = captures[0];
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1144, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail2401:;
		    }
		  else
		    {
		      if (real_equal (value, &dconstm1)
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2402;
			  {
			    res_op->set_op (RDIV_EXPR, type, 2);
			    res_op->ops[0] =  build_real (type, dconst1);
			    res_op->ops[1] = captures[0];
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1145, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail2402:;
			}
		      else
			{
			  if (flag_unsafe_math_optimizations
 && canonicalize_math_p ()
 && real_equal (value, &dconsthalf)
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2403;
			      {
				res_op->set_op (CFN_BUILT_IN_SQRTF, type, 1);
				res_op->ops[0] = captures[0];
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1146, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail2403:;
			    }
			  else
			    {
			      if (flag_unsafe_math_optimizations
 && canonicalize_math_p ()
 && (tmp = real_value_truncate (TYPE_MODE (type), dconst_third ()),
 real_equal (value, &tmp))
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2404;
				  {
				    res_op->set_op (CFN_BUILT_IN_CBRTF, type, 1);
				    res_op->ops[0] = captures[0];
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1147, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail2404:;
				}
			    }
			}
		    }
		}
	  }
	}
        break;
      }
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_POWL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case REAL_CST:
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			  const combined_fn pows = CFN_BUILT_IN_POWL;
			  {
 HOST_WIDE_INT n;
			      if (real_isinteger (&TREE_REAL_CST (captures[1]), &n) && (n & 1) == 0
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2419;
				  {
				    res_op->set_op (pows, type, 2);
				    res_op->ops[0] = captures[0];
				    res_op->ops[1] = captures[1];
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1138, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail2419:;
				}
			  }
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case ABS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case REAL_CST:
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			  const combined_fn pows = CFN_BUILT_IN_POWL;
			  {
 HOST_WIDE_INT n;
			      if (real_isinteger (&TREE_REAL_CST (captures[1]), &n) && (n & 1) == 0
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2420;
				  {
				    res_op->set_op (pows, type, 2);
				    res_op->ops[0] = captures[0];
				    res_op->ops[1] = captures[1];
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1138, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail2420:;
				}
			  }
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case RDIV_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (real_onep (_q20))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
			if (gimple_simplify_425 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POWL))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_SQRTL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		      if (flag_unsafe_math_optimizations && canonicalize_math_p ()
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2421;
			  {
			    res_op->set_op (CFN_BUILT_IN_POWL, type, 2);
			    res_op->ops[0] = captures[0];
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[1];
			      _o1[1] =  build_real (type, dconsthalf);
			      gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail2421;
			      res_op->ops[1] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1139, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail2421:;
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_EXP10L:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2422;
			  {
			    res_op->set_op (CFN_BUILT_IN_EXP10L, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] = captures[1];
			      gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail2422;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1140, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail2422:;
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_EXPL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2423;
			  {
			    res_op->set_op (CFN_BUILT_IN_EXPL, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] = captures[1];
			      gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail2423;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1140, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail2423:;
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_POWL:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    if (tree_expr_nonnegative_p (_q20))
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			  if (flag_unsafe_math_optimizations && canonicalize_math_p ()
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2424;
			      {
				res_op->set_op (CFN_BUILT_IN_POWL, type, 2);
				res_op->ops[0] = captures[0];
				{
				  tree _o1[2], _r1;
				  _o1[0] = captures[1];
				  _o1[1] = captures[2];
				  gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail2424;
				  res_op->ops[1] = _r1;
				}
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1141, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail2424:;
			    }
			}
		      }
	          }
	        break;
	      case CFN_BUILT_IN_POW10L:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2425;
			  {
			    res_op->set_op (CFN_BUILT_IN_POW10L, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] = captures[1];
			      gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail2425;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1140, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail2425:;
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGN:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    switch (TREE_CODE (_p1))
		      {
		      case REAL_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_424 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGN, CFN_BUILT_IN_POWL))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGNF:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    switch (TREE_CODE (_p1))
		      {
		      case REAL_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_424 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGNF, CFN_BUILT_IN_POWL))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGNL:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    switch (TREE_CODE (_p1))
		      {
		      case REAL_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_424 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGNL, CFN_BUILT_IN_POWL))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_CBRTL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    if (tree_expr_nonnegative_p (_q20))
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			  if (flag_unsafe_math_optimizations && canonicalize_math_p ()
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2426;
			      {
				res_op->set_op (CFN_BUILT_IN_POWL, type, 2);
				res_op->ops[0] = captures[0];
				{
				  tree _o1[2], _r1;
				  _o1[0] = captures[1];
				  _o1[1] =  build_real_truncate (type, dconst_third ());
				  gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail2426;
				  res_op->ops[1] = _r1;
				}
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1142, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail2426:;
			    }
			}
		      }
	          }
	        break;
	      case CFN_BUILT_IN_EXP2L:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2427;
			  {
			    res_op->set_op (CFN_BUILT_IN_EXP2L, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] = captures[1];
			      gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail2427;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1140, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail2427:;
			}
		    }
	          }
	        break;
	      case CFN_COPYSIGN:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    switch (TREE_CODE (_p1))
		      {
		      case REAL_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_424 (res_op, seq, valueize, type, captures, CFN_COPYSIGN, CFN_BUILT_IN_POWL))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      default:;
	      }
        }
      break;
    case REAL_CST:
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  if (gimple_simplify_427 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POWL, CFN_BUILT_IN_EXPL, CFN_BUILT_IN_LOGL, CFN_BUILT_IN_EXP2L, CFN_BUILT_IN_LOG2L))
	    return true;
	}
        break;
      }
    default:;
    }
if (real_zerop (_p0))
  {
    {
      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
      if (gimple_simplify_426 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POWL))
        return true;
    }
  }
if (real_onep (_p0))
  {
    {
      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
      if (gimple_simplify_428 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POWL))
        return true;
    }
  }
  switch (TREE_CODE (_p1))
    {
    case REAL_CST:
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  {
 const REAL_VALUE_TYPE *value = TREE_REAL_CST_PTR (captures[1]);
 REAL_VALUE_TYPE tmp;
	      if (real_equal (value, &dconst0)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2428;
		  {
		    tree tem;
		    tem =  build_real (type, dconst1);
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1143, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail2428:;
		}
	      else
		{
		  if (real_equal (value, &dconst1)
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2429;
		      {
			tree tem;
			tem = captures[0];
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1144, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail2429:;
		    }
		  else
		    {
		      if (real_equal (value, &dconstm1)
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2430;
			  {
			    res_op->set_op (RDIV_EXPR, type, 2);
			    res_op->ops[0] =  build_real (type, dconst1);
			    res_op->ops[1] = captures[0];
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1145, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail2430:;
			}
		      else
			{
			  if (flag_unsafe_math_optimizations
 && canonicalize_math_p ()
 && real_equal (value, &dconsthalf)
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2431;
			      {
				res_op->set_op (CFN_BUILT_IN_SQRTL, type, 1);
				res_op->ops[0] = captures[0];
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1146, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail2431:;
			    }
			  else
			    {
			      if (flag_unsafe_math_optimizations
 && canonicalize_math_p ()
 && (tmp = real_value_truncate (TYPE_MODE (type), dconst_third ()),
 real_equal (value, &tmp))
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2432;
				  {
				    res_op->set_op (CFN_BUILT_IN_CBRTL, type, 1);
				    res_op->ops[0] = captures[0];
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1147, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail2432:;
				}
			    }
			}
		    }
		}
	  }
	}
        break;
      }
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_HYPOT (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		    const combined_fn hypots = CFN_BUILT_IN_HYPOT;
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2480;
		    {
		      res_op->set_op (hypots, type, 2);
		      res_op->ops[0] = captures[0];
		      res_op->ops[1] = captures[1];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1156, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail2480:;
		  }
	          break;
	        }
	      case ABS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		    const combined_fn hypots = CFN_BUILT_IN_HYPOT;
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2481;
		    {
		      res_op->set_op (hypots, type, 2);
		      res_op->ops[0] = captures[0];
		      res_op->ops[1] = captures[1];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1156, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail2481:;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
		    const combined_fn hypots = CFN_BUILT_IN_HYPOT;
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2482;
		    {
		      res_op->set_op (hypots, type, 2);
		      res_op->ops[0] = captures[0];
		      res_op->ops[1] = captures[1];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1157, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail2482:;
		  }
	          break;
	        }
	      case ABS_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
		    const combined_fn hypots = CFN_BUILT_IN_HYPOT;
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2483;
		    {
		      res_op->set_op (hypots, type, 2);
		      res_op->ops[0] = captures[0];
		      res_op->ops[1] = captures[1];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1157, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail2483:;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_COPYSIGN:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
		      if (gimple_simplify_430 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGN, CFN_BUILT_IN_HYPOT))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGNF:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
		      if (gimple_simplify_430 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGNF, CFN_BUILT_IN_HYPOT))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGNL:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
		      if (gimple_simplify_430 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGNL, CFN_BUILT_IN_HYPOT))
		        return true;
		    }
	          }
	        break;
	      case CFN_COPYSIGN:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
		      if (gimple_simplify_430 (res_op, seq, valueize, type, captures, CFN_COPYSIGN, CFN_BUILT_IN_HYPOT))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_COPYSIGN:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q30 = gimple_call_arg (_c1, 0);
		    _q30 = do_valueize (valueize, _q30);
		    tree _q31 = gimple_call_arg (_c1, 1);
		    _q31 = do_valueize (valueize, _q31);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q31 };
		      if (gimple_simplify_431 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGN, CFN_BUILT_IN_HYPOT))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGNF:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q30 = gimple_call_arg (_c1, 0);
		    _q30 = do_valueize (valueize, _q30);
		    tree _q31 = gimple_call_arg (_c1, 1);
		    _q31 = do_valueize (valueize, _q31);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q31 };
		      if (gimple_simplify_431 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGNF, CFN_BUILT_IN_HYPOT))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGNL:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q30 = gimple_call_arg (_c1, 0);
		    _q30 = do_valueize (valueize, _q30);
		    tree _q31 = gimple_call_arg (_c1, 1);
		    _q31 = do_valueize (valueize, _q31);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q31 };
		      if (gimple_simplify_431 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGNL, CFN_BUILT_IN_HYPOT))
		        return true;
		    }
	          }
	        break;
	      case CFN_COPYSIGN:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q30 = gimple_call_arg (_c1, 0);
		    _q30 = do_valueize (valueize, _q30);
		    tree _q31 = gimple_call_arg (_c1, 1);
		    _q31 = do_valueize (valueize, _q31);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q31 };
		      if (gimple_simplify_431 (res_op, seq, valueize, type, captures, CFN_COPYSIGN, CFN_BUILT_IN_HYPOT))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (real_zerop (_p1))
  {
    {
      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
      if (gimple_simplify_432 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_HYPOT))
        return true;
    }
  }
  if (real_zerop (_p0))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p1, _p0 };
	if (gimple_simplify_432 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_HYPOT))
	  return true;
      }
    }
  if ((_p1 == _p0 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _p0, 0) && types_match (_p1, _p0)))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_433 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_HYPOT))
	  return true;
      }
    }
  return false;
}

bool
gimple_simplify_MAX_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if ((_p1 == _p0 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _p0, 0) && types_match (_p1, _p0)))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_587 (res_op, seq, valueize, type, captures, MAX_EXPR))
	  return true;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MAX_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_588 (res_op, seq, valueize, type, captures, MAX_EXPR))
			  return true;
		      }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q21, _q20 };
			if (gimple_simplify_588 (res_op, seq, valueize, type, captures, MAX_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MAX_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p1, _p0, _q31 };
			if (gimple_simplify_589 (res_op, seq, valueize, type, captures, MAX_EXPR))
			  return true;
		      }
		    }
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _p0, 0) && types_match (_q31, _p0)))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p1, _p0, _q30 };
			if (gimple_simplify_589 (res_op, seq, valueize, type, captures, MAX_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MIN_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			if (gimple_simplify_598 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
			if (gimple_simplify_598 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MIN_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _p0, 0) && types_match (_q31, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q30, _p0 };
			if (gimple_simplify_598 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q31, _p0 };
			if (gimple_simplify_598 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      case NEGATE_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
			if (gimple_simplify_599 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_599 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  {
    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
    if (INTEGRAL_TYPE_P (type)
 && TYPE_MAX_VALUE (type)
 && operand_equal_p (captures[1], TYPE_MAX_VALUE (type), OEP_ONLY_CONST)
)
      {
	gimple_seq *lseq = seq;
	if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2525;
	{
	  tree tem;
	  tem = captures[1];
	  res_op->set_value (tem);
	  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1173, __FILE__, __LINE__, true);
	  return true;
	}
next_after_fail2525:;
      }
    else
      {
	if (INTEGRAL_TYPE_P (type)
 && TYPE_MIN_VALUE (type)
 && operand_equal_p (captures[1], TYPE_MIN_VALUE (type), OEP_ONLY_CONST)
)
	  {
	    gimple_seq *lseq = seq;
	    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2526;
	    {
	      tree tem;
	      tem = captures[0];
	      res_op->set_value (tem);
	      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1174, __FILE__, __LINE__, true);
	      return true;
	    }
next_after_fail2526:;
	  }
      }
  }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case PLUS_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      switch (TREE_CODE (_q31))
		        {
			case INTEGER_CST:
			  {
			    {
			      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _q31 };
			      if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
)
				{
				  if (tree_int_cst_sgn (captures[2]) > 0
)
				    {
				      gimple_seq *lseq = seq;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2527;
				      {
					tree tem;
					tem = captures[1];
					res_op->set_value (tem);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1175, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail2527:;
				    }
				  else
				    {
				      gimple_seq *lseq = seq;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2528;
				      {
					tree tem;
					tem = captures[0];
					res_op->set_value (tem);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1176, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail2528:;
				    }
				}
			    }
			    break;
			  }
		        default:;
		        }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    {
			      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p0, _q21 };
			      if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
)
				{
				  if (tree_int_cst_sgn (captures[2]) > 0
)
				    {
				      gimple_seq *lseq = seq;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2529;
				      {
					tree tem;
					tem = captures[1];
					res_op->set_value (tem);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1175, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail2529:;
				    }
				  else
				    {
				      gimple_seq *lseq = seq;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2530;
				      {
					tree tem;
					tem = captures[0];
					res_op->set_value (tem);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1176, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail2530:;
				    }
				}
			    }
			  }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case MIN_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MAX_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (!HONOR_NANS (captures[0])
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2531;
						{
						  res_op->set_op (MAX_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1017, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2531:;
					      }
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
					    if (!HONOR_NANS (captures[0])
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2532;
						{
						  res_op->set_op (MAX_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1017, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2532:;
					      }
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case MAX_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MIN_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (!HONOR_NANS (captures[0])
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2533;
						{
						  res_op->set_op (MAX_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1017, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2533:;
					      }
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (!HONOR_NANS (captures[0])
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2534;
						{
						  res_op->set_op (MAX_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1017, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2534:;
					      }
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case ADDR_EXPR:
			        {
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  switch (TREE_CODE (_q40))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q40))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case ADDR_EXPR:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _q40 };
								    if (gimple_simplify_592 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    case ADDR_EXPR:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _q40 };
							  if (gimple_simplify_592 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      case ADDR_EXPR:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _p1 };
						    if (gimple_simplify_593 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    case ADDR_EXPR:
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _p1 };
					  if (gimple_simplify_593 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case ADDR_EXPR:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q40 = gimple_assign_rhs1 (_a2);
					_q40 = do_valueize (valueize, _q40);
					switch (TREE_CODE (_q40))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q40))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case ADDR_EXPR:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _q40 };
							  if (gimple_simplify_592 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					      }
					    break;
					  case ADDR_EXPR:
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _q40 };
						if (gimple_simplify_592 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
						  return true;
					      }
					      break;
					    }
				          default:;
				          }
				        break;
				      }
				    case ADDR_EXPR:
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _p1 };
					  if (gimple_simplify_593 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
			  case ADDR_EXPR:
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _p1 };
				if (gimple_simplify_593 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case ADDR_EXPR:
	        {
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case ADDR_EXPR:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _p1, _q30 };
						    if (gimple_simplify_594 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    case ADDR_EXPR:
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _p1, _q30 };
					  if (gimple_simplify_594 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      case ADDR_EXPR:
			        {
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _p1, _p1 };
				    if (gimple_simplify_595 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case ADDR_EXPR:
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _p1, _p1 };
			  if (gimple_simplify_595 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NEGATE_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _q40 };
				    if (FLOAT_TYPE_P (TREE_TYPE (captures[1]))
 || (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[1])))
)
				      {
					gimple_seq *lseq = seq;
					if (lseq
					    && (!single_use (captures[0])
					        || !single_use (captures[2])))
					  lseq = NULL;
					if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2535;
					{
					  res_op->set_op (NEGATE_EXPR, type, 1);
					  {
					    tree _o1[2], _r1;
					    _o1[0] = captures[1];
					    _o1[1] = captures[3];
					    gimple_match_op tem_op (res_op->cond.any_else (), MIN_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
					    tem_op.resimplify (lseq, valueize);
					    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					    if (!_r1) goto next_after_fail2535;
					    res_op->ops[0] = _r1;
					  }
					  res_op->resimplify (lseq, valueize);
					  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1172, __FILE__, __LINE__, true);
					  return true;
					}
next_after_fail2535:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_NOT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _q40 };
				    if (gimple_simplify_596 (res_op, seq, valueize, type, captures, MAX_EXPR, MIN_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case VEC_COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case VEC_COND_EXPR:
			        {
				  tree _q60 = gimple_assign_rhs1 (_a2);
				  _q60 = do_valueize (valueize, _q60);
				  tree _q61 = gimple_assign_rhs2 (_a2);
				  _q61 = do_valueize (valueize, _q61);
				  tree _q62 = gimple_assign_rhs3 (_a2);
				  _q62 = do_valueize (valueize, _q62);
				  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				    {
				      {
					tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1, _q61, _q62 };
					if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (MAX_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]), TREE_TYPE (captures[1]))))
)
					  {
					    gimple_seq *lseq = seq;
					    if (lseq
					        && (!single_use (captures[0])
					            || !single_use (captures[4])))
					      lseq = NULL;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2536;
					    {
					      res_op->set_op (VEC_COND_EXPR, type, 3);
					      res_op->ops[0] = captures[1];
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[2];
						_o1[1] = captures[5];
						gimple_match_op tem_op (res_op->cond.any_else (), MAX_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail2536;
						res_op->ops[1] = _r1;
					      }
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[3];
						_o1[1] = captures[6];
						gimple_match_op tem_op (res_op->cond.any_else (), MAX_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail2536;
						res_op->ops[2] = _r1;
					      }
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1018, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2536:;
					  }
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1 };
		    if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (MAX_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]), TREE_TYPE (captures[1]))))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[0])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2537;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[1];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[2];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), MAX_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2537;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[3];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), MAX_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2537;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1019, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2537:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case ADDR_EXPR:
      {
	switch (TREE_CODE (_p1))
	  {
	  case SSA_NAME:
	    if (gimple *_d1 = get_def (valueize, _p1))
	      {
		if (gassign *_a1 = dyn_cast <gassign *> (_d1))
		  switch (gimple_assign_rhs_code (_a1))
		    {
		    CASE_CONVERT:
		      {
			tree _q30 = gimple_assign_rhs1 (_a1);
			_q30 = do_valueize (valueize, _q30);
			switch (TREE_CODE (_q30))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _q30))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case ADDR_EXPR:
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _p1, _q30 };
					  if (gimple_simplify_594 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
			  case ADDR_EXPR:
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _p1, _q30 };
				if (gimple_simplify_594 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    case ADDR_EXPR:
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _p1, _p1 };
			  if (gimple_simplify_595 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
	      }
	    break;
	  case ADDR_EXPR:
	    {
	      {
		tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _p1, _p1 };
		if (gimple_simplify_595 (res_op, seq, valueize, type, captures, MAX_EXPR, GT_EXPR))
		  return true;
	      }
	      break;
	    }
          default:;
          }
        break;
      }
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_COND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  tree _q32 = gimple_assign_rhs3 (_a1);
		  _q32 = do_valueize (valueize, _q32);
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p1, _q30, _q31, _q32 };
		    if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (MAX_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[3]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[2]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[3]), TREE_TYPE (captures[2]))))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[1])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2538;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[2];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[3];
			    gimple_match_op tem_op (res_op->cond.any_else (), MAX_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2538;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), MAX_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2538;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1020, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2538:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  if (gimple_zero_one_valued_p (_p0, valueize))
    {
      if (gimple_zero_one_valued_p (_p1, valueize))
	{
	  {
	    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	    if (gimple_simplify_597 (res_op, seq, valueize, type, captures, MAX_EXPR, BIT_IOR_EXPR))
	      return true;
	  }
        }
    }
  return false;
}

bool
gimple_simplify_ORDERED_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case VEC_COND_EXPR:
			        {
				  tree _q60 = gimple_assign_rhs1 (_a2);
				  _q60 = do_valueize (valueize, _q60);
				  tree _q61 = gimple_assign_rhs2 (_a2);
				  _q61 = do_valueize (valueize, _q61);
				  tree _q62 = gimple_assign_rhs3 (_a2);
				  _q62 = do_valueize (valueize, _q62);
				  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				    {
				      {
					tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1, _q61, _q62 };
					if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (ORDERED_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]), TREE_TYPE (captures[1]))))
)
					  {
					    gimple_seq *lseq = seq;
					    if (lseq
					        && (!single_use (captures[0])
					            || !single_use (captures[4])))
					      lseq = NULL;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2568;
					    {
					      res_op->set_op (VEC_COND_EXPR, type, 3);
					      res_op->ops[0] = captures[1];
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[2];
						_o1[1] = captures[5];
						gimple_match_op tem_op (res_op->cond.any_else (), ORDERED_EXPR, type, _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail2568;
						res_op->ops[1] = _r1;
					      }
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[3];
						_o1[1] = captures[6];
						gimple_match_op tem_op (res_op->cond.any_else (), ORDERED_EXPR, type, _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail2568;
						res_op->ops[2] = _r1;
					      }
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1018, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2568:;
					  }
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1 };
		    if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (ORDERED_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]), TREE_TYPE (captures[1]))))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[0])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2569;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[1];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[2];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), ORDERED_EXPR, type, _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2569;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[3];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), ORDERED_EXPR, type, _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2569;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1019, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2569:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_COND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  tree _q32 = gimple_assign_rhs3 (_a1);
		  _q32 = do_valueize (valueize, _q32);
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p1, _q30, _q31, _q32 };
		    if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (ORDERED_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[3]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[2]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[3]), TREE_TYPE (captures[2]))))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[1])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2570;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[2];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[3];
			    gimple_match_op tem_op (res_op->cond.any_else (), ORDERED_EXPR, type, _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2570;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), ORDERED_EXPR, type, _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2570;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1020, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2570:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case FLOAT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case FLOAT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q40 };
				    if (gimple_simplify_273 (res_op, seq, valueize, type, captures, ORDERED_EXPR, ORDERED_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NEGATE_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
				    if (gimple_simplify_276 (res_op, seq, valueize, type, captures, ORDERED_EXPR, ORDERED_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		if (CONSTANT_CLASS_P (_p1))
		  {
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		      if (gimple_simplify_277 (res_op, seq, valueize, type, captures, ORDERED_EXPR, ORDERED_EXPR))
		        return true;
		    }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case REAL_CST:
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  if (gimple_simplify_631 (res_op, seq, valueize, type, captures, ORDERED_EXPR))
	    return true;
	}
        break;
      }
    default:;
    }
  {
    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
    if (tree_expr_nan_p (captures[0]) || tree_expr_nan_p (captures[1])
)
      {
	gimple_seq *lseq = seq;
	if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2571;
	{
	  tree tem;
	  tem =  constant_boolean_node (false, type);
	  res_op->set_value (tem);
	  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1181, __FILE__, __LINE__, true);
	  return true;
	}
next_after_fail2571:;
      }
    else
      {
	if (!tree_expr_maybe_nan_p (captures[0]) && !tree_expr_maybe_nan_p (captures[1])
)
	  {
	    gimple_seq *lseq = seq;
	    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2572;
	    {
	      tree tem;
	      tem =  constant_boolean_node (true, type);
	      res_op->set_value (tem);
	      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1182, __FILE__, __LINE__, true);
	      return true;
	    }
next_after_fail2572:;
	  }
      }
  }
  return false;
}

bool
gimple_simplify_CFN_SUB_OVERFLOW (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
		    if (gimple_simplify_634 (res_op, seq, valueize, type, captures, CFN_SUB_OVERFLOW))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _q30 };
		    if (gimple_simplify_635 (res_op, seq, valueize, type, captures, CFN_SUB_OVERFLOW))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_POWF64 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case RDIV_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (real_onep (_q20))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
			if (gimple_simplify_425 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POWF64))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (real_zerop (_p0))
  {
    {
      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
      if (gimple_simplify_426 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POWF64))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_LDEXP (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (real_zerop (_p0))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_647 (res_op, seq, valueize, type, captures))
	  return true;
      }
    }
  if (integer_zerop (_p1))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_648 (res_op, seq, valueize, type, captures))
	  return true;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case REAL_CST:
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  if (!real_isfinite (TREE_REAL_CST_PTR (captures[0]))
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2593;
	      {
		tree tem;
		tem = captures[0];
		res_op->set_value (tem);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1184, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail2593:;
	    }
	}
        break;
      }
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_SCALBLNF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (real_zerop (_p0))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_647 (res_op, seq, valueize, type, captures))
	  return true;
      }
    }
  if (integer_zerop (_p1))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_648 (res_op, seq, valueize, type, captures))
	  return true;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case REAL_CST:
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  if (!real_isfinite (TREE_REAL_CST_PTR (captures[0]))
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2599;
	      {
		tree tem;
		tem = captures[0];
		res_op->set_value (tem);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1184, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail2599:;
	    }
	}
        break;
      }
    default:;
    }
  return false;
}

bool
gimple_simplify_COND_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1, tree _p2)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case PLUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      {
					tree _q50_pops[1];
					if (gimple_nop_convert (_q50, _q50_pops, valueize))
					  {
					    tree _q60 = _q50_pops[0];
					    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					      {
						if (integer_all_onesp (_q51))
						  {
						    if (integer_zerop (_p2))
						      {
							{
							  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q50 };
							  if (gimple_simplify_505 (res_op, seq, valueize, type, captures))
							    return true;
							}
						      }
						  }
					      }
					  }
				      }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_all_onesp (_q51))
					    {
					      if (integer_zerop (_p2))
						{
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q50 };
						    if (gimple_simplify_506 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					        }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    {
		      tree _p1_pops[1];
		      if (gimple_nop_convert (_p1, _p1_pops, valueize))
		        {
			  tree _q50 = _p1_pops[0];
			  switch (TREE_CODE (_q50))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _q50))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case PLUS_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  tree _q61 = gimple_assign_rhs2 (_a2);
					  _q61 = do_valueize (valueize, _q61);
					  if (tree_swap_operands_p (_q60, _q61))
					    std::swap (_q60, _q61);
					  {
					    tree _q60_pops[1];
					    if (gimple_nop_convert (_q60, _q60_pops, valueize))
					      {
						tree _q70 = _q60_pops[0];
						if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						  {
						    if (integer_all_onesp (_q61))
						      {
							if (integer_zerop (_p2))
							  {
							    {
							      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q60 };
							      if (gimple_simplify_505 (res_op, seq, valueize, type, captures))
							        return true;
							    }
							  }
						      }
						  }
					      }
					  }
					  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					    {
					      if (integer_all_onesp (_q61))
						{
						  if (integer_zerop (_p2))
						    {
						      {
							tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q60 };
							if (gimple_simplify_506 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
					        }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
		    }
		  if (gimple_zero_one_valued_p (_q20, valueize))
		    {
		      if (integer_zerop (_q21))
			{
			  switch (TREE_CODE (_p1))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p1))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case BIT_XOR_EXPR:
				        {
					  tree _q50 = gimple_assign_rhs1 (_a2);
					  _q50 = do_valueize (valueize, _q50);
					  tree _q51 = gimple_assign_rhs2 (_a2);
					  _q51 = do_valueize (valueize, _q51);
					  if (tree_swap_operands_p (_q50, _q51))
					    std::swap (_q50, _q51);
					  if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
						if (gimple_simplify_507 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _q50 };
						if (gimple_simplify_507 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      case BIT_IOR_EXPR:
				        {
					  tree _q50 = gimple_assign_rhs1 (_a2);
					  _q50 = do_valueize (valueize, _q50);
					  tree _q51 = gimple_assign_rhs2 (_a2);
					  _q51 = do_valueize (valueize, _q51);
					  if (tree_swap_operands_p (_q50, _q51))
					    std::swap (_q50, _q51);
					  if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
						if (gimple_simplify_507 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _q50 };
						if (gimple_simplify_507 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      case PLUS_EXPR:
				        {
					  tree _q50 = gimple_assign_rhs1 (_a2);
					  _q50 = do_valueize (valueize, _q50);
					  tree _q51 = gimple_assign_rhs2 (_a2);
					  _q51 = do_valueize (valueize, _q51);
					  if (tree_swap_operands_p (_q50, _q51))
					    std::swap (_q50, _q51);
					  if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
						if (gimple_simplify_507 (res_op, seq, valueize, type, captures, PLUS_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _q50 };
						if (gimple_simplify_507 (res_op, seq, valueize, type, captures, PLUS_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case TRUNC_DIV_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (integer_zerop (_p2))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q50, _q51 };
					    if (gimple_simplify_508 (res_op, seq, valueize, type, captures, TRUNC_DIV_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  case CEIL_DIV_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (integer_zerop (_p2))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q50, _q51 };
					    if (gimple_simplify_508 (res_op, seq, valueize, type, captures, CEIL_DIV_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  case FLOOR_DIV_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (integer_zerop (_p2))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q50, _q51 };
					    if (gimple_simplify_508 (res_op, seq, valueize, type, captures, FLOOR_DIV_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  case ROUND_DIV_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (integer_zerop (_p2))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q50, _q51 };
					    if (gimple_simplify_508 (res_op, seq, valueize, type, captures, ROUND_DIV_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  case EXACT_DIV_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (integer_zerop (_p2))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q50, _q51 };
					    if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EXACT_DIV_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  case MULT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      if (integer_zerop (_p2))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q50, _q51 };
					    if (gimple_simplify_509 (res_op, seq, valueize, type, captures, MULT_EXPR))
					      return true;
					  }
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q51, _q50 };
					    if (gimple_simplify_509 (res_op, seq, valueize, type, captures, MULT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  case BIT_AND_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      if (integer_zerop (_p2))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q50, _q51 };
					    if (gimple_simplify_509 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					      return true;
					  }
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q51, _q50 };
					    if (gimple_simplify_509 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      case LE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      if (integer_zerop (_p2))
						{
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						    if (gimple_simplify_510 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					        }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (gimple_zero_one_valued_p (_q20, valueize))
		    {
		      if (integer_zerop (_q21))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case BIT_XOR_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  tree _q61 = gimple_assign_rhs2 (_a2);
					  _q61 = do_valueize (valueize, _q61);
					  if (tree_swap_operands_p (_q60, _q61))
					    std::swap (_q60, _q61);
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q60 };
						if (gimple_simplify_511 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					    }
					  if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q61 };
						if (gimple_simplify_511 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      case BIT_IOR_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  tree _q61 = gimple_assign_rhs2 (_a2);
					  _q61 = do_valueize (valueize, _q61);
					  if (tree_swap_operands_p (_q60, _q61))
					    std::swap (_q60, _q61);
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q60 };
						if (gimple_simplify_511 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
					  if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q61 };
						if (gimple_simplify_511 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      case PLUS_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  tree _q61 = gimple_assign_rhs2 (_a2);
					  _q61 = do_valueize (valueize, _q61);
					  if (tree_swap_operands_p (_q60, _q61))
					    std::swap (_q60, _q61);
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q60 };
						if (gimple_simplify_511 (res_op, seq, valueize, type, captures, PLUS_EXPR))
						  return true;
					      }
					    }
					  if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q61 };
						if (gimple_simplify_511 (res_op, seq, valueize, type, captures, PLUS_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case PLUS_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_512 (res_op, seq, valueize, type, captures, PLUS_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_512 (res_op, seq, valueize, type, captures, PLUS_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case BIT_IOR_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_512 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_512 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case BIT_XOR_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_512 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_512 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case LROTATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_513 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case RROTATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_513 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case LSHIFT_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_513 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case RSHIFT_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_513 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case MINUS_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_513 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case POINTER_PLUS_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_513 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  if (integer_onep (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case TRUNC_DIV_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_514 (res_op, seq, valueize, type, captures, TRUNC_DIV_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case CEIL_DIV_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_514 (res_op, seq, valueize, type, captures, CEIL_DIV_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case FLOOR_DIV_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_514 (res_op, seq, valueize, type, captures, FLOOR_DIV_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case ROUND_DIV_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_514 (res_op, seq, valueize, type, captures, ROUND_DIV_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case EXACT_DIV_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_514 (res_op, seq, valueize, type, captures, EXACT_DIV_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case MULT_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_515 (res_op, seq, valueize, type, captures, MULT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_515 (res_op, seq, valueize, type, captures, MULT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  if (integer_all_onesp (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_AND_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case NE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		if (integer_zerop (_q21))
		  {
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p1))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case PLUS_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a1);
				    _q50 = do_valueize (valueize, _q50);
				    tree _q51 = gimple_assign_rhs2 (_a1);
				    _q51 = do_valueize (valueize, _q51);
				    if (tree_swap_operands_p (_q50, _q51))
				      std::swap (_q50, _q51);
				    {
				      tree _q50_pops[1];
				      if (gimple_nop_convert (_q50, _q50_pops, valueize))
				        {
					  tree _q60 = _q50_pops[0];
					  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					    {
					      if (integer_all_onesp (_q51))
						{
						  if (integer_zerop (_p2))
						    {
						      {
							tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q50 };
							if (gimple_simplify_505 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
					        }
					    }
				        }
				    }
				    if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				      {
					if (integer_all_onesp (_q51))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q50 };
						  if (gimple_simplify_506 (res_op, seq, valueize, type, captures))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  {
		    tree _p1_pops[1];
		    if (gimple_nop_convert (_p1, _p1_pops, valueize))
		      {
			tree _q50 = _p1_pops[0];
			switch (TREE_CODE (_q50))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _q50))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case PLUS_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					tree _q61 = gimple_assign_rhs2 (_a1);
					_q61 = do_valueize (valueize, _q61);
					if (tree_swap_operands_p (_q60, _q61))
					  std::swap (_q60, _q61);
					{
					  tree _q60_pops[1];
					  if (gimple_nop_convert (_q60, _q60_pops, valueize))
					    {
					      tree _q70 = _q60_pops[0];
					      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						{
						  if (integer_all_onesp (_q61))
						    {
						      if (integer_zerop (_p2))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q60 };
							    if (gimple_simplify_505 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					        }
					    }
					}
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    if (integer_all_onesp (_q61))
					      {
						if (integer_zerop (_p2))
						  {
						    {
						      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q60 };
						      if (gimple_simplify_506 (res_op, seq, valueize, type, captures))
						        return true;
						    }
						  }
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		  }
		if (gimple_zero_one_valued_p (_q20, valueize))
		  {
		    if (integer_zerop (_q21))
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p1))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case BIT_XOR_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a1);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a1);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
					      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _q50 };
					      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    case BIT_IOR_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a1);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a1);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
					      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _q50 };
					      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    case PLUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a1);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a1);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
					      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, PLUS_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _q50 };
					      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, PLUS_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		if (integer_zerop (_q21))
		  {
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p1))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case TRUNC_DIV_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a1);
				    _q50 = do_valueize (valueize, _q50);
				    tree _q51 = gimple_assign_rhs2 (_a1);
				    _q51 = do_valueize (valueize, _q51);
				    if (integer_zerop (_p2))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q50, _q51 };
					  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, TRUNC_DIV_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				case CEIL_DIV_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a1);
				    _q50 = do_valueize (valueize, _q50);
				    tree _q51 = gimple_assign_rhs2 (_a1);
				    _q51 = do_valueize (valueize, _q51);
				    if (integer_zerop (_p2))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q50, _q51 };
					  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, CEIL_DIV_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				case FLOOR_DIV_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a1);
				    _q50 = do_valueize (valueize, _q50);
				    tree _q51 = gimple_assign_rhs2 (_a1);
				    _q51 = do_valueize (valueize, _q51);
				    if (integer_zerop (_p2))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q50, _q51 };
					  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, FLOOR_DIV_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				case ROUND_DIV_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a1);
				    _q50 = do_valueize (valueize, _q50);
				    tree _q51 = gimple_assign_rhs2 (_a1);
				    _q51 = do_valueize (valueize, _q51);
				    if (integer_zerop (_p2))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q50, _q51 };
					  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, ROUND_DIV_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				case EXACT_DIV_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a1);
				    _q50 = do_valueize (valueize, _q50);
				    tree _q51 = gimple_assign_rhs2 (_a1);
				    _q51 = do_valueize (valueize, _q51);
				    if (integer_zerop (_p2))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q50, _q51 };
					  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EXACT_DIV_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				case MULT_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a1);
				    _q50 = do_valueize (valueize, _q50);
				    tree _q51 = gimple_assign_rhs2 (_a1);
				    _q51 = do_valueize (valueize, _q51);
				    if (tree_swap_operands_p (_q50, _q51))
				      std::swap (_q50, _q51);
				    if (integer_zerop (_p2))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q50, _q51 };
					  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, MULT_EXPR))
					    return true;
					}
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q51, _q50 };
					  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, MULT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				case BIT_AND_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a1);
				    _q50 = do_valueize (valueize, _q50);
				    tree _q51 = gimple_assign_rhs2 (_a1);
				    _q51 = do_valueize (valueize, _q51);
				    if (tree_swap_operands_p (_q50, _q51))
				      std::swap (_q50, _q51);
				    if (integer_zerop (_p2))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q50, _q51 };
					  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					    return true;
					}
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _p1, _q51, _q50 };
					  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
	      }
	  }
        break;
      }
    case LE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (integer_zerop (_q21))
		  {
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p1))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a1);
				    _q50 = do_valueize (valueize, _q50);
				    if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				      {
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						  if (gimple_simplify_510 (res_op, seq, valueize, type, captures))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
	      }
	  }
        break;
      }
    case EQ_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		if (gimple_zero_one_valued_p (_q20, valueize))
		  {
		    if (integer_zerop (_q21))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case BIT_XOR_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					tree _q61 = gimple_assign_rhs2 (_a1);
					_q61 = do_valueize (valueize, _q61);
					if (tree_swap_operands_p (_q60, _q61))
					  std::swap (_q60, _q61);
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q60 };
					      if (gimple_simplify_511 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					  }
					if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q61 };
					      if (gimple_simplify_511 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    case BIT_IOR_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					tree _q61 = gimple_assign_rhs2 (_a1);
					_q61 = do_valueize (valueize, _q61);
					if (tree_swap_operands_p (_q60, _q61))
					  std::swap (_q60, _q61);
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q60 };
					      if (gimple_simplify_511 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
					if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q61 };
					      if (gimple_simplify_511 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    case PLUS_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					tree _q61 = gimple_assign_rhs2 (_a1);
					_q61 = do_valueize (valueize, _q61);
					if (tree_swap_operands_p (_q60, _q61))
					  std::swap (_q60, _q61);
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q60 };
					      if (gimple_simplify_511 (res_op, seq, valueize, type, captures, PLUS_EXPR))
					        return true;
					    }
					  }
					if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q61 };
					      if (gimple_simplify_511 (res_op, seq, valueize, type, captures, PLUS_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		if (integer_zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case PLUS_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if (tree_swap_operands_p (_q60, _q61))
				      std::swap (_q60, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, PLUS_EXPR))
					        return true;
					    }
					  }
				      }
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, PLUS_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case BIT_IOR_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if (tree_swap_operands_p (_q60, _q61))
				      std::swap (_q60, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
				      }
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case BIT_XOR_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if (tree_swap_operands_p (_q60, _q61))
				      std::swap (_q60, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					  }
				      }
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case LROTATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_513 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case RROTATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_513 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case LSHIFT_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_513 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case RSHIFT_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_513 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case MINUS_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_513 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case POINTER_PLUS_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_513 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
		if (integer_onep (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case TRUNC_DIV_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_514 (res_op, seq, valueize, type, captures, TRUNC_DIV_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case CEIL_DIV_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_514 (res_op, seq, valueize, type, captures, CEIL_DIV_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case FLOOR_DIV_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_514 (res_op, seq, valueize, type, captures, FLOOR_DIV_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case ROUND_DIV_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_514 (res_op, seq, valueize, type, captures, ROUND_DIV_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case EXACT_DIV_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_514 (res_op, seq, valueize, type, captures, EXACT_DIV_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case MULT_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if (tree_swap_operands_p (_q60, _q61))
				      std::swap (_q60, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_515 (res_op, seq, valueize, type, captures, MULT_EXPR))
					        return true;
					    }
					  }
				      }
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_515 (res_op, seq, valueize, type, captures, MULT_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
		if (integer_all_onesp (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case BIT_AND_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if (tree_swap_operands_p (_q60, _q61))
				      std::swap (_q60, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					        return true;
					    }
					  }
				      }
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
	      }
	  }
        break;
      }
    case INTEGER_CST:
      {
	{
	  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _p2 };
	  if (integer_zerop (captures[0])
)
	    {
	      if (!VOID_TYPE_P (TREE_TYPE (captures[2])) || VOID_TYPE_P (type)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2634;
		  {
		    tree tem;
		    tem = captures[2];
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1185, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail2634:;
		}
	    }
	  else
	    {
	      if (!VOID_TYPE_P (TREE_TYPE (captures[1])) || VOID_TYPE_P (type)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2635;
		  {
		    tree tem;
		    tem = captures[1];
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1186, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail2635:;
		}
	    }
	}
        break;
      }
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case INTEGER_CST:
      {
	switch (TREE_CODE (_p2))
	  {
	  case INTEGER_CST:
	    {
	      {
		tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _p2 };
		if (integer_zerop (captures[2])
)
		  {
		    if (integer_onep (captures[1])
)
		      {
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2636;
			{
			  res_op->set_op (NOP_EXPR, type, 1);
			  {
			    tree _o1[1], _r1;
			    _o1[0] = captures[0];
			    if (COMPARISON_CLASS_P (_o1[0]))
			      {
			        if (!seq) return false;
			        _o1[0] = gimple_build (seq, TREE_CODE (_o1[0]), TREE_TYPE (_o1[0]), TREE_OPERAND (_o1[0], 0), TREE_OPERAND (_o1[0], 1));
			      }
			    if (boolean_type_node != TREE_TYPE (_o1[0])
			        && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o1[0])))
			      {
				gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o1[0]);
				tem_op.resimplify (lseq, valueize);
				_r1 = maybe_push_res_to_seq (&tem_op, lseq);
				if (!_r1) goto next_after_fail2636;
			      }
			    else
			      _r1 = _o1[0];
			    res_op->ops[0] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1187, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2636:;
		      }
		    else
		      {
			if (INTEGRAL_TYPE_P (type) && integer_all_onesp (captures[1])
)
			  {
			    if (TYPE_PRECISION (type) == 1
)
			      {
				gimple_seq *lseq = seq;
				if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2637;
				{
				  res_op->set_op (NOP_EXPR, type, 1);
				  {
				    tree _o1[1], _r1;
				    _o1[0] = captures[0];
				    if (COMPARISON_CLASS_P (_o1[0]))
				      {
				        if (!seq) return false;
				        _o1[0] = gimple_build (seq, TREE_CODE (_o1[0]), TREE_TYPE (_o1[0]), TREE_OPERAND (_o1[0], 0), TREE_OPERAND (_o1[0], 1));
				      }
				    if (boolean_type_node != TREE_TYPE (_o1[0])
				        && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o1[0])))
				      {
					gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o1[0]);
					tem_op.resimplify (lseq, valueize);
					_r1 = maybe_push_res_to_seq (&tem_op, lseq);
					if (!_r1) goto next_after_fail2637;
				      }
				    else
				      _r1 = _o1[0];
				    res_op->ops[0] = _r1;
				  }
				  res_op->resimplify (lseq, valueize);
				  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1188, __FILE__, __LINE__, true);
				  return true;
				}
next_after_fail2637:;
			      }
			    else
			      {
				if (TREE_CODE (type) == BOOLEAN_TYPE
)
				  {
				    {
 tree intt = build_nonstandard_integer_type (TYPE_PRECISION (type),
 TYPE_UNSIGNED (type));
					gimple_seq *lseq = seq;
					if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2638;
					{
					  res_op->set_op (NOP_EXPR, type, 1);
					  {
					    tree _o1[1], _r1;
					    {
					      tree _o2[1], _r2;
					      {
						tree _o3[1], _r3;
						_o3[0] = captures[0];
						if (COMPARISON_CLASS_P (_o3[0]))
						  {
						    if (!seq) return false;
						    _o3[0] = gimple_build (seq, TREE_CODE (_o3[0]), TREE_TYPE (_o3[0]), TREE_OPERAND (_o3[0], 0), TREE_OPERAND (_o3[0], 1));
						  }
						if (boolean_type_node != TREE_TYPE (_o3[0])
						    && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o3[0])))
						  {
						    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o3[0]);
						    tem_op.resimplify (lseq, valueize);
						    _r3 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r3) goto next_after_fail2638;
						  }
						else
						  _r3 = _o3[0];
						_o2[0] = _r3;
					      }
					      if (intt != TREE_TYPE (_o2[0])
					          && !useless_type_conversion_p (intt, TREE_TYPE (_o2[0])))
						{
						  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, intt, _o2[0]);
						  tem_op.resimplify (lseq, valueize);
						  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						  if (!_r2) goto next_after_fail2638;
					        }
					      else
					        _r2 = _o2[0];
					      _o1[0] = _r2;
					    }
					    gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
					    tem_op.resimplify (lseq, valueize);
					    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					    if (!_r1) goto next_after_fail2638;
					    res_op->ops[0] = _r1;
					  }
					  res_op->resimplify (lseq, valueize);
					  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1189, __FILE__, __LINE__, true);
					  return true;
					}
next_after_fail2638:;
				    }
				  }
				else
				  {
				    gimple_seq *lseq = seq;
				    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2639;
				    {
				      res_op->set_op (NEGATE_EXPR, type, 1);
				      {
					tree _o1[1], _r1;
					{
					  tree _o2[1], _r2;
					  _o2[0] = captures[0];
					  if (COMPARISON_CLASS_P (_o2[0]))
					    {
					      if (!seq) return false;
					      _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
					    }
					  if (boolean_type_node != TREE_TYPE (_o2[0])
					      && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o2[0])))
					    {
					      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o2[0]);
					      tem_op.resimplify (lseq, valueize);
					      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r2) goto next_after_fail2639;
					    }
					  else
					    _r2 = _o2[0];
					  _o1[0] = _r2;
					}
					if (type != TREE_TYPE (_o1[0])
					    && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
					  {
					    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
					    tem_op.resimplify (lseq, valueize);
					    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					    if (!_r1) goto next_after_fail2639;
					  }
					else
					  _r1 = _o1[0];
					res_op->ops[0] = _r1;
				      }
				      res_op->resimplify (lseq, valueize);
				      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1190, __FILE__, __LINE__, true);
				      return true;
				    }
next_after_fail2639:;
				  }
			      }
			  }
			else
			  {
			    if (INTEGRAL_TYPE_P (type) && integer_pow2p (captures[1])
)
			      {
				{
 tree shift = build_int_cst (integer_type_node, tree_log2 (captures[1]));
				    gimple_seq *lseq = seq;
				    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2640;
				    {
				      res_op->set_op (LSHIFT_EXPR, type, 2);
				      {
					tree _o1[1], _r1;
					{
					  tree _o2[1], _r2;
					  _o2[0] = captures[0];
					  if (COMPARISON_CLASS_P (_o2[0]))
					    {
					      if (!seq) return false;
					      _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
					    }
					  if (boolean_type_node != TREE_TYPE (_o2[0])
					      && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o2[0])))
					    {
					      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o2[0]);
					      tem_op.resimplify (lseq, valueize);
					      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r2) goto next_after_fail2640;
					    }
					  else
					    _r2 = _o2[0];
					  _o1[0] = _r2;
					}
					if (type != TREE_TYPE (_o1[0])
					    && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
					  {
					    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
					    tem_op.resimplify (lseq, valueize);
					    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					    if (!_r1) goto next_after_fail2640;
					  }
					else
					  _r1 = _o1[0];
					res_op->ops[0] = _r1;
				      }
				      res_op->ops[1] =  shift;
				      res_op->resimplify (lseq, valueize);
				      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1191, __FILE__, __LINE__, true);
				      return true;
				    }
next_after_fail2640:;
				}
			      }
			  }
		      }
		  }
		else
		  {
		    if (integer_zerop (captures[1])
)
		      {
			if (integer_onep (captures[2])
)
			  {
			    gimple_seq *lseq = seq;
			    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2641;
			    {
			      res_op->set_op (NOP_EXPR, type, 1);
			      {
				tree _o1[2], _r1;
				{
				  tree _o2[1], _r2;
				  _o2[0] = captures[0];
				  if (COMPARISON_CLASS_P (_o2[0]))
				    {
				      if (!seq) return false;
				      _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
				    }
				  if (boolean_type_node != TREE_TYPE (_o2[0])
				      && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o2[0])))
				    {
				      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o2[0]);
				      tem_op.resimplify (lseq, valueize);
				      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
				      if (!_r2) goto next_after_fail2641;
				    }
				  else
				    _r2 = _o2[0];
				  _o1[0] = _r2;
				}
				_o1[1] =  boolean_true_node;
				gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				tem_op.resimplify (lseq, valueize);
				_r1 = maybe_push_res_to_seq (&tem_op, lseq);
				if (!_r1) goto next_after_fail2641;
				res_op->ops[0] = _r1;
			      }
			      res_op->resimplify (lseq, valueize);
			      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1192, __FILE__, __LINE__, true);
			      return true;
			    }
next_after_fail2641:;
			  }
			else
			  {
			    if (INTEGRAL_TYPE_P (type) && integer_all_onesp (captures[2])
)
			      {
				if (TYPE_PRECISION (type) == 1
)
				  {
				    gimple_seq *lseq = seq;
				    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2642;
				    {
				      res_op->set_op (NOP_EXPR, type, 1);
				      {
					tree _o1[2], _r1;
					{
					  tree _o2[1], _r2;
					  _o2[0] = captures[0];
					  if (COMPARISON_CLASS_P (_o2[0]))
					    {
					      if (!seq) return false;
					      _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
					    }
					  if (boolean_type_node != TREE_TYPE (_o2[0])
					      && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o2[0])))
					    {
					      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o2[0]);
					      tem_op.resimplify (lseq, valueize);
					      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r2) goto next_after_fail2642;
					    }
					  else
					    _r2 = _o2[0];
					  _o1[0] = _r2;
					}
					_o1[1] =  boolean_true_node;
					gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
					tem_op.resimplify (lseq, valueize);
					_r1 = maybe_push_res_to_seq (&tem_op, lseq);
					if (!_r1) goto next_after_fail2642;
					res_op->ops[0] = _r1;
				      }
				      res_op->resimplify (lseq, valueize);
				      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1193, __FILE__, __LINE__, true);
				      return true;
				    }
next_after_fail2642:;
				  }
				else
				  {
				    if (TREE_CODE (type) == BOOLEAN_TYPE
)
				      {
					{
 tree intt = build_nonstandard_integer_type (TYPE_PRECISION (type),
 TYPE_UNSIGNED (type));
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2643;
					    {
					      res_op->set_op (NOP_EXPR, type, 1);
					      {
						tree _o1[1], _r1;
						{
						  tree _o2[1], _r2;
						  {
						    tree _o3[2], _r3;
						    {
						      tree _o4[1], _r4;
						      _o4[0] = captures[0];
						      if (COMPARISON_CLASS_P (_o4[0]))
						        {
						          if (!seq) return false;
						          _o4[0] = gimple_build (seq, TREE_CODE (_o4[0]), TREE_TYPE (_o4[0]), TREE_OPERAND (_o4[0], 0), TREE_OPERAND (_o4[0], 1));
						        }
						      if (boolean_type_node != TREE_TYPE (_o4[0])
						          && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o4[0])))
							{
							  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o4[0]);
							  tem_op.resimplify (lseq, valueize);
							  _r4 = maybe_push_res_to_seq (&tem_op, lseq);
							  if (!_r4) goto next_after_fail2643;
						        }
						      else
						        _r4 = _o4[0];
						      _o3[0] = _r4;
						    }
						    _o3[1] =  boolean_true_node;
						    gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o3[0]), _o3[0], _o3[1]);
						    tem_op.resimplify (lseq, valueize);
						    _r3 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r3) goto next_after_fail2643;
						    _o2[0] = _r3;
						  }
						  if (intt != TREE_TYPE (_o2[0])
						      && !useless_type_conversion_p (intt, TREE_TYPE (_o2[0])))
						    {
						      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, intt, _o2[0]);
						      tem_op.resimplify (lseq, valueize);
						      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r2) goto next_after_fail2643;
						    }
						  else
						    _r2 = _o2[0];
						  _o1[0] = _r2;
						}
						gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
						tem_op.resimplify (lseq, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, lseq);
						if (!_r1) goto next_after_fail2643;
						res_op->ops[0] = _r1;
					      }
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1194, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2643:;
					}
				      }
				    else
				      {
					gimple_seq *lseq = seq;
					if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2644;
					{
					  res_op->set_op (NEGATE_EXPR, type, 1);
					  {
					    tree _o1[1], _r1;
					    {
					      tree _o2[2], _r2;
					      {
						tree _o3[1], _r3;
						_o3[0] = captures[0];
						if (COMPARISON_CLASS_P (_o3[0]))
						  {
						    if (!seq) return false;
						    _o3[0] = gimple_build (seq, TREE_CODE (_o3[0]), TREE_TYPE (_o3[0]), TREE_OPERAND (_o3[0], 0), TREE_OPERAND (_o3[0], 1));
						  }
						if (boolean_type_node != TREE_TYPE (_o3[0])
						    && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o3[0])))
						  {
						    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o3[0]);
						    tem_op.resimplify (lseq, valueize);
						    _r3 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r3) goto next_after_fail2644;
						  }
						else
						  _r3 = _o3[0];
						_o2[0] = _r3;
					      }
					      _o2[1] =  boolean_true_node;
					      gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o2[0]), _o2[0], _o2[1]);
					      tem_op.resimplify (lseq, valueize);
					      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r2) goto next_after_fail2644;
					      _o1[0] = _r2;
					    }
					    if (type != TREE_TYPE (_o1[0])
					        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
					      {
						gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
						tem_op.resimplify (lseq, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, lseq);
						if (!_r1) goto next_after_fail2644;
					      }
					    else
					      _r1 = _o1[0];
					    res_op->ops[0] = _r1;
					  }
					  res_op->resimplify (lseq, valueize);
					  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1195, __FILE__, __LINE__, true);
					  return true;
					}
next_after_fail2644:;
				      }
				  }
			      }
			    else
			      {
				if (INTEGRAL_TYPE_P (type) && integer_pow2p (captures[2])
)
				  {
				    {
 tree shift = build_int_cst (integer_type_node, tree_log2 (captures[2]));
					gimple_seq *lseq = seq;
					if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2645;
					{
					  res_op->set_op (LSHIFT_EXPR, type, 2);
					  {
					    tree _o1[1], _r1;
					    {
					      tree _o2[2], _r2;
					      {
						tree _o3[1], _r3;
						_o3[0] = captures[0];
						if (COMPARISON_CLASS_P (_o3[0]))
						  {
						    if (!seq) return false;
						    _o3[0] = gimple_build (seq, TREE_CODE (_o3[0]), TREE_TYPE (_o3[0]), TREE_OPERAND (_o3[0], 0), TREE_OPERAND (_o3[0], 1));
						  }
						if (boolean_type_node != TREE_TYPE (_o3[0])
						    && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o3[0])))
						  {
						    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o3[0]);
						    tem_op.resimplify (lseq, valueize);
						    _r3 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r3) goto next_after_fail2645;
						  }
						else
						  _r3 = _o3[0];
						_o2[0] = _r3;
					      }
					      _o2[1] =  boolean_true_node;
					      gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o2[0]), _o2[0], _o2[1]);
					      tem_op.resimplify (lseq, valueize);
					      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r2) goto next_after_fail2645;
					      _o1[0] = _r2;
					    }
					    if (type != TREE_TYPE (_o1[0])
					        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
					      {
						gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
						tem_op.resimplify (lseq, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, lseq);
						if (!_r1) goto next_after_fail2645;
					      }
					    else
					      _r1 = _o1[0];
					    res_op->ops[0] = _r1;
					  }
					  res_op->ops[1] =  shift;
					  res_op->resimplify (lseq, valueize);
					  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1196, __FILE__, __LINE__, true);
					  return true;
					}
next_after_fail2645:;
				    }
				  }
			      }
			  }
		      }
		  }
	      }
	      break;
	    }
          default:;
          }
        break;
      }
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case GT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_onep (_q21))
		    {
		      if (integer_zerop (_p1))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      CASE_CONVERT:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q60 };
					    if (gimple_simplify_517 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
			    if (gimple_simplify_517 (res_op, seq, valueize, type, captures))
			      return true;
			  }
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GT_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GT_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case PLUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if (tree_swap_operands_p (_q60, _q61))
							  std::swap (_q60, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GT_EXPR, PLUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    case MINUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GT_EXPR, MINUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GT_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case INTEGER_CST:
			        {
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GT_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  }
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case PLUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GT_EXPR, PLUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    case MINUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GT_EXPR, MINUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
					  return true;
				      }
				    }
			        }
			    }
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
			      return true;
			  }
		        }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MIN_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case MAX_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, NE_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, NE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
			{
			  switch (TREE_CODE (_q21))
			    {
			    case INTEGER_CST:
			      {
				switch (TREE_CODE (_p1))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p2))
				        {
					case INTEGER_CST:
					  {
					    {
					      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
					      if (gimple_simplify_526 (res_op, seq, valueize, type, captures, NE_EXPR))
					        return true;
					    }
					    break;
					  }
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
			}
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, NE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case INTEGER_CST:
			        {
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, NE_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  }
		        break;
		      }
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
					  return true;
				      }
				    }
			        }
			    }
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
			      return true;
			  }
		        }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_527 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_527 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				    }
			          break;
			        }
			      case BIT_XOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_528 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_528 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				    }
			          break;
			        }
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
						  return true;
					      }
					    }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
						  return true;
					      }
					    }
				        }
				    }
			          break;
			        }
			      case BIT_IOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
				        }
				    }
			          break;
			        }
			      case MIN_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MIN_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MIN_EXPR))
						  return true;
					      }
					    }
				        }
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MIN_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MIN_EXPR))
						  return true;
					      }
					    }
				        }
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case MAX_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MAX_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MAX_EXPR))
						  return true;
					      }
					    }
				        }
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MAX_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MAX_EXPR))
						  return true;
					      }
					    }
				        }
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case MULT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MULT_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      if ((_q81 == _q20 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q20, 0) && types_match (_q81, _q20)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
								    if (gimple_simplify_530 (res_op, seq, valueize, type, captures, MULT_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MULT_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      if ((_q81 == _q21 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q21, 0) && types_match (_q81, _q21)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
								    if (gimple_simplify_531 (res_op, seq, valueize, type, captures, MULT_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      case PLUS_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case PLUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      if ((_q81 == _q20 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q20, 0) && types_match (_q81, _q20)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
								    if (gimple_simplify_532 (res_op, seq, valueize, type, captures, PLUS_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      case MULT_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      if (uniform_integer_cst_p (_q81))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q81 };
								    if (gimple_simplify_533 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      if (uniform_integer_cst_p (_q81))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q81 };
								    if (gimple_simplify_534 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case PLUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      if ((_q81 == _q21 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q21, 0) && types_match (_q81, _q21)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
								    if (gimple_simplify_535 (res_op, seq, valueize, type, captures, PLUS_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      case MULT_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      if (uniform_integer_cst_p (_q81))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q81 };
								    if (gimple_simplify_536 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      if (uniform_integer_cst_p (_q81))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q81 };
								    if (gimple_simplify_537 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, EQ_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, EQ_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
			{
			  switch (TREE_CODE (_q21))
			    {
			    case INTEGER_CST:
			      {
				switch (TREE_CODE (_p1))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p2))
				        {
					case INTEGER_CST:
					  {
					    {
					      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
					      if (gimple_simplify_526 (res_op, seq, valueize, type, captures, EQ_EXPR))
					        return true;
					    }
					    break;
					  }
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
			}
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, EQ_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case INTEGER_CST:
			        {
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, EQ_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  }
		        break;
		      }
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			        }
			    }
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case LT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LT_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LT_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case PLUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if (tree_swap_operands_p (_q60, _q61))
							  std::swap (_q60, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LT_EXPR, PLUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    case MINUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LT_EXPR, MINUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LT_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case INTEGER_CST:
			        {
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LT_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  }
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case PLUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LT_EXPR, PLUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    case MINUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LT_EXPR, MINUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
					  return true;
				      }
				    }
			        }
			    }
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
			      return true;
			  }
		        }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MIN_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case MAX_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LE_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case PLUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if (tree_swap_operands_p (_q60, _q61))
							  std::swap (_q60, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LE_EXPR, PLUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    case MINUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LE_EXPR, MINUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case INTEGER_CST:
			        {
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LE_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  }
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case PLUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LE_EXPR, PLUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    case MINUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LE_EXPR, MINUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
					  return true;
				      }
				    }
			        }
			    }
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
			      return true;
			  }
		        }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MIN_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case MAX_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case GE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GE_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case PLUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if (tree_swap_operands_p (_q60, _q61))
							  std::swap (_q60, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GE_EXPR, PLUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    case MINUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GE_EXPR, MINUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case INTEGER_CST:
			        {
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GE_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  }
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case PLUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GE_EXPR, PLUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    case MINUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GE_EXPR, MINUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
					  return true;
				      }
				    }
			        }
			    }
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
			      return true;
			  }
		        }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MIN_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case MAX_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
					if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case UNLE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					  return true;
				      }
				    }
			        }
			    }
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case UNLT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					  return true;
				      }
				    }
			        }
			    }
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case UNGE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					  return true;
				      }
				    }
			        }
			    }
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case UNGT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					  return true;
				      }
				    }
			        }
			    }
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case UNEQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					  return true;
				      }
				    }
			        }
			    }
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case LTGT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					  return true;
				      }
				    }
			        }
			    }
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				    return true;
				}
			      }
			  }
		      }
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case GT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (integer_onep (_q21))
		  {
		    if (integer_zerop (_p1))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q60 };
					  if (gimple_simplify_517 (res_op, seq, valueize, type, captures))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
			  if (gimple_simplify_517 (res_op, seq, valueize, type, captures))
			    return true;
			}
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GT_EXPR))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case PLUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if (tree_swap_operands_p (_q60, _q61))
						        std::swap (_q60, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GT_EXPR, PLUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  case MINUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GT_EXPR, MINUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		switch (TREE_CODE (_q21))
		  {
		  case INTEGER_CST:
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case INTEGER_CST:
			      {
				{
				  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GT_EXPR))
				    return true;
				}
			        break;
			      }
			    default:;
			    }
		        }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  case PLUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GT_EXPR, PLUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  case MINUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GT_EXPR, MINUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      break;
		    }
	          default:;
	          }
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
				        return true;
				    }
				  }
			      }
			  }
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
			    return true;
			}
		      }
		  }
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MIN_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    case MAX_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case NE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, NE_EXPR))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
		      }
		      {
			switch (TREE_CODE (_q21))
			  {
			  case INTEGER_CST:
			    {
			      switch (TREE_CODE (_p1))
			        {
				case INTEGER_CST:
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case INTEGER_CST:
				        {
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
					    if (gimple_simplify_526 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
				    break;
				  }
			        default:;
			        }
			      break;
			    }
		          default:;
		          }
		      }
		    break;
	          default:;
	          }
		switch (TREE_CODE (_q21))
		  {
		  case INTEGER_CST:
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case INTEGER_CST:
			      {
				{
				  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, NE_EXPR))
				    return true;
				}
			        break;
			      }
			    default:;
			    }
		        }
		      break;
		    }
	          default:;
	          }
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, NE_EXPR))
				        return true;
				    }
				  }
			      }
			  }
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, NE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, NE_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, NE_EXPR))
			    return true;
			}
		      }
		  }
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					if (integer_zerop (_p2))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_527 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					if (integer_zerop (_p2))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_527 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				  }
			        break;
			      }
			    case BIT_XOR_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					if (integer_zerop (_p2))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_528 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					if (integer_zerop (_p2))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_528 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				  }
			        break;
			      }
			    case BIT_AND_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					        return true;
					    }
					  }
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					        return true;
					    }
					  }
				      }
				  }
			        break;
			      }
			    case BIT_IOR_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
				      }
				  }
			        break;
			      }
			    case MIN_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MIN_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MIN_EXPR))
					        return true;
					    }
					  }
				      }
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MIN_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MIN_EXPR))
					        return true;
					    }
					  }
				      }
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			        break;
			      }
			    case MAX_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MAX_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MAX_EXPR))
					        return true;
					    }
					  }
				      }
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MAX_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_529 (res_op, seq, valueize, type, captures, MAX_EXPR))
					        return true;
					    }
					  }
				      }
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			        break;
			      }
			    case MULT_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MULT_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if (tree_swap_operands_p (_q80, _q81))
							  std::swap (_q80, _q81);
							if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							  {
							    if ((_q81 == _q20 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q20, 0) && types_match (_q81, _q20)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
								  if (gimple_simplify_530 (res_op, seq, valueize, type, captures, MULT_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MULT_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if (tree_swap_operands_p (_q80, _q81))
							  std::swap (_q80, _q81);
							if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							  {
							    if ((_q81 == _q21 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q21, 0) && types_match (_q81, _q21)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
								  if (gimple_simplify_531 (res_op, seq, valueize, type, captures, MULT_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    case PLUS_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case PLUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if (tree_swap_operands_p (_q80, _q81))
							  std::swap (_q80, _q81);
							if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							  {
							    if ((_q81 == _q20 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q20, 0) && types_match (_q81, _q20)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
								  if (gimple_simplify_532 (res_op, seq, valueize, type, captures, PLUS_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    case MULT_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if (tree_swap_operands_p (_q80, _q81))
							  std::swap (_q80, _q81);
							if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							  {
							    if (uniform_integer_cst_p (_q81))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q81 };
								  if (gimple_simplify_533 (res_op, seq, valueize, type, captures))
								    return true;
								}
							      }
							  }
							if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							  {
							    if (uniform_integer_cst_p (_q81))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q81 };
								  if (gimple_simplify_534 (res_op, seq, valueize, type, captures))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case PLUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if (tree_swap_operands_p (_q80, _q81))
							  std::swap (_q80, _q81);
							if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							  {
							    if ((_q81 == _q21 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q21, 0) && types_match (_q81, _q21)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
								  if (gimple_simplify_535 (res_op, seq, valueize, type, captures, PLUS_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    case MULT_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if (tree_swap_operands_p (_q80, _q81))
							  std::swap (_q80, _q81);
							if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							  {
							    if (uniform_integer_cst_p (_q81))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q81 };
								  if (gimple_simplify_536 (res_op, seq, valueize, type, captures))
								    return true;
								}
							      }
							  }
							if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							  {
							    if (uniform_integer_cst_p (_q81))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q81 };
								  if (gimple_simplify_537 (res_op, seq, valueize, type, captures))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case EQ_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, EQ_EXPR))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
		      }
		      {
			switch (TREE_CODE (_q21))
			  {
			  case INTEGER_CST:
			    {
			      switch (TREE_CODE (_p1))
			        {
				case INTEGER_CST:
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case INTEGER_CST:
				        {
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
					    if (gimple_simplify_526 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
				    break;
				  }
			        default:;
			        }
			      break;
			    }
		          default:;
		          }
		      }
		    break;
	          default:;
	          }
		switch (TREE_CODE (_q21))
		  {
		  case INTEGER_CST:
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case INTEGER_CST:
			      {
				{
				  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, EQ_EXPR))
				    return true;
				}
			        break;
			      }
			    default:;
			    }
		        }
		      break;
		    }
	          default:;
	          }
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, EQ_EXPR))
				        return true;
				    }
				  }
			      }
			  }
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, EQ_EXPR))
			    return true;
			}
		      }
		  }
	      }
	  }
        break;
      }
    case LT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LT_EXPR))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case PLUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if (tree_swap_operands_p (_q60, _q61))
						        std::swap (_q60, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LT_EXPR, PLUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  case MINUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LT_EXPR, MINUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		switch (TREE_CODE (_q21))
		  {
		  case INTEGER_CST:
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case INTEGER_CST:
			      {
				{
				  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LT_EXPR))
				    return true;
				}
			        break;
			      }
			    default:;
			    }
		        }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  case PLUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LT_EXPR, PLUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  case MINUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LT_EXPR, MINUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      break;
		    }
	          default:;
	          }
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LT_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GT_EXPR))
				        return true;
				    }
				  }
			      }
			  }
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GT_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LT_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LT_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GT_EXPR))
			    return true;
			}
		      }
		  }
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MIN_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    case MAX_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case LE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LE_EXPR))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case PLUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if (tree_swap_operands_p (_q60, _q61))
						        std::swap (_q60, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LE_EXPR, PLUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  case MINUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LE_EXPR, MINUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		switch (TREE_CODE (_q21))
		  {
		  case INTEGER_CST:
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case INTEGER_CST:
			      {
				{
				  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, LE_EXPR))
				    return true;
				}
			        break;
			      }
			    default:;
			    }
		        }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  case PLUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LE_EXPR, PLUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  case MINUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_519 (res_op, seq, valueize, type, captures, LE_EXPR, MINUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      break;
		    }
	          default:;
	          }
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
				        return true;
				    }
				  }
			      }
			  }
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
			    return true;
			}
		      }
		  }
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MIN_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    case MAX_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case GE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GE_EXPR))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case PLUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if (tree_swap_operands_p (_q60, _q61))
						        std::swap (_q60, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GE_EXPR, PLUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  case MINUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GE_EXPR, MINUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		switch (TREE_CODE (_q21))
		  {
		  case INTEGER_CST:
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case INTEGER_CST:
			      {
				{
				  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, GE_EXPR))
				    return true;
				}
			        break;
			      }
			    default:;
			    }
		        }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  case PLUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GE_EXPR, PLUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  case MINUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_519 (res_op, seq, valueize, type, captures, GE_EXPR, MINUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      break;
		    }
	          default:;
	          }
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, GE_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LE_EXPR))
				        return true;
				    }
				  }
			      }
			  }
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, GE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LE_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, GE_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, GE_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LE_EXPR))
			    return true;
			}
		      }
		  }
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MIN_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    case MAX_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_524 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
				      if (gimple_simplify_525 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case UNLE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				        return true;
				    }
				  }
			      }
			  }
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
			    return true;
			}
		      }
		  }
	      }
	  }
        break;
      }
    case UNLT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				        return true;
				    }
				  }
			      }
			  }
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
			    return true;
			}
		      }
		  }
	      }
	  }
        break;
      }
    case UNGE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				        return true;
				    }
				  }
			      }
			  }
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGE_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLE_EXPR))
			    return true;
			}
		      }
		  }
	      }
	  }
        break;
      }
    case UNGT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				        return true;
				    }
				  }
			      }
			  }
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNGT_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNLT_EXPR))
			    return true;
			}
		      }
		  }
	      }
	  }
        break;
      }
    case UNEQ_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				        return true;
				    }
				  }
			      }
			  }
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
			    return true;
			}
		      }
		  }
	      }
	  }
        break;
      }
    case LTGT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_520 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				        return true;
				    }
				  }
			      }
			  }
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_521 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_522 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				  return true;
			      }
			    }
		        }
		    }
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_523 (res_op, seq, valueize, type, captures, LTGT_EXPR))
			    return true;
			}
		      }
		  }
	      }
	  }
        break;
      }
    default:;
    }
  if (gimple_zero_one_valued_p (_p1, valueize))
    {
      if (gimple_zero_one_valued_p (_p2, valueize))
	{
	  {
	    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _p2 };
	    if (integer_zerop (captures[2])
)
	      {
		gimple_seq *lseq = seq;
		if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2646;
		{
		  res_op->set_op (BIT_AND_EXPR, type, 2);
		  {
		    tree _o1[1], _r1;
		    _o1[0] = captures[0];
		    if (COMPARISON_CLASS_P (_o1[0]))
		      {
		        if (!seq) return false;
		        _o1[0] = gimple_build (seq, TREE_CODE (_o1[0]), TREE_TYPE (_o1[0]), TREE_OPERAND (_o1[0], 0), TREE_OPERAND (_o1[0], 1));
		      }
		    if (type != TREE_TYPE (_o1[0])
		        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
		      {
			gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
			tem_op.resimplify (lseq, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r1) goto next_after_fail2646;
		      }
		    else
		      _r1 = _o1[0];
		    res_op->ops[0] = _r1;
		  }
		  res_op->ops[1] = captures[1];
		  res_op->resimplify (lseq, valueize);
		  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1197, __FILE__, __LINE__, true);
		  return true;
		}
next_after_fail2646:;
	      }
	    else
	      {
		if (integer_zerop (captures[1])
)
		  {
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2647;
		    {
		      res_op->set_op (BIT_AND_EXPR, type, 2);
		      {
			tree _o1[2], _r1;
			{
			  tree _o2[1], _r2;
			  _o2[0] = captures[0];
			  if (COMPARISON_CLASS_P (_o2[0]))
			    {
			      if (!seq) return false;
			      _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
			    }
			  if (type != TREE_TYPE (_o2[0])
			      && !useless_type_conversion_p (type, TREE_TYPE (_o2[0])))
			    {
			      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o2[0]);
			      tem_op.resimplify (lseq, valueize);
			      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r2) goto next_after_fail2647;
			    }
			  else
			    _r2 = _o2[0];
			  _o1[0] = _r2;
			}
			_o1[1] =  build_one_cst (type);
			gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			tem_op.resimplify (lseq, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r1) goto next_after_fail2647;
			res_op->ops[0] = _r1;
		      }
		      res_op->ops[1] = captures[2];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1198, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail2647:;
		  }
		else
		  {
		    if (integer_onep (captures[1])
)
		      {
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2648;
			{
			  res_op->set_op (BIT_IOR_EXPR, type, 2);
			  {
			    tree _o1[1], _r1;
			    _o1[0] = captures[0];
			    if (COMPARISON_CLASS_P (_o1[0]))
			      {
			        if (!seq) return false;
			        _o1[0] = gimple_build (seq, TREE_CODE (_o1[0]), TREE_TYPE (_o1[0]), TREE_OPERAND (_o1[0], 0), TREE_OPERAND (_o1[0], 1));
			      }
			    if (type != TREE_TYPE (_o1[0])
			        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
			      {
				gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
				tem_op.resimplify (lseq, valueize);
				_r1 = maybe_push_res_to_seq (&tem_op, lseq);
				if (!_r1) goto next_after_fail2648;
			      }
			    else
			      _r1 = _o1[0];
			    res_op->ops[0] = _r1;
			  }
			  res_op->ops[1] = captures[2];
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1199, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2648:;
		      }
		    else
		      {
			if (integer_onep (captures[2])
)
			  {
			    gimple_seq *lseq = seq;
			    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2649;
			    {
			      res_op->set_op (BIT_IOR_EXPR, type, 2);
			      {
				tree _o1[2], _r1;
				{
				  tree _o2[1], _r2;
				  _o2[0] = captures[0];
				  if (COMPARISON_CLASS_P (_o2[0]))
				    {
				      if (!seq) return false;
				      _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
				    }
				  if (type != TREE_TYPE (_o2[0])
				      && !useless_type_conversion_p (type, TREE_TYPE (_o2[0])))
				    {
				      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o2[0]);
				      tem_op.resimplify (lseq, valueize);
				      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
				      if (!_r2) goto next_after_fail2649;
				    }
				  else
				    _r2 = _o2[0];
				  _o1[0] = _r2;
				}
				_o1[1] = captures[2];
				gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				tem_op.resimplify (lseq, valueize);
				_r1 = maybe_push_res_to_seq (&tem_op, lseq);
				if (!_r1) goto next_after_fail2649;
				res_op->ops[0] = _r1;
			      }
			      res_op->ops[1] = captures[1];
			      res_op->resimplify (lseq, valueize);
			      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1200, __FILE__, __LINE__, true);
			      return true;
			    }
next_after_fail2649:;
			  }
		      }
		  }
	      }
	  }
        }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case NEGATE_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						    if (gimple_simplify_538 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    case BIT_NOT_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						    if (gimple_simplify_539 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    case ABS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						    if (gimple_simplify_540 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    case ABSU_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						    if (gimple_simplify_541 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (tree_expr_nonnegative_p (_q21))
		    {
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case ABS_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						if (gimple_simplify_542 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
		  if (tree_expr_nonnegative_p (_q20))
		    {
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case ABS_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p2 };
						if (gimple_simplify_542 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case ABS_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p2 };
						if (gimple_simplify_543 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
		  if (tree_expr_nonnegative_p (_q21))
		    {
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case ABS_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						if (gimple_simplify_543 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
	          break;
	        }
	      case GT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_expr_nonnegative_p (_q21))
		    {
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case ABS_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						if (gimple_simplify_542 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case PLUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (integer_onep (_q31))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
							{
							  if (integer_onep (_p2))
							    {
							      {
								tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								if (gimple_simplify_544 (res_op, seq, valueize, type, captures))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case GE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_expr_nonnegative_p (_q21))
		    {
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case ABS_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						if (gimple_simplify_542 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
	          break;
	        }
	      case LT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_expr_nonnegative_p (_q20))
		    {
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case ABS_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p2 };
						if (gimple_simplify_542 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
	          break;
	        }
	      case LE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_expr_nonnegative_p (_q20))
		    {
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case ABS_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p2 };
						if (gimple_simplify_542 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case NE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		switch (TREE_CODE (_q21))
		  {
		  case INTEGER_CST:
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_538 (res_op, seq, valueize, type, captures))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  case BIT_NOT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_539 (res_op, seq, valueize, type, captures))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  case ABS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_540 (res_op, seq, valueize, type, captures))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  case ABSU_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_541 (res_op, seq, valueize, type, captures))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      break;
		    }
	          default:;
	          }
	      }
	  }
        break;
      }
    case EQ_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		if (tree_expr_nonnegative_p (_q21))
		  {
		    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case ABS_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
					      if (gimple_simplify_542 (res_op, seq, valueize, type, captures, EQ_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		if (tree_expr_nonnegative_p (_q20))
		  {
		    if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case ABS_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p2 };
					      if (gimple_simplify_542 (res_op, seq, valueize, type, captures, EQ_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case ABS_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p2 };
					      if (gimple_simplify_543 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		if (tree_expr_nonnegative_p (_q21))
		  {
		    if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case ABS_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
					      if (gimple_simplify_543 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
	      }
	  }
        break;
      }
    case GT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_expr_nonnegative_p (_q21))
		  {
		    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case ABS_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
					      if (gimple_simplify_542 (res_op, seq, valueize, type, captures, GT_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case PLUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (tree_swap_operands_p (_q30, _q31))
				  std::swap (_q30, _q31);
				if (integer_onep (_q31))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case NEGATE_EXPR:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						      {
							if (integer_onep (_p2))
							  {
							    {
							      tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
							      if (gimple_simplify_544 (res_op, seq, valueize, type, captures))
							        return true;
							    }
							  }
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case GE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_expr_nonnegative_p (_q21))
		  {
		    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case ABS_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
					      if (gimple_simplify_542 (res_op, seq, valueize, type, captures, GE_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
	      }
	  }
        break;
      }
    case LT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_expr_nonnegative_p (_q20))
		  {
		    if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case ABS_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p2 };
					      if (gimple_simplify_542 (res_op, seq, valueize, type, captures, GT_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
	      }
	  }
        break;
      }
    case LE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_expr_nonnegative_p (_q20))
		  {
		    if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case ABS_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p2 };
					      if (gimple_simplify_542 (res_op, seq, valueize, type, captures, GE_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
	      }
	  }
        break;
      }
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case COND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  tree _q32 = gimple_assign_rhs3 (_a1);
		  _q32 = do_valueize (valueize, _q32);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q31, _q32, _p2 };
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2650;
			{
			  res_op->set_op (COND_EXPR, type, 3);
			  res_op->ops[0] = captures[0];
			  res_op->ops[0] = unshare_expr (res_op->ops[0]);
			  res_op->ops[1] = captures[1];
			  res_op->ops[2] = captures[3];
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1201, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2650:;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p2))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p2))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case COND_EXPR:
	        {
		  tree _q40 = gimple_assign_rhs1 (_a1);
		  _q40 = do_valueize (valueize, _q40);
		  tree _q41 = gimple_assign_rhs2 (_a1);
		  _q41 = do_valueize (valueize, _q41);
		  tree _q42 = gimple_assign_rhs3 (_a1);
		  _q42 = do_valueize (valueize, _q42);
		  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p1, _q41, _q42 };
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2651;
			{
			  res_op->set_op (COND_EXPR, type, 3);
			  res_op->ops[0] = captures[0];
			  res_op->ops[0] = unshare_expr (res_op->ops[0]);
			  res_op->ops[1] = captures[1];
			  res_op->ops[2] = captures[3];
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1202, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2651:;
		      }
		    }
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p1, _q40, _q41, _q42 };
		    if (inverse_conditions_p (captures[0], captures[2])
)
		      {
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2652;
			{
			  res_op->set_op (COND_EXPR, type, 3);
			  res_op->ops[0] = captures[0];
			  res_op->ops[0] = unshare_expr (res_op->ops[0]);
			  res_op->ops[1] = captures[1];
			  res_op->ops[2] = captures[3];
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1203, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2652:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case COND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  tree _q32 = gimple_assign_rhs3 (_a1);
		  _q32 = do_valueize (valueize, _q32);
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q30, _q31, _q32, _p2 };
		    if (inverse_conditions_p (captures[0], captures[1])
)
		      {
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2653;
			{
			  res_op->set_op (COND_EXPR, type, 3);
			  res_op->ops[0] = captures[0];
			  res_op->ops[0] = unshare_expr (res_op->ops[0]);
			  res_op->ops[1] = captures[3];
			  res_op->ops[2] = captures[4];
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1204, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2653:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  if ((_p2 == _p1 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _p1, 0) && types_match (_p2, _p1)))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	gimple_seq *lseq = seq;
	if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2654;
	{
	  tree tem;
	  tem = captures[1];
	  res_op->set_value (tem);
	  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1205, __FILE__, __LINE__, true);
	  return true;
	}
next_after_fail2654:;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					    if (gimple_simplify_545 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if (zerop (_p1))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case NEGATE_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p2, _q60 };
					    if (gimple_simplify_546 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								    if (gimple_simplify_547 (res_op, seq, valueize, type, captures, EQ_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
				  if (integer_zerop (_q21))
				    {
				      if (integer_zerop (_p1))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								    if (gimple_simplify_548 (res_op, seq, valueize, type, captures, EQ_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case UNEQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					    if (gimple_simplify_549 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if (zerop (_p1))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case NEGATE_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p2, _q60 };
					    if (gimple_simplify_550 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								    if (gimple_simplify_551 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
				  if (integer_zerop (_q21))
				    {
				      if (integer_zerop (_p1))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								    if (gimple_simplify_548 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					    if (gimple_simplify_552 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    if (integer_zerop (_p2))
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			  if (gimple_simplify_553 (res_op, seq, valueize, type, captures, NE_EXPR))
			    return true;
			}
		      }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								    if (gimple_simplify_554 (res_op, seq, valueize, type, captures, NE_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
				  if (integer_zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
						if (gimple_simplify_555 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				        }
				    }
			          break;
			        }
			      case BIT_AND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (integer_pow2p (_q31))
				    {
				      if (integer_zerop (_q21))
					{
					  switch (TREE_CODE (_p1))
					    {
					    case INTEGER_CST:
					      {
						if (integer_zerop (_p2))
						  {
						    {
						      tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p1 };
						      if (gimple_simplify_556 (res_op, seq, valueize, type, captures))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LTGT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					    if (gimple_simplify_557 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    if (integer_zerop (_p2))
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			  if (gimple_simplify_558 (res_op, seq, valueize, type, captures, LTGT_EXPR))
			    return true;
			}
		      }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								    if (gimple_simplify_559 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
				  if (integer_zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
						if (gimple_simplify_555 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case GE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  if (zerop (_q21))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _p1 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _p1, 0) && types_match (_q70, _p1)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _p1 };
							    if (gimple_simplify_560 (res_op, seq, valueize, type, captures, GE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q20, _p1 };
					    if (gimple_simplify_561 (res_op, seq, valueize, type, captures, GE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								    if (gimple_simplify_562 (res_op, seq, valueize, type, captures, GE_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_NOT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
					    if (gimple_simplify_563 (res_op, seq, valueize, type, captures, GE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_NOT_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					    if (gimple_simplify_564 (res_op, seq, valueize, type, captures, GE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      case GT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  if (zerop (_q21))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _p1 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _p1, 0) && types_match (_q70, _p1)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _p1 };
							    if (gimple_simplify_565 (res_op, seq, valueize, type, captures, GT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q20, _p1 };
					    if (gimple_simplify_566 (res_op, seq, valueize, type, captures, GT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								    if (gimple_simplify_567 (res_op, seq, valueize, type, captures, GT_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  if (zerop (_q21))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _p1 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _p1, 0) && types_match (_q70, _p1)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _p1 };
							    if (gimple_simplify_568 (res_op, seq, valueize, type, captures, LE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q20, _p1 };
					    if (gimple_simplify_569 (res_op, seq, valueize, type, captures, LE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								    if (gimple_simplify_570 (res_op, seq, valueize, type, captures, LE_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  if (zerop (_q21))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _p1 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _p1, 0) && types_match (_q70, _p1)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _p1 };
							    if (gimple_simplify_571 (res_op, seq, valueize, type, captures, LT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q20, _p1 };
					    if (gimple_simplify_572 (res_op, seq, valueize, type, captures, LT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								    if (gimple_simplify_573 (res_op, seq, valueize, type, captures, LT_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_NOT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
					    if (gimple_simplify_563 (res_op, seq, valueize, type, captures, LT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_NOT_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					    if (gimple_simplify_564 (res_op, seq, valueize, type, captures, LT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      switch (TREE_CODE (_p1))
		        {
			case INTEGER_CST:
			  {
			    if (integer_zerop (_p2))
			      {
				{
				  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
				  if (gimple_simplify_574 (res_op, seq, valueize, type, captures))
				    return true;
				}
			      }
			    break;
			  }
		        default:;
		        }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case EQ_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					  if (gimple_simplify_545 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if (zerop (_p1))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case NEGATE_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p2, _q60 };
					  if (gimple_simplify_546 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								  if (gimple_simplify_547 (res_op, seq, valueize, type, captures, EQ_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
				if (integer_zerop (_q21))
				  {
				    if (integer_zerop (_p1))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								  if (gimple_simplify_548 (res_op, seq, valueize, type, captures, EQ_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case UNEQ_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					  if (gimple_simplify_549 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if (zerop (_p1))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case NEGATE_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p2, _q60 };
					  if (gimple_simplify_550 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								  if (gimple_simplify_551 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
				if (integer_zerop (_q21))
				  {
				    if (integer_zerop (_p1))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								  if (gimple_simplify_548 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case NE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					  if (gimple_simplify_552 (res_op, seq, valueize, type, captures, NE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  if (integer_zerop (_p2))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			if (gimple_simplify_553 (res_op, seq, valueize, type, captures, NE_EXPR))
			  return true;
		      }
		    }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								  if (gimple_simplify_554 (res_op, seq, valueize, type, captures, NE_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
				if (integer_zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					if (integer_zerop (_p2))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
					      if (gimple_simplify_555 (res_op, seq, valueize, type, captures, NE_EXPR))
					        return true;
					    }
					  }
				      }
				  }
			        break;
			      }
			    case BIT_AND_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (tree_swap_operands_p (_q30, _q31))
				  std::swap (_q30, _q31);
				if (integer_pow2p (_q31))
				  {
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case INTEGER_CST:
					    {
					      if (integer_zerop (_p2))
						{
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p1 };
						    if (gimple_simplify_556 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					        }
					      break;
					    }
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case LTGT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  if (integer_zerop (_p2))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			if (gimple_simplify_558 (res_op, seq, valueize, type, captures, LTGT_EXPR))
			  return true;
		      }
		    }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								  if (gimple_simplify_559 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
				if (integer_zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					if (integer_zerop (_p2))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
					      if (gimple_simplify_555 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					        return true;
					    }
					  }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case GE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				if (zerop (_q21))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case NEGATE_EXPR:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _p1 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _p1, 0) && types_match (_q70, _p1)))
						      {
							{
							  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _p1 };
							  if (gimple_simplify_560 (res_op, seq, valueize, type, captures, GE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q20, _p1 };
					  if (gimple_simplify_561 (res_op, seq, valueize, type, captures, GE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								  if (gimple_simplify_562 (res_op, seq, valueize, type, captures, GE_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if (integer_zerop (_q21))
		  {
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p1))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case BIT_NOT_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a1);
				    _q50 = do_valueize (valueize, _q50);
				    if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
					  if (gimple_simplify_563 (res_op, seq, valueize, type, captures, GE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case BIT_NOT_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					  if (gimple_simplify_564 (res_op, seq, valueize, type, captures, GE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
	      }
	  }
        break;
      }
    case GT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				if (zerop (_q21))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case NEGATE_EXPR:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _p1 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _p1, 0) && types_match (_q70, _p1)))
						      {
							{
							  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _p1 };
							  if (gimple_simplify_565 (res_op, seq, valueize, type, captures, GT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q20, _p1 };
					  if (gimple_simplify_566 (res_op, seq, valueize, type, captures, GT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								  if (gimple_simplify_567 (res_op, seq, valueize, type, captures, GT_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case LE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				if (zerop (_q21))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case NEGATE_EXPR:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _p1 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _p1, 0) && types_match (_q70, _p1)))
						      {
							{
							  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _p1 };
							  if (gimple_simplify_568 (res_op, seq, valueize, type, captures, LE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q20, _p1 };
					  if (gimple_simplify_569 (res_op, seq, valueize, type, captures, LE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								  if (gimple_simplify_570 (res_op, seq, valueize, type, captures, LE_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case LT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				if (zerop (_q21))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case NEGATE_EXPR:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _p1 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _p1, 0) && types_match (_q70, _p1)))
						      {
							{
							  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _p1 };
							  if (gimple_simplify_571 (res_op, seq, valueize, type, captures, LT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q20, _p1 };
					  if (gimple_simplify_572 (res_op, seq, valueize, type, captures, LT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								  if (gimple_simplify_573 (res_op, seq, valueize, type, captures, LT_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if (integer_zerop (_q21))
		  {
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p1))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case BIT_NOT_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a1);
				    _q50 = do_valueize (valueize, _q50);
				    if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
					  if (gimple_simplify_563 (res_op, seq, valueize, type, captures, LT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case BIT_NOT_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					  if (gimple_simplify_564 (res_op, seq, valueize, type, captures, LT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  if (integer_zerop (_p2))
			    {
			      {
				tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
				if (gimple_simplify_574 (res_op, seq, valueize, type, captures))
				  return true;
			      }
			    }
		          break;
		        }
		      default:;
		      }
		  }
	      }
	  }
        break;
      }
    default:;
    }
{
  tree _p0_pops[1];
  if (gimple_logical_inverted_value (_p0, _p0_pops, valueize))
    {
      tree _q20 = _p0_pops[0];
      if (gimple_truth_valued_p (_q20, valueize))
	{
	  {
	    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
	    if (COND_EXPR == VEC_COND_EXPR
 || TYPE_UNSIGNED (TREE_TYPE (captures[0]))
)
	      {
		gimple_seq *lseq = seq;
		if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2655;
		{
		  res_op->set_op (COND_EXPR, type, 3);
		  res_op->ops[0] = captures[0];
		  res_op->ops[1] = captures[2];
		  res_op->ops[2] = captures[1];
		  res_op->resimplify (lseq, valueize);
		  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1206, __FILE__, __LINE__, true);
		  return true;
		}
next_after_fail2655:;
	      }
	  }
        }
    }
}
  {
    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _p2 };
    {
 bool wascmp;
	if (INTEGRAL_TYPE_P (type)
 && TYPE_UNSIGNED (TREE_TYPE (captures[0]))
 && bitwise_inverted_equal_p (captures[1], captures[2], wascmp)
 && (!wascmp || TYPE_PRECISION (type) == 1)
)
	  {
	    if ((!TYPE_UNSIGNED (type) && TREE_CODE (type) == BOOLEAN_TYPE)
 || TYPE_PRECISION (type) == 1
)
	      {
		gimple_seq *lseq = seq;
		if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2656;
		{
		  res_op->set_op (BIT_XOR_EXPR, type, 2);
		  {
		    tree _o1[1], _r1;
		    _o1[0] = captures[0];
		    if (COMPARISON_CLASS_P (_o1[0]))
		      {
		        if (!seq) return false;
		        _o1[0] = gimple_build (seq, TREE_CODE (_o1[0]), TREE_TYPE (_o1[0]), TREE_OPERAND (_o1[0], 0), TREE_OPERAND (_o1[0], 1));
		      }
		    if (type != TREE_TYPE (_o1[0])
		        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
		      {
			gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
			tem_op.resimplify (lseq, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r1) goto next_after_fail2656;
		      }
		    else
		      _r1 = _o1[0];
		    res_op->ops[0] = _r1;
		  }
		  res_op->ops[1] = captures[2];
		  res_op->resimplify (lseq, valueize);
		  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1207, __FILE__, __LINE__, true);
		  return true;
		}
next_after_fail2656:;
	      }
	    else
	      {
		gimple_seq *lseq = seq;
		if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2657;
		{
		  res_op->set_op (BIT_XOR_EXPR, type, 2);
		  {
		    tree _o1[1], _r1;
		    {
		      tree _o2[1], _r2;
		      _o2[0] = captures[0];
		      if (COMPARISON_CLASS_P (_o2[0]))
		        {
		          if (!seq) return false;
		          _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
		        }
		      if (type != TREE_TYPE (_o2[0])
		          && !useless_type_conversion_p (type, TREE_TYPE (_o2[0])))
			{
			  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o2[0]);
			  tem_op.resimplify (lseq, valueize);
			  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r2) goto next_after_fail2657;
		        }
		      else
		        _r2 = _o2[0];
		      _o1[0] = _r2;
		    }
		    gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
		    tem_op.resimplify (lseq, valueize);
		    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		    if (!_r1) goto next_after_fail2657;
		    res_op->ops[0] = _r1;
		  }
		  res_op->ops[1] = captures[2];
		  res_op->resimplify (lseq, valueize);
		  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1208, __FILE__, __LINE__, true);
		  return true;
		}
next_after_fail2657:;
	      }
	  }
    }
  }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			    switch (gimple_call_combined_fn (_c2))
			      {
			      case CFN_BUILT_IN_SIGNBITF:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_575 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_BUILT_IN_SIGNBITF))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      case CFN_BUILT_IN_SIGNBITL:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_575 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_BUILT_IN_SIGNBITL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      case CFN_SIGNBIT:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_575 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_SIGNBIT))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      case CFN_BUILT_IN_SIGNBIT:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_575 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_BUILT_IN_SIGNBIT))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			        switch (gimple_call_combined_fn (_c2))
				  {
				  case CFN_PARITY:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_PARITY))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_PARITY))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLZ:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_579 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZ))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_580 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZ))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CTZ:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_583 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZ))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_584 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZ))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_FFS:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFS))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFS))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_FFSIMAX:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSIMAX))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSIMAX))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_POPCOUNT:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNT))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNT))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_PARITYL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYL))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLZL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_579 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZL))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_580 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZL))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CTZL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_583 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZL))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_584 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZL))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_FFSL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSL))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_POPCOUNTLL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTLL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTLL))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CTZIMAX:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_583 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZIMAX))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_584 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZIMAX))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_POPCOUNT:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_POPCOUNT))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_POPCOUNT))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_PARITYIMAX:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYIMAX))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYIMAX))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLRSBL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								    if (gimple_simplify_577 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBL))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						    if (gimple_simplify_578 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBL))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_CLZ:
				    if (gimple_call_num_args (_c2) == 2)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_call_arg (_c2, 1);
					_q51 = do_valueize (valueize, _q51);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_q51))
							      {
							      case INTEGER_CST:
							        {
								  if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
									if (gimple_simplify_581 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
							if (gimple_simplify_582 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_579 (res_op, seq, valueize, type, captures, CFN_CLZ))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_580 (res_op, seq, valueize, type, captures, CFN_CLZ))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_CTZ:
				    if (gimple_call_num_args (_c2) == 2)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_call_arg (_c2, 1);
					_q51 = do_valueize (valueize, _q51);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_q51))
							      {
							      case INTEGER_CST:
							        {
								  if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
									if (gimple_simplify_585 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
							if (gimple_simplify_586 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_583 (res_op, seq, valueize, type, captures, CFN_CTZ))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_584 (res_op, seq, valueize, type, captures, CFN_CTZ))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_FFS:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_FFS))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_FFS))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_PARITY:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITY))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITY))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_POPCOUNTIMAX:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTIMAX))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTIMAX))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLRSBIMAX:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								    if (gimple_simplify_577 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBIMAX))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						    if (gimple_simplify_578 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBIMAX))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLRSBLL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								    if (gimple_simplify_577 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBLL))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						    if (gimple_simplify_578 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBLL))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLZIMAX:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_579 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZIMAX))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_580 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZIMAX))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_CLRSB:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								    if (gimple_simplify_577 (res_op, seq, valueize, type, captures, CFN_CLRSB))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						    if (gimple_simplify_578 (res_op, seq, valueize, type, captures, CFN_CLRSB))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_BSWAP128:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_POPCOUNTL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTL))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLRSB:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								    if (gimple_simplify_577 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSB))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						    if (gimple_simplify_578 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSB))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLZLL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_579 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZLL))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_580 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZLL))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CTZLL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_583 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZLL))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_584 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZLL))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_FFSLL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSLL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSLL))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_PARITYLL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYLL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYLL))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_BSWAP16:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_BSWAP32:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_BSWAP64:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			    switch (gimple_call_combined_fn (_c2))
			      {
			      case CFN_BUILT_IN_SIGNBITF:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_575 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_SIGNBITF))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      case CFN_BUILT_IN_SIGNBITL:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_575 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_SIGNBITL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      case CFN_SIGNBIT:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_575 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_SIGNBIT))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      case CFN_BUILT_IN_SIGNBIT:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_575 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_SIGNBIT))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case NE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gcall *_c1 = dyn_cast <gcall *> (_d1))
			  switch (gimple_call_combined_fn (_c1))
			    {
			    case CFN_BUILT_IN_SIGNBITF:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_575 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_BUILT_IN_SIGNBITF))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    case CFN_BUILT_IN_SIGNBITL:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_575 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_BUILT_IN_SIGNBITL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    case CFN_SIGNBIT:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_575 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_SIGNBIT))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    case CFN_BUILT_IN_SIGNBIT:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_575 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_BUILT_IN_SIGNBIT))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if (integer_zerop (_q21))
		  {
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p1))
		          {
			    if (gcall *_c1 = dyn_cast <gcall *> (_d1))
			      switch (gimple_call_combined_fn (_c1))
				{
				case CFN_PARITY:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_PARITY))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_PARITY))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLZ:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_579 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZ))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_580 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZ))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CTZ:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_583 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZ))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_584 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZ))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_FFS:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFS))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFS))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_FFSIMAX:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSIMAX))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSIMAX))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_POPCOUNT:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNT))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNT))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_PARITYL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYL))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLZL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_579 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZL))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_580 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZL))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CTZL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_583 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZL))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_584 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZL))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_FFSL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSL))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_POPCOUNTLL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTLL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTLL))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CTZIMAX:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_583 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZIMAX))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_584 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZIMAX))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_POPCOUNT:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_POPCOUNT))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_POPCOUNT))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_PARITYIMAX:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYIMAX))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYIMAX))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLRSBL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								  if (gimple_simplify_577 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBL))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						  if (gimple_simplify_578 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBL))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_CLZ:
				  if (gimple_call_num_args (_c1) == 2)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_call_arg (_c1, 1);
				      _q51 = do_valueize (valueize, _q51);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_q51))
							    {
							    case INTEGER_CST:
							      {
								if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
								      if (gimple_simplify_581 (res_op, seq, valueize, type, captures))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
						      if (gimple_simplify_582 (res_op, seq, valueize, type, captures))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_579 (res_op, seq, valueize, type, captures, CFN_CLZ))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_580 (res_op, seq, valueize, type, captures, CFN_CLZ))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_CTZ:
				  if (gimple_call_num_args (_c1) == 2)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_call_arg (_c1, 1);
				      _q51 = do_valueize (valueize, _q51);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_q51))
							    {
							    case INTEGER_CST:
							      {
								if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
								      if (gimple_simplify_585 (res_op, seq, valueize, type, captures))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
						      if (gimple_simplify_586 (res_op, seq, valueize, type, captures))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_583 (res_op, seq, valueize, type, captures, CFN_CTZ))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_584 (res_op, seq, valueize, type, captures, CFN_CTZ))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_FFS:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_FFS))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_FFS))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_PARITY:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITY))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITY))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_POPCOUNTIMAX:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTIMAX))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTIMAX))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLRSBIMAX:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								  if (gimple_simplify_577 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBIMAX))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						  if (gimple_simplify_578 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBIMAX))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLRSBLL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								  if (gimple_simplify_577 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBLL))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						  if (gimple_simplify_578 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBLL))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLZIMAX:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_579 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZIMAX))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_580 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZIMAX))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_CLRSB:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								  if (gimple_simplify_577 (res_op, seq, valueize, type, captures, CFN_CLRSB))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						  if (gimple_simplify_578 (res_op, seq, valueize, type, captures, CFN_CLRSB))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_BSWAP128:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_POPCOUNTL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTL))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLRSB:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								  if (gimple_simplify_577 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSB))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						  if (gimple_simplify_578 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSB))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLZLL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_579 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZLL))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_580 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZLL))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CTZLL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_583 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZLL))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_584 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZLL))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_FFSLL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSLL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSLL))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_PARITYLL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYLL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYLL))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_BSWAP16:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_BSWAP32:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_BSWAP64:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_576 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
	      }
	  }
        break;
      }
    case EQ_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gcall *_c1 = dyn_cast <gcall *> (_d1))
			  switch (gimple_call_combined_fn (_c1))
			    {
			    case CFN_BUILT_IN_SIGNBITF:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_575 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_SIGNBITF))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    case CFN_BUILT_IN_SIGNBITL:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_575 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_SIGNBITL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    case CFN_SIGNBIT:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_575 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_SIGNBIT))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    case CFN_BUILT_IN_SIGNBIT:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_575 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_SIGNBIT))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    default:;
    }
  return false;
}
#pragma GCC diagnostic pop
