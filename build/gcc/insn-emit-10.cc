/* Generated automatically by the program `genemit'
from the machine description file `md'.  */

#define IN_TARGET_CODE 1
#include "config.h"
#include "system.h"
#include "coretypes.h"
#include "backend.h"
#include "predict.h"
#include "tree.h"
#include "rtl.h"
#include "alias.h"
#include "varasm.h"
#include "stor-layout.h"
#include "calls.h"
#include "memmodel.h"
#include "tm_p.h"
#include "flags.h"
#include "insn-config.h"
#include "expmed.h"
#include "dojump.h"
#include "explow.h"
#include "emit-rtl.h"
#include "stmt.h"
#include "expr.h"
#include "insn-codes.h"
#include "optabs.h"
#include "dfp.h"
#include "output.h"
#include "recog.h"
#include "df.h"
#include "resource.h"
#include "reload.h"
#include "diagnostic-core.h"
#include "regs.h"
#include "tm-constrs.h"
#include "ggc.h"
#include "target.h"

/* ../../gcc/config/i386/i386.md:2328 */
rtx
gen_popfldi1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (CCmode,
	gen_rtvec (1,
		operand1),
	43));
}

/* ../../gcc/config/i386/i386.md:3605 */
rtx
gen_insvsi_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (gen_rtx_ZERO_EXTRACT (SImode,
	operand0,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	operand1);
}

/* ../../gcc/config/i386/i386.md:3934 */
rtx
gen_pop2p_di (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (3,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (DImode,
	gen_rtvec (1,
		operand1),
	106)),
		gen_rtx_SET (operand2,
	gen_rtx_UNSPEC (DImode,
	gen_rtvec (1,
		const0_rtx),
	107)),
		gen_rtx_UNSPEC (DImode,
	gen_rtvec (1,
		const0_rtx),
	108)));
}

/* ../../gcc/config/i386/i386.md:5526 */
rtx
gen_truncdfsf2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FLOAT_TRUNCATE (SFmode,
	operand1));
}

/* ../../gcc/config/i386/i386.md:5872 */
rtx
gen_fixuns_truncsfsi2_avx512f (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSIGNED_FIX (SImode,
	operand1));
}

/* ../../gcc/config/i386/i386.md:6029 */
rtx
gen_fix_truncsi_i387 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (3,
		gen_rtx_SET (operand0,
	gen_rtx_FIX (SImode,
	operand1)),
		gen_rtx_USE (VOIDmode,
	operand2),
		gen_rtx_USE (VOIDmode,
	operand3)));
}

/* ../../gcc/config/i386/i386.md:6291 */
rtx
gen_floatunssidf2_i387_with_xmm (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (3,
		gen_rtx_SET (operand0,
	gen_rtx_UNSIGNED_FLOAT (DFmode,
	operand1)),
		gen_rtx_CLOBBER (VOIDmode,
	operand2),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (DImode))));
}

/* ../../gcc/config/i386/i386.md:8445 */
rtx
gen_subvsi4_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCOmode,
	17),
	gen_rtx_EQ (CCOmode,
	gen_rtx_MINUS (DImode,
	gen_rtx_SIGN_EXTEND (DImode,
	operand1),
	operand3),
	gen_rtx_SIGN_EXTEND (DImode,
	gen_rtx_MINUS (SImode,
	copy_rtx (operand1),
	operand2)))),
		gen_rtx_SET (operand0,
	gen_rtx_MINUS (SImode,
	copy_rtx (operand1),
	copy_rtx (operand2)))));
}

/* ../../gcc/config/i386/i386.md:9528 */
rtx
gen_subsi3_carry_ccc (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_COMPARE (CCCmode,
	gen_rtx_ZERO_EXTEND (DImode,
	operand1),
	gen_rtx_PLUS (DImode,
	gen_rtx_LTU (DImode,
	gen_rtx_REG (CCmode,
	17),
	const0_rtx),
	gen_rtx_ZERO_EXTEND (DImode,
	operand2)))),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (SImode))));
}

/* ../../gcc/config/i386/i386.md:9940 */
rtx
gen_addsi3_cc_overflow_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_COMPARE (CCCmode,
	gen_rtx_PLUS (SImode,
	operand1,
	operand2),
	copy_rtx (operand1))),
		gen_rtx_SET (operand0,
	gen_rtx_PLUS (SImode,
	copy_rtx (operand1),
	copy_rtx (operand2)))));
}

/* ../../gcc/config/i386/i386.md:11454 */
rtx
gen_udivmodsi4_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		gen_rtx_SET (operand0,
	gen_rtx_UDIV (SImode,
	operand2,
	operand3)),
		gen_rtx_SET (operand1,
	gen_rtx_UMOD (SImode,
	copy_rtx (operand2),
	copy_rtx (operand3))),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	32),
		gen_hard_reg_clobber (CCmode, 17)));
}

/* ../../gcc/config/i386/i386.md:15308 */
rtx
gen_ashldi3_doubleword (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (DImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17)));
}

/* ../../gcc/config/i386/i386.md:15428 */
rtx
gen_x86_64_shld_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_IOR (DImode,
	gen_rtx_ASHIFT (DImode,
	copy_rtx (operand0),
	operand2),
	gen_rtx_SUBREG (DImode,
	gen_rtx_LSHIFTRT (TImode,
	gen_rtx_ZERO_EXTEND (TImode,
	operand1),
	operand3),
	0))),
		gen_hard_reg_clobber (CCmode, 17)));
}

/* ../../gcc/config/i386/i386.md:15682 */
rtx
gen_x86_shld_ndd_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_IOR (SImode,
	gen_rtx_ASHIFT (SImode,
	operand1,
	operand3),
	gen_rtx_SUBREG (SImode,
	gen_rtx_LSHIFTRT (DImode,
	gen_rtx_ZERO_EXTEND (DImode,
	operand2),
	operand4),
	0))),
		gen_hard_reg_clobber (CCmode, 17)));
}

/* ../../gcc/config/i386/i386.md:16751 */
rtx
gen_lshrti3_doubleword_lowpart (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_SUBREG (DImode,
	gen_rtx_LSHIFTRT (TImode,
	operand1,
	operand2),
	0)),
		gen_hard_reg_clobber (CCmode, 17)));
}

/* ../../gcc/config/i386/i386.md:17005 */
rtx
gen_x86_shrd_nf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_IOR (SImode,
	gen_rtx_LSHIFTRT (SImode,
	operand0,
	gen_rtx_AND (QImode,
	operand2,
	const_int_rtx[MAX_SAVED_CONST_INT + (31)])),
	gen_rtx_SUBREG (SImode,
	gen_rtx_ASHIFT (DImode,
	gen_rtx_ZERO_EXTEND (DImode,
	operand1),
	gen_rtx_MINUS (QImode,
	const_int_rtx[MAX_SAVED_CONST_INT + (32)],
	gen_rtx_AND (QImode,
	operand2,
	const_int_rtx[MAX_SAVED_CONST_INT + (31)]))),
	0)));
}

/* ../../gcc/config/i386/i386.md:17239 */
rtx
gen_ashrdi3_cvt_nf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ASHIFTRT (DImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/i386.md:18386 */
rtx
gen_ix86_rotrti3_doubleword (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (3,
		gen_rtx_SET (operand0,
	gen_rtx_ROTATERT (TImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (DImode))));
}

/* ../../gcc/config/i386/i386.md:19827 */
rtx
gen_jump (rtx operand0 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (pc_rtx,
	gen_rtx_LABEL_REF (VOIDmode,
	operand0));
}

/* ../../gcc/config/i386/i386.md:20559 */
rtx
gen_blockage (void)
{
  return gen_rtx_UNSPEC_VOLATILE (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	1);
}

/* ../../gcc/config/i386/i386.md:20724 */
rtx
gen_max_skip_align (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_UNSPEC_VOLATILE (VOIDmode,
	gen_rtvec (2,
		operand0,
		operand1),
	4);
}

/* ../../gcc/config/i386/i386.md:21260 */
rtx
gen_bsr (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCZmode,
	17),
	gen_rtx_COMPARE (CCZmode,
	operand1,
	const0_rtx)),
		gen_rtx_SET (operand0,
	gen_rtx_MINUS (SImode,
	const_int_rtx[MAX_SAVED_CONST_INT + (31)],
	gen_rtx_CLZ (SImode,
	copy_rtx (operand1))))));
}

/* ../../gcc/config/i386/i386.md:21664 */
rtx
gen_lzcnt_si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (1,
		operand1),
	96)),
		gen_hard_reg_clobber (CCmode, 17)));
}

/* ../../gcc/config/i386/i386.md:21992 */
rtx
gen_bmi2_pext_si3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (2,
		operand1,
		operand2),
	100));
}

/* ../../gcc/config/i386/i386.md:22491 */
rtx
gen_bswaphisi2_lowpart (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_IOR (SImode,
	gen_rtx_AND (SImode,
	operand1,
	GEN_INT (-65536L)),
	gen_rtx_LSHIFTRT (SImode,
	gen_rtx_BSWAP (SImode,
	operand1),
	const_int_rtx[MAX_SAVED_CONST_INT + (16)])));
}

/* ../../gcc/config/i386/i386.md:23876 */
rtx
gen_cosxf2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (XFmode,
	gen_rtvec (1,
		operand1),
	65));
}

/* ../../gcc/config/i386/i386.md:24689 */
rtx
gen_avx512f_scalefsf2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (SFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	58));
}

/* ../../gcc/config/i386/i386.md:24967 */
rtx
gen_lrintxfdi2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (DImode,
	gen_rtvec (1,
		operand1),
	70)),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (XFmode))));
}

/* ../../gcc/config/i386/i386.md:25208 */
rtx
gen_fistdi2_ceil (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (DImode,
	gen_rtvec (1,
		operand1),
	79)),
		gen_rtx_USE (VOIDmode,
	operand2),
		gen_rtx_USE (VOIDmode,
	operand3),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (XFmode))));
}

/* ../../gcc/config/i386/i386.md:26577 */
rtx
gen_smaxsf3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_SMAX (SFmode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/i386.md:27039 */
rtx
gen_pro_epilogue_adjust_stack_sub_di (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (3,
		gen_rtx_SET (operand0,
	gen_rtx_MINUS (DImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_MEM (BLKmode,
	gen_rtx_SCRATCH (VOIDmode)))));
}

/* ../../gcc/config/i386/i386.md:27488 */
rtx
gen_stack_protect_test_1_di (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (CCZmode,
	gen_rtvec (2,
		operand1,
		operand2),
	93)),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (DImode))));
}

/* ../../gcc/config/i386/i386.md:28962 */
rtx
gen_rdtscp (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC_VOLATILE (DImode,
	gen_rtvec (1,
		const0_rtx),
	10)),
		gen_rtx_SET (operand1,
	gen_rtx_UNSPEC_VOLATILE (SImode,
	gen_rtvec (1,
		const0_rtx),
	10))));
}

/* ../../gcc/config/i386/i386.md:29080 */
rtx
gen_xsaves_rex64 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC_VOLATILE (BLKmode,
	gen_rtvec (2,
		operand1,
		operand2),
	30));
}

/* ../../gcc/config/i386/i386.md:29134 */
rtx
gen_xrstors64 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_UNSPEC_VOLATILE (BLKmode,
	gen_rtvec (3,
		operand0,
		operand1,
		operand2),
	33);
}

/* ../../gcc/config/i386/i386.md:29262 */
rtx
gen_lwp_slwpcbsi (rtx operand0 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC_VOLATILE (SImode,
	gen_rtvec (1,
		const0_rtx),
	13));
}

/* ../../gcc/config/i386/i386.md:29310 */
rtx
gen_rdgsbasesi (rtx operand0 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC_VOLATILE (SImode,
	gen_rtvec (1,
		const0_rtx),
	17));
}

/* ../../gcc/config/i386/i386.md:29319 */
rtx
gen_wrgsbasedi (rtx operand0 ATTRIBUTE_UNUSED)
{
  return gen_rtx_UNSPEC_VOLATILE (VOIDmode,
	gen_rtvec (1,
		operand0),
	19);
}

/* ../../gcc/config/i386/i386.md:29377 */
rtx
gen_rdsspdi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC_VOLATILE (DImode,
	gen_rtvec (1,
		operand1),
	59));
}

/* ../../gcc/config/i386/i386.md:29409 */
rtx
gen_wrssdi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_UNSPEC_VOLATILE (VOIDmode,
	gen_rtvec (2,
		operand0,
		operand1),
	63);
}

/* ../../gcc/config/i386/i386.md:29542 */
rtx
gen_mwaitx (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_UNSPEC_VOLATILE (VOIDmode,
	gen_rtvec (3,
		operand0,
		operand1,
		operand2),
	54);
}

/* ../../gcc/config/i386/i386.md:29656 */
rtx
gen_movdir64b_si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (gen_rtx_MEM (XImode,
	operand0),
	gen_rtx_UNSPEC (XImode,
	gen_rtvec (1,
		operand1),
	103));
}

/* ../../gcc/config/i386/i386.md:29719 */
rtx
gen_umwait (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_UNSPEC_VOLATILE (CCCmode,
	gen_rtvec (2,
		operand0,
		operand1),
	69));
}

/* ../../gcc/config/i386/i386.md:29909 */
rtx
gen_uwrmsr (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_UNSPEC_VOLATILE (VOIDmode,
	gen_rtvec (2,
		operand0,
		operand1),
	86);
}

/* ../../gcc/config/i386/mmx.md:906 */
rtx
gen_mmx_rcpit1v2sf3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2SFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	113));
}

/* ../../gcc/config/i386/mmx.md:1310 */
rtx
gen_mmx_blendvps (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	51));
}

/* ../../gcc/config/i386/mmx.md:2577 */
rtx
gen_xorv2bf3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_XOR (V2BFmode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/mmx.md:2577 */
rtx
gen_xorv4hf3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_XOR (V4HFmode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/mmx.md:3334 */
rtx
gen_sssubv4qi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_SS_MINUS (V4QImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/mmx.md:3334 */
rtx
gen_sssubv2hi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_SS_MINUS (V2HImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/mmx.md:3703 */
rtx
gen_smaxv4qi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_SMAX (V4QImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/mmx.md:3732 */
rtx
gen_uminv2si3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UMIN (V2SImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/mmx.md:3831 */
rtx
gen_absv4qi2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ABS (V4QImode,
	operand1));
}

/* ../../gcc/config/i386/mmx.md:3886 */
rtx
gen_mmx_ashlv1di3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (V1DImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/mmx.md:4165 */
rtx
gen_mmx_gtv8qi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_GT (V8QImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/mmx.md:4505 */
rtx
gen_mmx_ppermv64 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	53));
}

/* ../../gcc/config/i386/mmx.md:4863 */
rtx
gen_mmx_punpckhbw_low (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_SELECT (V4QImode,
	gen_rtx_VEC_CONCAT (V8QImode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)]))));
}

/* ../../gcc/config/i386/mmx.md:5037 */
rtx
gen_sse4_1_zero_extendv2hiv2si2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (V2SImode,
	gen_rtx_VEC_SELECT (V2HImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		const0_rtx,
		const1_rtx)))));
}

/* ../../gcc/config/i386/mmx.md:5501 */
rtx
gen_mmx_pshufbv4qi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	52));
}

/* ../../gcc/config/i386/mmx.md:6927 */
rtx
gen_popcountv4qi2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_POPCOUNT (V4QImode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:1503 */
rtx
gen_movv16qi_internal (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	operand1);
}

/* ../../gcc/config/i386/sse.md:1503 */
rtx
gen_movv4ti_internal (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	operand1);
}

/* ../../gcc/config/i386/sse.md:1503 */
rtx
gen_movv8sf_internal (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	operand1);
}

/* ../../gcc/config/i386/sse.md:1728 */
rtx
gen_avx512f_storedf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (DFmode,
	gen_rtx_AND (QImode,
	operand2,
	const1_rtx),
	gen_rtx_VEC_SELECT (DFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx))),
	operand0));
}

/* ../../gcc/config/i386/sse.md:1775 */
rtx
gen_avx512vl_blendmv16qi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16QImode,
	operand2,
	operand1,
	operand3));
}

/* ../../gcc/config/i386/sse.md:1775 */
rtx
gen_avx512vl_blendmv8bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8BFmode,
	operand2,
	operand1,
	operand3));
}

/* ../../gcc/config/i386/sse.md:2015 */
rtx
gen_avx_movntv4df (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (1,
		operand1),
	117));
}

/* ../../gcc/config/i386/sse.md:2088 */
rtx
gen_kiorhi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_IOR (HImode,
	operand1,
	operand2)),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	174)));
}

/* ../../gcc/config/i386/sse.md:2133 */
rtx
gen_kandnsi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_AND (SImode,
	gen_rtx_NOT (SImode,
	operand1),
	operand2)),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	174)));
}

/* ../../gcc/config/i386/sse.md:2247 */
rtx
gen_kaddqi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_PLUS (QImode,
	operand1,
	operand2)),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	174)));
}

/* ../../gcc/config/i386/sse.md:2262 */
rtx
gen_kashiftdi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (DImode,
	operand1,
	operand2)),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	174)));
}

/* ../../gcc/config/i386/sse.md:2361 */
rtx
gen_kortestqi_ccz (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (gen_rtx_REG (CCZmode,
	17),
	gen_rtx_UNSPEC (CCZmode,
	gen_rtvec (2,
		operand0,
		operand1),
	175));
}

/* ../../gcc/config/i386/sse.md:2702 */
rtx
gen_avx512fp16_vmaddv8hf3_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_PLUS (V8HFmode,
	operand1,
	operand2),
	operand3,
	operand4),
	operand1,
	const1_rtx),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:2702 */
rtx
gen_sse2_vmaddv2df3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_PLUS (V2DFmode,
	operand1,
	operand2),
	operand1,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:2702 */
rtx
gen_sse2_vmsubv2df3_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_MINUS (V2DFmode,
	operand1,
	operand2),
	operand3,
	operand4),
	operand1,
	const1_rtx),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:2793 */
rtx
gen_sse_vmdivv4sf3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_DIV (V4SFmode,
	operand1,
	operand2),
	operand1,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:2793 */
rtx
gen_sse2_vmmulv2df3_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_MULT (V2DFmode,
	operand1,
	operand2),
	operand3,
	operand4),
	operand1,
	const1_rtx),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:2894 */
rtx
gen_avx512fp16_divv8hf3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_DIV (V8HFmode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:2894 */
rtx
gen_avx_divv8sf3_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (2,
		gen_rtx_DIV (V8SFmode,
	operand1,
	operand2),
		operand3),
	178));
}

/* ../../gcc/config/i386/sse.md:2894 */
rtx
gen_avx_divv4df3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_DIV (V4DFmode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:2922 */
rtx
gen_sse_vmrcpv4sf2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (1,
		operand1),
	54),
	operand2,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:2999 */
rtx
gen_rcp14v4sf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (1,
		operand1),
	161),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:3062 */
rtx
gen_avx512fp16_sqrtv32hf2_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (2,
		gen_rtx_SQRT (V32HFmode,
	operand1),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:3062 */
rtx
gen_avx512fp16_sqrtv8hf2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_SQRT (V8HFmode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:3062 */
rtx
gen_avx512f_sqrtv8df2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_SQRT (V8DFmode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:3076 */
rtx
gen_avx512fp16_vmsqrtv8hf2_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_SQRT (V8HFmode,
	operand1),
	operand3,
	operand4),
	operand2,
	const1_rtx),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:3143 */
rtx
gen_avx512fp16_rsqrtv32hf2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HFmode,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (1,
		operand1),
	55),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:3164 */
rtx
gen_rsqrt14v4sf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (1,
		operand1),
	162),
	operand2,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:3388 */
rtx
gen_ieee_maxv32hf3_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V32HFmode,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	63),
	operand3,
	operand4),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:3388 */
rtx
gen_ieee_minv16hf3_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V16HFmode,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	62),
	operand3,
	operand4),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:3388 */
rtx
gen_ieee_maxv8sf3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SFmode,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	63),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:3388 */
rtx
gen_ieee_maxv8df3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	63));
}

/* ../../gcc/config/i386/sse.md:3388 */
rtx
gen_ieee_minv8df3_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	62),
	operand3,
	operand4),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:3477 */
rtx
gen_avx512fp16_ieee_vmmaxv8hf3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	63),
	operand3,
	operand4),
	operand1,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:3477 */
rtx
gen_sse_ieee_vmmaxv4sf3_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	63),
	operand3,
	operand4),
	operand1,
	const1_rtx),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:3499 */
rtx
gen_vec_addsubv8sf3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SFmode,
	gen_rtx_MINUS (V8SFmode,
	operand1,
	operand2),
	gen_rtx_PLUS (V8SFmode,
	operand1,
	operand2),
	GEN_INT (85L)));
}

/* ../../gcc/config/i386/sse.md:3778 */
rtx
gen_avx_hsubv8sf3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V8SFmode,
	gen_rtx_VEC_CONCAT (V4SFmode,
	gen_rtx_VEC_CONCAT (V2SFmode,
	gen_rtx_MINUS (SFmode,
	gen_rtx_VEC_SELECT (SFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx))),
	gen_rtx_VEC_SELECT (SFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const1_rtx)))),
	gen_rtx_MINUS (SFmode,
	gen_rtx_VEC_SELECT (SFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)]))),
	gen_rtx_VEC_SELECT (SFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const_int_rtx[MAX_SAVED_CONST_INT + (3)]))))),
	gen_rtx_VEC_CONCAT (V2SFmode,
	gen_rtx_MINUS (SFmode,
	gen_rtx_VEC_SELECT (SFmode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx))),
	gen_rtx_VEC_SELECT (SFmode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const1_rtx)))),
	gen_rtx_MINUS (SFmode,
	gen_rtx_VEC_SELECT (SFmode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)]))),
	gen_rtx_VEC_SELECT (SFmode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const_int_rtx[MAX_SAVED_CONST_INT + (3)])))))),
	gen_rtx_VEC_CONCAT (V4SFmode,
	gen_rtx_VEC_CONCAT (V2SFmode,
	gen_rtx_MINUS (SFmode,
	gen_rtx_VEC_SELECT (SFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const_int_rtx[MAX_SAVED_CONST_INT + (4)]))),
	gen_rtx_VEC_SELECT (SFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const_int_rtx[MAX_SAVED_CONST_INT + (5)])))),
	gen_rtx_MINUS (SFmode,
	gen_rtx_VEC_SELECT (SFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const_int_rtx[MAX_SAVED_CONST_INT + (6)]))),
	gen_rtx_VEC_SELECT (SFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const_int_rtx[MAX_SAVED_CONST_INT + (7)]))))),
	gen_rtx_VEC_CONCAT (V2SFmode,
	gen_rtx_MINUS (SFmode,
	gen_rtx_VEC_SELECT (SFmode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const_int_rtx[MAX_SAVED_CONST_INT + (4)]))),
	gen_rtx_VEC_SELECT (SFmode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const_int_rtx[MAX_SAVED_CONST_INT + (5)])))),
	gen_rtx_MINUS (SFmode,
	gen_rtx_VEC_SELECT (SFmode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const_int_rtx[MAX_SAVED_CONST_INT + (6)]))),
	gen_rtx_VEC_SELECT (SFmode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const_int_rtx[MAX_SAVED_CONST_INT + (7)]))))))));
}

/* ../../gcc/config/i386/sse.md:4388 */
rtx
gen_avx512f_cmpv16si3_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (HImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:4388 */
rtx
gen_avx512f_cmpv8di3_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:4388 */
rtx
gen_avx512bw_cmpv32hf3_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:4388 */
rtx
gen_avx512f_cmpv16sf3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (HImode,
	gen_rtx_UNSPEC (HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59),
	operand4));
}

/* ../../gcc/config/i386/sse.md:4388 */
rtx
gen_avx512f_cmpv8df3_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:4480 */
rtx
gen_avx512vl_cmpv16qi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59));
}

/* ../../gcc/config/i386/sse.md:4480 */
rtx
gen_avx512vl_cmpv8hi3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (QImode,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59),
	operand4));
}

/* ../../gcc/config/i386/sse.md:4590 */
rtx
gen_avx512vl_ucmpv8hi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	157));
}

/* ../../gcc/config/i386/sse.md:4679 */
rtx
gen_avx512f_ucmpv8di3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (QImode,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	157),
	operand4));
}

/* ../../gcc/config/i386/sse.md:4826 */
rtx
gen_avx512f_vmcmpv8hf3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (QImode,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59),
	gen_rtx_AND (QImode,
	operand4,
	const1_rtx)));
}

/* ../../gcc/config/i386/sse.md:4844 */
rtx
gen_avx10_2_ucomxhf_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (gen_rtx_REG (CCFPmode,
	17),
	gen_rtx_UNSPEC (CCFPmode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (CCFPmode,
	gen_rtvec (1,
		gen_rtx_UNSPEC (CCFPmode,
	gen_rtvec (2,
		gen_rtx_VEC_SELECT (HFmode,
	operand0,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx))),
		gen_rtx_VEC_SELECT (HFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))),
	61)),
	26),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:4860 */
rtx
gen_avx512fp16_ucomi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (gen_rtx_REG (CCFPmode,
	17),
	gen_rtx_UNSPEC (CCFPmode,
	gen_rtvec (1,
		gen_rtx_COMPARE (CCFPmode,
	gen_rtx_VEC_SELECT (HFmode,
	operand0,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx))),
	gen_rtx_VEC_SELECT (HFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx))))),
	26));
}

/* ../../gcc/config/i386/sse.md:5216 */
rtx
gen_avx512bf16_andnotv8bf3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (V8BFmode,
	gen_rtx_NOT (V8BFmode,
	operand1),
	operand2));
}

/* ../../gcc/config/i386/sse.md:5216 */
rtx
gen_avx_andnotv4df3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DFmode,
	gen_rtx_AND (V4DFmode,
	gen_rtx_NOT (V4DFmode,
	operand1),
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:5644 */
rtx
gen_iorhf3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_IOR (HFmode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:5923 */
rtx
gen_fma_fmadd_v32hf_maskz_1_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V32HFmode,
	gen_rtx_FMA (V32HFmode,
	operand1,
	operand2,
	operand3),
	operand4,
	operand5),
		operand6),
	178));
}

/* ../../gcc/config/i386/sse.md:5923 */
rtx
gen_fma_fmadd_v4df_maskz_1_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4DFmode,
	gen_rtx_FMA (V4DFmode,
	operand1,
	operand2,
	operand3),
	operand4,
	operand5),
		operand6),
	178));
}

/* ../../gcc/config/i386/sse.md:5961 */
rtx
gen_avx512f_fmadd_v8df_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_FMA (V8DFmode,
	operand1,
	operand2,
	operand3),
	operand1,
	operand4),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:5978 */
rtx
gen_avx512vl_fmadd_v8sf_mask3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SFmode,
	gen_rtx_FMA (V8SFmode,
	operand1,
	operand2,
	operand3),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:6025 */
rtx
gen_fma_fmsub_v32hf_maskz_1_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V32HFmode,
	gen_rtx_FMA (V32HFmode,
	operand1,
	operand2,
	gen_rtx_NEG (V32HFmode,
	operand3)),
	operand4,
	operand5),
		operand6),
	178));
}

/* ../../gcc/config/i386/sse.md:6025 */
rtx
gen_fma_fmsub_v4df_maskz_1_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4DFmode,
	gen_rtx_FMA (V4DFmode,
	operand1,
	operand2,
	gen_rtx_NEG (V4DFmode,
	operand3)),
	operand4,
	operand5),
		operand6),
	178));
}

/* ../../gcc/config/i386/sse.md:6065 */
rtx
gen_avx512f_fmsub_v8df_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_FMA (V8DFmode,
	operand1,
	operand2,
	gen_rtx_NEG (V8DFmode,
	operand3)),
	operand1,
	operand4));
}

/* ../../gcc/config/i386/sse.md:6083 */
rtx
gen_avx512fp16_fmsub_v8hf_mask3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_FMA (V8HFmode,
	operand1,
	operand2,
	gen_rtx_NEG (V8HFmode,
	operand3)),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:6083 */
rtx
gen_avx512vl_fmsub_v4df_mask3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DFmode,
	gen_rtx_FMA (V4DFmode,
	operand1,
	operand2,
	gen_rtx_NEG (V4DFmode,
	operand3)),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:6131 */
rtx
gen_fma_fnmadd_v16sf_maskz_1_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V16SFmode,
	gen_rtx_FMA (V16SFmode,
	gen_rtx_NEG (V16SFmode,
	operand1),
	operand2,
	operand3),
	operand4,
	operand5),
		operand6),
	178));
}

/* ../../gcc/config/i386/sse.md:6171 */
rtx
gen_avx512vl_fnmadd_v16hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HFmode,
	gen_rtx_FMA (V16HFmode,
	gen_rtx_NEG (V16HFmode,
	operand1),
	operand2,
	operand3),
	operand1,
	operand4));
}

/* ../../gcc/config/i386/sse.md:6171 */
rtx
gen_avx512f_fnmadd_v8df_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_FMA (V8DFmode,
	gen_rtx_NEG (V8DFmode,
	operand1),
	operand2,
	operand3),
	operand1,
	operand4),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:6189 */
rtx
gen_avx512vl_fnmadd_v8sf_mask3_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8SFmode,
	gen_rtx_FMA (V8SFmode,
	gen_rtx_NEG (V8SFmode,
	operand1),
	operand2,
	operand3),
	operand3,
	operand4),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:6238 */
rtx
gen_fma_fnmsub_v16sf_maskz_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SFmode,
	gen_rtx_FMA (V16SFmode,
	gen_rtx_NEG (V16SFmode,
	operand1),
	operand2,
	gen_rtx_NEG (V16SFmode,
	operand3)),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:6238 */
rtx
gen_fma_fnmsub_v2df_maskz_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_FMA (V2DFmode,
	gen_rtx_NEG (V2DFmode,
	operand1),
	operand2,
	gen_rtx_NEG (V2DFmode,
	operand3)),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:6280 */
rtx
gen_avx512vl_fnmsub_v8sf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SFmode,
	gen_rtx_FMA (V8SFmode,
	gen_rtx_NEG (V8SFmode,
	operand1),
	operand2,
	gen_rtx_NEG (V8SFmode,
	operand3)),
	operand1,
	operand4));
}

/* ../../gcc/config/i386/sse.md:6299 */
rtx
gen_avx512bw_fnmsub_v32hf_mask3_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V32HFmode,
	gen_rtx_FMA (V32HFmode,
	gen_rtx_NEG (V32HFmode,
	operand1),
	operand2,
	gen_rtx_NEG (V32HFmode,
	operand3)),
	operand3,
	operand4),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:6299 */
rtx
gen_avx512vl_fnmsub_v4df_mask3_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4DFmode,
	gen_rtx_FMA (V4DFmode,
	gen_rtx_NEG (V4DFmode,
	operand1),
	operand2,
	gen_rtx_NEG (V4DFmode,
	operand3)),
	operand3,
	operand4),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:6401 */
rtx
gen_fma_fmaddsub_v8df_maskz_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	133),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:6417 */
rtx
gen_avx512fp16_fmaddsub_v8hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	133),
	operand1,
	operand4));
}

/* ../../gcc/config/i386/sse.md:6417 */
rtx
gen_avx512vl_fmaddsub_v4df_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DFmode,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	133),
	operand1,
	operand4));
}

/* ../../gcc/config/i386/sse.md:6435 */
rtx
gen_avx512f_fmaddsub_v16sf_mask3_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V16SFmode,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	133),
	operand3,
	operand4),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:6470 */
rtx
gen_fma_fmsubadd_v16hf_maskz_1_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V16HFmode,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		gen_rtx_NEG (V16HFmode,
	operand3)),
	133),
	operand4,
	operand5),
		operand6),
	178));
}

/* ../../gcc/config/i386/sse.md:6487 */
rtx
gen_avx512bw_fmsubadd_v32hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HFmode,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		gen_rtx_NEG (V32HFmode,
	operand3)),
	133),
	operand1,
	operand4));
}

/* ../../gcc/config/i386/sse.md:6487 */
rtx
gen_avx512vl_fmsubadd_v8sf_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8SFmode,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		gen_rtx_NEG (V8SFmode,
	operand3)),
	133),
	operand1,
	operand4),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:6506 */
rtx
gen_avx512vl_fmsubadd_v16hf_mask3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HFmode,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		gen_rtx_NEG (V16HFmode,
	operand3)),
	133),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:6506 */
rtx
gen_avx512vl_fmsubadd_v4sf_mask3_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		gen_rtx_NEG (V4SFmode,
	operand3)),
	133),
	operand3,
	operand4),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:6646 */
rtx
gen_avx512f_vmfmadd_v2df_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_FMA (V2DFmode,
	operand1,
	operand2,
	operand3),
	operand1,
	operand4),
	operand1,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:6698 */
rtx
gen_avx512f_vmfmadd_v8hf_maskz_1_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_FMA (V8HFmode,
	operand1,
	operand2,
	operand3),
	operand4,
	operand5),
	operand1,
	const1_rtx),
		operand6),
	178));
}

/* ../../gcc/config/i386/sse.md:6779 */
rtx
gen_avx512f_vmfnmadd_v8hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_FMA (V8HFmode,
	gen_rtx_NEG (V8HFmode,
	operand1),
	operand2,
	operand3),
	operand1,
	operand4),
	operand1,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:6800 */
rtx
gen_avx512f_vmfnmadd_v4sf_mask3_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_FMA (V4SFmode,
	gen_rtx_NEG (V4SFmode,
	operand2),
	operand1,
	operand3),
	operand3,
	operand4),
	operand3,
	const1_rtx),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:7140 */
rtx
gen_fma_fmaddc_v32hf_maskz_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HFmode,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	217),
	operand4,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (1,
		operand5),
	223)));
}

/* ../../gcc/config/i386/sse.md:7140 */
rtx
gen_fma_fcmaddc_v16hf_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	219),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:7153 */
rtx
gen_fma_v8hf_fadd_fmul (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_PLUS (V8HFmode,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	221),
	operand3));
}

/* ../../gcc/config/i386/sse.md:7187 */
rtx
gen_fma_fcmaddc_v8hf_fma_zero (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_PLUS (V8HFmode,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	219),
	operand4));
}

/* ../../gcc/config/i386/sse.md:7245 */
rtx
gen_fma_v16hf_fcmaddc_bcst (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (3,
		operand1,
		gen_rtx_SUBREG (V16HFmode,
	operand2,
	0),
		operand3),
	219));
}

/* ../../gcc/config/i386/sse.md:7273 */
rtx
gen_avx512fp16_fmaddc_v8hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	217),
	operand1,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (1,
		operand4),
	223)));
}

/* ../../gcc/config/i386/sse.md:7299 */
rtx
gen_avx512bw_fcmulc_v32hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HFmode,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	222),
	operand3,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (1,
		operand4),
	223)));
}

/* ../../gcc/config/i386/sse.md:7299 */
rtx
gen_avx512fp16_fmulc_v8hf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	221));
}

/* ../../gcc/config/i386/sse.md:7464 */
rtx
gen_avx512fp16_fma_fmaddcsh_v8hf_maskz_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	217),
	operand4,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (1,
		operand5),
	223)),
	operand2,
	const_int_rtx[MAX_SAVED_CONST_INT + (3)]),
		operand6),
	178));
}

/* ../../gcc/config/i386/sse.md:7500 */
rtx
gen_avx512fp16_fcmulcsh_v8hf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	222),
	operand1,
	const_int_rtx[MAX_SAVED_CONST_INT + (3)]));
}

/* ../../gcc/config/i386/sse.md:7612 */
rtx
gen_avx512fp16_vcvtph2uw_v32hi_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V32HImode,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (1,
		operand1),
	156),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:7612 */
rtx
gen_avx512fp16_vcvtph2uqq_v8di_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (1,
		operand1),
	156),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:7612 */
rtx
gen_avx512fp16_vcvtph2uw_v16hi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HImode,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (1,
		operand1),
	156),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:7612 */
rtx
gen_avx512fp16_vcvtph2dq_v8si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (1,
		operand1),
	46));
}

/* ../../gcc/config/i386/sse.md:7612 */
rtx
gen_avx512fp16_vcvtph2uqq_v4di_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4DImode,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (1,
		operand1),
	156),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:7612 */
rtx
gen_avx512fp16_vcvtph2uqq_v2di (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DImode,
	gen_rtvec (1,
		operand1),
	156));
}

/* ../../gcc/config/i386/sse.md:7629 */
rtx
gen_avx512fp16_vcvtw2ph_v16hi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FLOAT (V16HFmode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:7629 */
rtx
gen_avx512fp16_vcvtw2ph_v32hi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FLOAT (V32HFmode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:7629 */
rtx
gen_avx512fp16_vcvtuw2ph_v32hi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HFmode,
	gen_rtx_UNSIGNED_FLOAT (V32HFmode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:7629 */
rtx
gen_avx512fp16_vcvtdq2ph_v16si_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (2,
		gen_rtx_FLOAT (V16HFmode,
	operand1),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:7629 */
rtx
gen_avx512fp16_vcvtqq2ph_v8di_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_FLOAT (V8HFmode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:7697 */
rtx
gen_avx512fp16_vcvtuqq2ph_v4di_mask_round_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_CONCAT (V8HFmode,
	gen_rtx_VEC_MERGE (V4HFmode,
	gen_rtx_UNSIGNED_FLOAT (V4HFmode,
	operand1),
	gen_rtx_VEC_SELECT (V4HFmode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)]))),
	operand3),
	operand4),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:7830 */
rtx
gen_avx512fp16_vcvtusi2sh (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_VEC_DUPLICATE (V8HFmode,
	gen_rtx_UNSIGNED_FLOAT (HFmode,
	operand2)),
	operand1,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:7850 */
rtx
gen_unspec_avx512fp16_fixuns_truncv8hi2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HImode,
	gen_rtx_UNSPEC (V8HImode,
	gen_rtvec (1,
		operand1),
	173),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:7850 */
rtx
gen_unspec_avx512fp16_fix_truncv32hi2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HImode,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (1,
		operand1),
	172),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:7850 */
rtx
gen_unspec_avx512fp16_fixuns_truncv8si2_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (1,
		operand1),
	173),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:7850 */
rtx
gen_unspec_avx512fp16_fixuns_truncv16si2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SImode,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (1,
		operand1),
	173),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:7861 */
rtx
gen_avx512fp16_fix_truncv8hi2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HImode,
	gen_rtx_FIX (V8HImode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:7861 */
rtx
gen_avx512fp16_fixuns_truncv16hi2_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V16HImode,
	gen_rtx_UNSIGNED_FIX (V16HImode,
	operand1),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:7861 */
rtx
gen_avx512fp16_fixuns_truncv8si2_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (2,
		gen_rtx_UNSIGNED_FIX (V8SImode,
	operand1),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:7861 */
rtx
gen_avx512fp16_fixuns_truncv16si2_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V16SImode,
	gen_rtx_UNSIGNED_FIX (V16SImode,
	operand1),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:7888 */
rtx
gen_unspec_avx512fp16_fix_truncv4di2_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (1,
		operand1),
	172),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:7899 */
rtx
gen_avx512fp16_fixuns_truncv4si2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_UNSIGNED_FIX (V4SImode,
	gen_rtx_VEC_SELECT (V4HFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)])))),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:7949 */
rtx
gen_avx512fp16_fixuns_truncv2di2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DImode,
	gen_rtx_UNSIGNED_FIX (V2DImode,
	gen_rtx_VEC_SELECT (V2HFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		const0_rtx,
		const1_rtx)))),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:7982 */
rtx
gen_avx512fp16_fix_truncdi2_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (DImode,
	gen_rtvec (2,
		gen_rtx_FIX (DImode,
	gen_rtx_VEC_SELECT (HFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:8014 */
rtx
gen_avx512fp16_float_extend_phv16sf2_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V16SFmode,
	gen_rtx_FLOAT_EXTEND (V16SFmode,
	operand1),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:8108 */
rtx
gen_avx512fp16_vcvtpd2ph_v8df (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FLOAT_TRUNCATE (V8HFmode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:8108 */
rtx
gen_avx512fp16_vcvtpd2ph_v8df_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_FLOAT_TRUNCATE (V8HFmode,
	operand1),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:8288 */
rtx
gen_avx512fp16_vcvtsh2sd_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_VEC_DUPLICATE (V2DFmode,
	gen_rtx_FLOAT_EXTEND (DFmode,
	gen_rtx_VEC_SELECT (HFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx))))),
	operand3,
	operand4),
	operand2,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:8304 */
rtx
gen_avx512fp16_vcvtsh2ss_mem (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_VEC_DUPLICATE (V4SFmode,
	gen_rtx_FLOAT_EXTEND (SFmode,
	operand1)),
	operand2,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:8318 */
rtx
gen_avx512fp16_vcvtss2sh_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_VEC_DUPLICATE (V8HFmode,
	gen_rtx_FLOAT_TRUNCATE (HFmode,
	gen_rtx_VEC_SELECT (SFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx))))),
	operand3,
	operand4),
	operand2,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:8510 */
rtx
gen_sse_cvtsi2ssq (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_VEC_DUPLICATE (V4SFmode,
	gen_rtx_FLOAT (SFmode,
	operand2)),
	operand1,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:8574 */
rtx
gen_unspec_sse_cvttss2si_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (SImode,
	gen_rtvec (1,
		operand1),
	172),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:8619 */
rtx
gen_cvtusi2ss64_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_VEC_DUPLICATE (V4SFmode,
	gen_rtx_UNSIGNED_FLOAT (SFmode,
	operand2)),
	operand1,
	const1_rtx),
		operand3),
	178));
}

/* ../../gcc/config/i386/sse.md:8633 */
rtx
gen_floatv4siv4sf2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_FLOAT (V4SFmode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:8674 */
rtx
gen_avx_fix_notruncv8sfv8si_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (1,
		operand1),
	46),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:8712 */
rtx
gen_avx512dq_cvtps2qqv8di_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8DImode,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (1,
		operand1),
	46),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:8758 */
rtx
gen_unspec_fix_truncv16sfv16si2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SImode,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (1,
		operand1),
	172),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:8769 */
rtx
gen_fixuns_truncv16sfv16si2_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (2,
		gen_rtx_UNSIGNED_FIX (V16SImode,
	operand1),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:8799 */
rtx
gen_unspec_fix_truncv4sfv4si2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (1,
		operand1),
	172));
}

/* ../../gcc/config/i386/sse.md:8929 */
rtx
gen_sse2_cvttpd2pi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FIX (V2SImode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:9016 */
rtx
gen_avx512f_vcvtss2usiq (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (DImode,
	gen_rtvec (1,
		gen_rtx_VEC_SELECT (SFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))),
	156));
}

/* ../../gcc/config/i386/sse.md:9052 */
rtx
gen_avx512f_vcvtsd2usi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (1,
		gen_rtx_VEC_SELECT (DFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))),
	156));
}

/* ../../gcc/config/i386/sse.md:9076 */
rtx
gen_avx512f_vcvttsd2usi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSIGNED_FIX (SImode,
	gen_rtx_VEC_SELECT (DFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))));
}

/* ../../gcc/config/i386/sse.md:9119 */
rtx
gen_unspec_sse2_cvttsd2si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (1,
		operand1),
	172));
}

/* ../../gcc/config/i386/sse.md:9158 */
rtx
gen_floatv8siv8df2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_FLOAT (V8DFmode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:9167 */
rtx
gen_floatunsv8div8df2_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_UNSIGNED_FLOAT (V8DFmode,
	operand1),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:9181 */
rtx
gen_floatv8div8sf2_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (2,
		gen_rtx_FLOAT (V8SFmode,
	operand1),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:9181 */
rtx
gen_floatv4div4sf2_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_FLOAT (V4SFmode,
	operand1),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:9381 */
rtx
gen_sse2_cvtdq2pd_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_FLOAT (V2DFmode,
	gen_rtx_VEC_SELECT (V2SImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		const0_rtx,
		const1_rtx)))),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:9495 */
rtx
gen_fixuns_notruncv8dfv8si2_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (1,
		operand1),
	156),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:9553 */
rtx
gen_unspec_fix_truncv8dfv8si2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (1,
		operand1),
	172));
}

/* ../../gcc/config/i386/sse.md:9553 */
rtx
gen_unspec_fixuns_truncv8dfv8si2_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (1,
		operand1),
	173),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:9644 */
rtx
gen_unspec_fix_truncv4dfv4si2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (1,
		operand1),
	172),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:9675 */
rtx
gen_fixuns_truncv4dfv4si2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_UNSIGNED_FIX (V4SImode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:9684 */
rtx
gen_unspec_fix_truncv4dfv4di2_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (1,
		operand1),
	172),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:9684 */
rtx
gen_unspec_fixuns_truncv2dfv2di2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DImode,
	gen_rtx_UNSPEC (V2DImode,
	gen_rtvec (1,
		operand1),
	173),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:9695 */
rtx
gen_fix_truncv4dfv4di2_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4DImode,
	gen_rtx_FIX (V4DImode,
	operand1),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:9705 */
rtx
gen_fix_notruncv4dfv4di2_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (1,
		operand1),
	46),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:9716 */
rtx
gen_fixuns_notruncv4dfv4di2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (1,
		operand1),
	156));
}

/* ../../gcc/config/i386/sse.md:9727 */
rtx
gen_unspec_fix_truncv8sfv8di2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DImode,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (1,
		operand1),
	172),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:9727 */
rtx
gen_unspec_fixuns_truncv4sfv4di2_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (1,
		operand1),
	173),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:9738 */
rtx
gen_fixuns_truncv4sfv4di2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DImode,
	gen_rtx_UNSIGNED_FIX (V4DImode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:9898 */
rtx
gen_unspec_fixuns_truncv4sfv4si2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (1,
		operand1),
	173),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:9995 */
rtx
gen_sse2_cvtsd2ss_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_VEC_DUPLICATE (V4SFmode,
	gen_rtx_FLOAT_TRUNCATE (V2SFmode,
	operand2)),
	operand1,
	const1_rtx),
		operand3),
	178));
}

/* ../../gcc/config/i386/sse.md:10092 */
rtx
gen_avx_cvtpd2ps256_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		gen_rtx_FLOAT_TRUNCATE (V4SFmode,
	operand1),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:10217 */
rtx
gen_avx_cvtps2pd256_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DFmode,
	gen_rtx_FLOAT_EXTEND (V4DFmode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:10265 */
rtx
gen_avx512vl_cvtd2maskv4si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (1,
		operand1),
	191));
}

/* ../../gcc/config/i386/sse.md:11095 */
rtx
gen_sse_movlhps (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_SELECT (V4SFmode,
	gen_rtx_VEC_CONCAT (V8SFmode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)]))));
}

/* ../../gcc/config/i386/sse.md:11226 */
rtx
gen_avx512f_unpcklps512_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SFmode,
	gen_rtx_VEC_SELECT (V16SFmode,
	gen_rtx_VEC_CONCAT (V32SFmode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (16,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (16)],
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (17)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (20)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (21)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (24)],
		const_int_rtx[MAX_SAVED_CONST_INT + (9)],
		const_int_rtx[MAX_SAVED_CONST_INT + (25)],
		const_int_rtx[MAX_SAVED_CONST_INT + (12)],
		const_int_rtx[MAX_SAVED_CONST_INT + (28)],
		const_int_rtx[MAX_SAVED_CONST_INT + (13)],
		const_int_rtx[MAX_SAVED_CONST_INT + (29)]))),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:11546 */
rtx
gen_sse_shufps_v4si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_SELECT (V4SImode,
	gen_rtx_VEC_CONCAT (V8SImode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		operand3,
		operand4,
		operand5,
		operand6))));
}

/* ../../gcc/config/i386/sse.md:11668 */
rtx
gen_sse_loadlps (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V4SFmode,
	operand2,
	gen_rtx_VEC_SELECT (V2SFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)])))));
}

/* ../../gcc/config/i386/sse.md:12052 */
rtx
gen_vec_setv16hi_0 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HImode,
	gen_rtx_VEC_DUPLICATE (V16HImode,
	operand2),
	operand1,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:12159 */
rtx
gen_vec_setv8sf_0 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SFmode,
	gen_rtx_VEC_DUPLICATE (V8SFmode,
	operand2),
	operand1,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:12613 */
rtx
gen_vec_extract_lo_v8df_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DFmode,
	gen_rtx_VEC_SELECT (V4DFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)]))),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:12699 */
rtx
gen_vec_extract_hi_v16sf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_SELECT (V8SFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (9)],
		const_int_rtx[MAX_SAVED_CONST_INT + (10)],
		const_int_rtx[MAX_SAVED_CONST_INT + (11)],
		const_int_rtx[MAX_SAVED_CONST_INT + (12)],
		const_int_rtx[MAX_SAVED_CONST_INT + (13)],
		const_int_rtx[MAX_SAVED_CONST_INT + (14)],
		const_int_rtx[MAX_SAVED_CONST_INT + (15)]))));
}

/* ../../gcc/config/i386/sse.md:12875 */
rtx
gen_vec_extract_lo_v4di (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_SELECT (V2DImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		const0_rtx,
		const1_rtx))));
}

/* ../../gcc/config/i386/sse.md:12979 */
rtx
gen_vec_extract_hi_v8si_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_VEC_SELECT (V4SImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)]))),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:13073 */
rtx
gen_vec_extract_lo_v16hi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_SELECT (V8HImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)]))));
}

/* ../../gcc/config/i386/sse.md:13087 */
rtx
gen_vec_extract_hi_v16hf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_SELECT (V8HFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (9)],
		const_int_rtx[MAX_SAVED_CONST_INT + (10)],
		const_int_rtx[MAX_SAVED_CONST_INT + (11)],
		const_int_rtx[MAX_SAVED_CONST_INT + (12)],
		const_int_rtx[MAX_SAVED_CONST_INT + (13)],
		const_int_rtx[MAX_SAVED_CONST_INT + (14)],
		const_int_rtx[MAX_SAVED_CONST_INT + (15)]))));
}

/* ../../gcc/config/i386/sse.md:13428 */
rtx
gen_avx512f_movddup512_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_VEC_SELECT (V8DFmode,
	gen_rtx_VEC_CONCAT (V16DFmode,
	operand1,
	operand1),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (10)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (12)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (14)]))),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:13603 */
rtx
gen_avx512f_vmscalefv8hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	58),
	operand3,
	operand4),
	operand1,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:13617 */
rtx
gen_avx512bw_scalefv32hf_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	58),
		operand3),
	178));
}

/* ../../gcc/config/i386/sse.md:13617 */
rtx
gen_avx512f_scalefv16sf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	58));
}

/* ../../gcc/config/i386/sse.md:13617 */
rtx
gen_avx512vl_scalefv4sf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	58));
}

/* ../../gcc/config/i386/sse.md:13617 */
rtx
gen_avx512vl_scalefv4df (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	58));
}

/* ../../gcc/config/i386/sse.md:13643 */
rtx
gen_avx512vl_vternlogv8si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (4,
		operand1,
		operand2,
		operand3,
		operand4),
	164));
}

/* ../../gcc/config/i386/sse.md:13643 */
rtx
gen_avx512vl_vternlogv2di_maskz_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DImode,
	gen_rtx_UNSPEC (V2DImode,
	gen_rtvec (4,
		operand1,
		operand2,
		operand3,
		operand4),
	164),
	operand5,
	operand6));
}

/* ../../gcc/config/i386/sse.md:14027 */
rtx
gen_avx512f_getexpv16sf_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (1,
		operand1),
	165),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:14027 */
rtx
gen_avx512f_getexpv8df_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (1,
		operand1),
	165),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:14036 */
rtx
gen_avx512f_sgetexpv8hf_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	165),
	operand3,
	operand4),
	operand1,
	const1_rtx),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:14050 */
rtx
gen_avx512vl_alignv4si_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	167),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:14138 */
rtx
gen_avx512vl_fixupimmv8sf_maskz_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SFmode,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (4,
		operand1,
		operand2,
		operand3,
		operand4),
	163),
	operand5,
	operand6));
}

/* ../../gcc/config/i386/sse.md:14138 */
rtx
gen_avx512vl_fixupimmv2df (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (4,
		operand1,
		operand2,
		operand3,
		operand4),
	163));
}

/* ../../gcc/config/i386/sse.md:14151 */
rtx
gen_avx512f_fixupimmv8df_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (4,
		operand1,
		operand2,
		operand3,
		operand4),
	163),
	operand1,
	operand5));
}

/* ../../gcc/config/i386/sse.md:14183 */
rtx
gen_avx512f_sfixupimmv2df_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (4,
		operand1,
		operand2,
		operand3,
		operand4),
	163),
	operand2,
	const1_rtx),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:14218 */
rtx
gen_avx512bw_rndscalev32hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HFmode,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	94),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:14218 */
rtx
gen_avx512f_rndscalev16sf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SFmode,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	94),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:14218 */
rtx
gen_avx512f_rndscalev8df_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	94),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:14230 */
rtx
gen_avx512f_rndscalev8hf_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		operand2,
		operand3),
	94),
	operand4,
	operand5),
	operand1,
	const1_rtx),
		operand6),
	178));
}

/* ../../gcc/config/i386/sse.md:14335 */
rtx
gen_avx512f_shufpd512_1_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED,
	rtx operand7 ATTRIBUTE_UNUSED,
	rtx operand8 ATTRIBUTE_UNUSED,
	rtx operand9 ATTRIBUTE_UNUSED,
	rtx operand10 ATTRIBUTE_UNUSED,
	rtx operand11 ATTRIBUTE_UNUSED,
	rtx operand12 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_VEC_SELECT (V8DFmode,
	gen_rtx_VEC_CONCAT (V16DFmode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		operand3,
		operand4,
		operand5,
		operand6,
		operand7,
		operand8,
		operand9,
		operand10))),
	operand11,
	operand12));
}

/* ../../gcc/config/i386/sse.md:14537 */
rtx
gen_vec_interleave_lowv2di_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DImode,
	gen_rtx_VEC_SELECT (V2DImode,
	gen_rtx_VEC_CONCAT (V4DImode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)]))),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:14904 */
rtx
gen_vec_concatv2df (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V2DFmode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:15128 */
rtx
gen_avx512f_ss_truncatev8div8si2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_SS_TRUNCATE (V8SImode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:15200 */
rtx
gen_avx512bw_truncatev32hiv32qi2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32QImode,
	gen_rtx_TRUNCATE (V32QImode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:15300 */
rtx
gen_avx512vl_us_truncatev16hiv16qi2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16QImode,
	gen_rtx_US_TRUNCATE (V16QImode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:15361 */
rtx
gen_avx512vl_truncatev4siv4qi2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V16QImode,
	gen_rtx_TRUNCATE (V4QImode,
	operand1),
	operand2));
}

/* ../../gcc/config/i386/sse.md:15463 */
rtx
gen_avx512vl_truncatev2div2qi2_mask_store_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2QImode,
	gen_rtx_TRUNCATE (V2QImode,
	operand1),
	operand0,
	operand2));
}

/* ../../gcc/config/i386/sse.md:15514 */
rtx
gen_avx512vl_us_truncatev4div4qi2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V16QImode,
	gen_rtx_VEC_MERGE (V4QImode,
	gen_rtx_US_TRUNCATE (V4QImode,
	operand1),
	gen_rtx_VEC_SELECT (V4QImode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)]))),
	operand3),
	gen_rtx_CONST_VECTOR (V12QImode,
	gen_rtvec (12,
		const0_rtx,
		const0_rtx,
		const0_rtx,
		const0_rtx,
		const0_rtx,
		const0_rtx,
		const0_rtx,
		const0_rtx,
		const0_rtx,
		const0_rtx,
		const0_rtx,
		const0_rtx))));
}

/* ../../gcc/config/i386/sse.md:15656 */
rtx
gen_avx512vl_us_truncatev8hiv8qi2_mask_store_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8QImode,
	gen_rtx_US_TRUNCATE (V8QImode,
	operand1),
	operand0,
	operand2));
}

/* ../../gcc/config/i386/sse.md:15716 */
rtx
gen_avx512vl_ss_truncatev4div4hi2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V8HImode,
	gen_rtx_SS_TRUNCATE (V4HImode,
	operand1),
	operand2));
}

/* ../../gcc/config/i386/sse.md:15716 */
rtx
gen_avx512vl_truncatev2div2hi2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V8HImode,
	gen_rtx_TRUNCATE (V2HImode,
	operand1),
	operand2));
}

/* ../../gcc/config/i386/sse.md:15774 */
rtx
gen_avx512vl_truncatev4div4hi2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V8HImode,
	gen_rtx_VEC_MERGE (V4HImode,
	gen_rtx_TRUNCATE (V4HImode,
	operand1),
	gen_rtx_VEC_SELECT (V4HImode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)]))),
	operand3),
	gen_rtx_CONST_VECTOR (V4HImode,
	gen_rtvec (4,
		const0_rtx,
		const0_rtx,
		const0_rtx,
		const0_rtx))));
}

/* ../../gcc/config/i386/sse.md:15957 */
rtx
gen_avx512vl_truncatev2div2si2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V4SImode,
	gen_rtx_TRUNCATE (V2SImode,
	operand1),
	operand2));
}

/* ../../gcc/config/i386/sse.md:16047 */
rtx
gen_avx512vl_truncatev2div2si2_mask_store_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2SImode,
	gen_rtx_TRUNCATE (V2SImode,
	operand1),
	operand0,
	operand2));
}

/* ../../gcc/config/i386/sse.md:16172 */
rtx
gen_avx512f_ss_truncatev8div16qi2_mask_store_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8QImode,
	gen_rtx_SS_TRUNCATE (V8QImode,
	operand1),
	operand0,
	operand2));
}

/* ../../gcc/config/i386/sse.md:16665 */
rtx
gen_avx512bw_pmaddwd512v8hi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (2,
		operand1,
		operand2),
	188));
}

/* ../../gcc/config/i386/sse.md:17103 */
rtx
gen_ashrv16hi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ASHIFTRT (V16HImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:17133 */
rtx
gen_ashrv8di3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DImode,
	gen_rtx_ASHIFTRT (V8DImode,
	operand1,
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:17285 */
rtx
gen_lshrv4di3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DImode,
	gen_rtx_LSHIFTRT (V4DImode,
	operand1,
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:17299 */
rtx
gen_ashlv2di3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (V2DImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:17373 */
rtx
gen_ashlv8di3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (V8DImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:17592 */
rtx
gen_avx512bw_ashlv2ti3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (V2TImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:17634 */
rtx
gen_avx512f_rolvv16si_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SImode,
	gen_rtx_ROTATE (V16SImode,
	operand1,
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:17634 */
rtx
gen_avx512f_rorvv8di (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ROTATERT (V8DImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:17634 */
rtx
gen_avx512vl_rorvv2di (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ROTATERT (V2DImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:17644 */
rtx
gen_avx512vl_rorv8si_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_ROTATERT (V8SImode,
	operand1,
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:17644 */
rtx
gen_avx512vl_rorv4di_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DImode,
	gen_rtx_ROTATERT (V4DImode,
	operand1,
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:17714 */
rtx
gen_umaxv16qi3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16QImode,
	gen_rtx_UMAX (V16QImode,
	operand1,
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:17714 */
rtx
gen_smaxv16hi3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HImode,
	gen_rtx_SMAX (V16HImode,
	operand1,
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:18263 */
rtx
gen_avx2_gtv16hi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_GT (V16HImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:18925 */
rtx
gen_iorv1ti3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_IOR (V1TImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:19046 */
rtx
gen_avx512vl_testmv32qi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (2,
		operand1,
		operand2),
	158));
}

/* ../../gcc/config/i386/sse.md:19046 */
rtx
gen_avx512vl_testmv8hi3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (QImode,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	158),
	operand3));
}

/* ../../gcc/config/i386/sse.md:19046 */
rtx
gen_avx512vl_testmv2di3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (QImode,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	158),
	operand3));
}

/* ../../gcc/config/i386/sse.md:19057 */
rtx
gen_avx512vl_testnmv8hi3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (QImode,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	159),
	operand3));
}

/* ../../gcc/config/i386/sse.md:19057 */
rtx
gen_avx512vl_testnmv2di3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (QImode,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	159),
	operand3));
}

/* ../../gcc/config/i386/sse.md:19338 */
rtx
gen_avx512bw_packssdw (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_SELECT (V32HImode,
	gen_rtx_VEC_CONCAT (V32HImode,
	gen_rtx_SS_TRUNCATE (V16HImode,
	operand1),
	gen_rtx_SS_TRUNCATE (V16HImode,
	operand2)),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (32,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (16)],
		const_int_rtx[MAX_SAVED_CONST_INT + (17)],
		const_int_rtx[MAX_SAVED_CONST_INT + (18)],
		const_int_rtx[MAX_SAVED_CONST_INT + (19)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)],
		const_int_rtx[MAX_SAVED_CONST_INT + (20)],
		const_int_rtx[MAX_SAVED_CONST_INT + (21)],
		const_int_rtx[MAX_SAVED_CONST_INT + (22)],
		const_int_rtx[MAX_SAVED_CONST_INT + (23)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (9)],
		const_int_rtx[MAX_SAVED_CONST_INT + (10)],
		const_int_rtx[MAX_SAVED_CONST_INT + (11)],
		const_int_rtx[MAX_SAVED_CONST_INT + (24)],
		const_int_rtx[MAX_SAVED_CONST_INT + (25)],
		const_int_rtx[MAX_SAVED_CONST_INT + (26)],
		const_int_rtx[MAX_SAVED_CONST_INT + (27)],
		const_int_rtx[MAX_SAVED_CONST_INT + (12)],
		const_int_rtx[MAX_SAVED_CONST_INT + (13)],
		const_int_rtx[MAX_SAVED_CONST_INT + (14)],
		const_int_rtx[MAX_SAVED_CONST_INT + (15)],
		const_int_rtx[MAX_SAVED_CONST_INT + (28)],
		const_int_rtx[MAX_SAVED_CONST_INT + (29)],
		const_int_rtx[MAX_SAVED_CONST_INT + (30)],
		const_int_rtx[MAX_SAVED_CONST_INT + (31)]))));
}

/* ../../gcc/config/i386/sse.md:19482 */
rtx
gen_avx512bw_interleave_lowv64qi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_SELECT (V64QImode,
	gen_rtx_VEC_CONCAT (V128QImode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (64,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (64)],
		const1_rtx,
		GEN_INT (65L),
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		GEN_INT (66L),
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		GEN_INT (67L),
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		GEN_INT (68L),
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		GEN_INT (69L),
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		GEN_INT (70L),
		const_int_rtx[MAX_SAVED_CONST_INT + (7)],
		GEN_INT (71L),
		const_int_rtx[MAX_SAVED_CONST_INT + (16)],
		GEN_INT (80L),
		const_int_rtx[MAX_SAVED_CONST_INT + (17)],
		GEN_INT (81L),
		const_int_rtx[MAX_SAVED_CONST_INT + (18)],
		GEN_INT (82L),
		const_int_rtx[MAX_SAVED_CONST_INT + (19)],
		GEN_INT (83L),
		const_int_rtx[MAX_SAVED_CONST_INT + (20)],
		GEN_INT (84L),
		const_int_rtx[MAX_SAVED_CONST_INT + (21)],
		GEN_INT (85L),
		const_int_rtx[MAX_SAVED_CONST_INT + (22)],
		GEN_INT (86L),
		const_int_rtx[MAX_SAVED_CONST_INT + (23)],
		GEN_INT (87L),
		const_int_rtx[MAX_SAVED_CONST_INT + (32)],
		GEN_INT (96L),
		const_int_rtx[MAX_SAVED_CONST_INT + (33)],
		GEN_INT (97L),
		const_int_rtx[MAX_SAVED_CONST_INT + (34)],
		GEN_INT (98L),
		const_int_rtx[MAX_SAVED_CONST_INT + (35)],
		GEN_INT (99L),
		const_int_rtx[MAX_SAVED_CONST_INT + (36)],
		GEN_INT (100L),
		const_int_rtx[MAX_SAVED_CONST_INT + (37)],
		GEN_INT (101L),
		const_int_rtx[MAX_SAVED_CONST_INT + (38)],
		GEN_INT (102L),
		const_int_rtx[MAX_SAVED_CONST_INT + (39)],
		GEN_INT (103L),
		const_int_rtx[MAX_SAVED_CONST_INT + (48)],
		GEN_INT (112L),
		const_int_rtx[MAX_SAVED_CONST_INT + (49)],
		GEN_INT (113L),
		const_int_rtx[MAX_SAVED_CONST_INT + (50)],
		GEN_INT (114L),
		const_int_rtx[MAX_SAVED_CONST_INT + (51)],
		GEN_INT (115L),
		const_int_rtx[MAX_SAVED_CONST_INT + (52)],
		GEN_INT (116L),
		const_int_rtx[MAX_SAVED_CONST_INT + (53)],
		GEN_INT (117L),
		const_int_rtx[MAX_SAVED_CONST_INT + (54)],
		GEN_INT (118L),
		const_int_rtx[MAX_SAVED_CONST_INT + (55)],
		GEN_INT (119L)))));
}

/* ../../gcc/config/i386/sse.md:19578 */
rtx
gen_avx512bw_interleave_highv32bf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32BFmode,
	gen_rtx_VEC_SELECT (V32BFmode,
	gen_rtx_VEC_CONCAT (V64BFmode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (32,
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (36)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (37)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (38)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)],
		const_int_rtx[MAX_SAVED_CONST_INT + (39)],
		const_int_rtx[MAX_SAVED_CONST_INT + (12)],
		const_int_rtx[MAX_SAVED_CONST_INT + (44)],
		const_int_rtx[MAX_SAVED_CONST_INT + (13)],
		const_int_rtx[MAX_SAVED_CONST_INT + (45)],
		const_int_rtx[MAX_SAVED_CONST_INT + (14)],
		const_int_rtx[MAX_SAVED_CONST_INT + (46)],
		const_int_rtx[MAX_SAVED_CONST_INT + (15)],
		const_int_rtx[MAX_SAVED_CONST_INT + (47)],
		const_int_rtx[MAX_SAVED_CONST_INT + (20)],
		const_int_rtx[MAX_SAVED_CONST_INT + (52)],
		const_int_rtx[MAX_SAVED_CONST_INT + (21)],
		const_int_rtx[MAX_SAVED_CONST_INT + (53)],
		const_int_rtx[MAX_SAVED_CONST_INT + (22)],
		const_int_rtx[MAX_SAVED_CONST_INT + (54)],
		const_int_rtx[MAX_SAVED_CONST_INT + (23)],
		const_int_rtx[MAX_SAVED_CONST_INT + (55)],
		const_int_rtx[MAX_SAVED_CONST_INT + (28)],
		const_int_rtx[MAX_SAVED_CONST_INT + (60)],
		const_int_rtx[MAX_SAVED_CONST_INT + (29)],
		const_int_rtx[MAX_SAVED_CONST_INT + (61)],
		const_int_rtx[MAX_SAVED_CONST_INT + (30)],
		const_int_rtx[MAX_SAVED_CONST_INT + (62)],
		const_int_rtx[MAX_SAVED_CONST_INT + (31)],
		const_int_rtx[MAX_SAVED_CONST_INT + (63)]))),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:19646 */
rtx
gen_avx512bw_interleave_lowv32bf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32BFmode,
	gen_rtx_VEC_SELECT (V32BFmode,
	gen_rtx_VEC_CONCAT (V64BFmode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (32,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (32)],
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (33)],
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (34)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (35)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (40)],
		const_int_rtx[MAX_SAVED_CONST_INT + (9)],
		const_int_rtx[MAX_SAVED_CONST_INT + (41)],
		const_int_rtx[MAX_SAVED_CONST_INT + (10)],
		const_int_rtx[MAX_SAVED_CONST_INT + (42)],
		const_int_rtx[MAX_SAVED_CONST_INT + (11)],
		const_int_rtx[MAX_SAVED_CONST_INT + (43)],
		const_int_rtx[MAX_SAVED_CONST_INT + (16)],
		const_int_rtx[MAX_SAVED_CONST_INT + (48)],
		const_int_rtx[MAX_SAVED_CONST_INT + (17)],
		const_int_rtx[MAX_SAVED_CONST_INT + (49)],
		const_int_rtx[MAX_SAVED_CONST_INT + (18)],
		const_int_rtx[MAX_SAVED_CONST_INT + (50)],
		const_int_rtx[MAX_SAVED_CONST_INT + (19)],
		const_int_rtx[MAX_SAVED_CONST_INT + (51)],
		const_int_rtx[MAX_SAVED_CONST_INT + (24)],
		const_int_rtx[MAX_SAVED_CONST_INT + (56)],
		const_int_rtx[MAX_SAVED_CONST_INT + (25)],
		const_int_rtx[MAX_SAVED_CONST_INT + (57)],
		const_int_rtx[MAX_SAVED_CONST_INT + (26)],
		const_int_rtx[MAX_SAVED_CONST_INT + (58)],
		const_int_rtx[MAX_SAVED_CONST_INT + (27)],
		const_int_rtx[MAX_SAVED_CONST_INT + (59)]))),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:19769 */
rtx
gen_avx2_interleave_lowv8si_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_VEC_SELECT (V8SImode,
	gen_rtx_VEC_CONCAT (V16SImode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (9)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (12)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (13)]))),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:20032 */
rtx
gen_avx512dq_vinserti64x2_1_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DImode,
	gen_rtx_VEC_MERGE (V8DImode,
	operand1,
	gen_rtx_VEC_DUPLICATE (V8DImode,
	operand2),
	operand3),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:20102 */
rtx
gen_vec_set_hi_v16si_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SImode,
	gen_rtx_VEC_CONCAT (V16SImode,
	gen_rtx_VEC_SELECT (V8SImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)]))),
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:20222 */
rtx
gen_avx512f_shuf_f64x2_1_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED,
	rtx operand7 ATTRIBUTE_UNUSED,
	rtx operand8 ATTRIBUTE_UNUSED,
	rtx operand9 ATTRIBUTE_UNUSED,
	rtx operand10 ATTRIBUTE_UNUSED,
	rtx operand11 ATTRIBUTE_UNUSED,
	rtx operand12 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_VEC_SELECT (V8DFmode,
	gen_rtx_VEC_CONCAT (V16DFmode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		operand3,
		operand4,
		operand5,
		operand6,
		operand7,
		operand8,
		operand9,
		operand10))),
	operand11,
	operand12));
}

/* ../../gcc/config/i386/sse.md:20527 */
rtx
gen_avx512f_pshufd_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED,
	rtx operand7 ATTRIBUTE_UNUSED,
	rtx operand8 ATTRIBUTE_UNUSED,
	rtx operand9 ATTRIBUTE_UNUSED,
	rtx operand10 ATTRIBUTE_UNUSED,
	rtx operand11 ATTRIBUTE_UNUSED,
	rtx operand12 ATTRIBUTE_UNUSED,
	rtx operand13 ATTRIBUTE_UNUSED,
	rtx operand14 ATTRIBUTE_UNUSED,
	rtx operand15 ATTRIBUTE_UNUSED,
	rtx operand16 ATTRIBUTE_UNUSED,
	rtx operand17 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_SELECT (V16SImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (16,
		operand2,
		operand3,
		operand4,
		operand5,
		operand6,
		operand7,
		operand8,
		operand9,
		operand10,
		operand11,
		operand12,
		operand13,
		operand14,
		operand15,
		operand16,
		operand17))));
}

/* ../../gcc/config/i386/sse.md:20917 */
rtx
gen_avx2_pshufhw_1_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED,
	rtx operand7 ATTRIBUTE_UNUSED,
	rtx operand8 ATTRIBUTE_UNUSED,
	rtx operand9 ATTRIBUTE_UNUSED,
	rtx operand10 ATTRIBUTE_UNUSED,
	rtx operand11 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HImode,
	gen_rtx_VEC_SELECT (V16HImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (16,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		operand2,
		operand3,
		operand4,
		operand5,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (9)],
		const_int_rtx[MAX_SAVED_CONST_INT + (10)],
		const_int_rtx[MAX_SAVED_CONST_INT + (11)],
		operand6,
		operand7,
		operand8,
		operand9))),
	operand10,
	operand11));
}

/* ../../gcc/config/i386/sse.md:22575 */
rtx
gen_ssse3_phsubwv8hi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_MINUS (V8HImode,
	gen_rtx_VEC_SELECT (V8HImode,
	gen_rtx_VEC_CONCAT (V16HImode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (10)],
		const_int_rtx[MAX_SAVED_CONST_INT + (12)],
		const_int_rtx[MAX_SAVED_CONST_INT + (14)]))),
	gen_rtx_VEC_SELECT (V8HImode,
	gen_rtx_VEC_CONCAT (V16HImode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)],
		const_int_rtx[MAX_SAVED_CONST_INT + (9)],
		const_int_rtx[MAX_SAVED_CONST_INT + (11)],
		const_int_rtx[MAX_SAVED_CONST_INT + (13)],
		const_int_rtx[MAX_SAVED_CONST_INT + (15)])))));
}

/* ../../gcc/config/i386/sse.md:22665 */
rtx
gen_ssse3_phadddv4si3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_PLUS (V4SImode,
	gen_rtx_VEC_SELECT (V4SImode,
	gen_rtx_VEC_CONCAT (V8SImode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)]))),
	gen_rtx_VEC_SELECT (V4SImode,
	gen_rtx_VEC_CONCAT (V8SImode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)])))));
}

/* ../../gcc/config/i386/sse.md:22786 */
rtx
gen_avx512bw_pmaddubsw512v16hi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HImode,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (2,
		operand1,
		operand2),
	187),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:23111 */
rtx
gen_avx2_pshufbv32qi3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32QImode,
	gen_rtx_UNSPEC (V32QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	52),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:23178 */
rtx
gen_avx2_psignv16hi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (2,
		operand1,
		operand2),
	120));
}

/* ../../gcc/config/i386/sse.md:23195 */
rtx
gen_ssse3_psignv4hi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4HImode,
	gen_rtvec (2,
		operand1,
		operand2),
	120));
}

/* ../../gcc/config/i386/sse.md:23234 */
rtx
gen_avx2_palignrv2ti (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2TImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	121));
}

/* ../../gcc/config/i386/sse.md:23360 */
rtx
gen_absv8di2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DImode,
	gen_rtx_ABS (V8DImode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:23373 */
rtx
gen_absv8hi2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HImode,
	gen_rtx_ABS (V8HImode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:23490 */
rtx
gen_sse4_1_blendps (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	operand2,
	operand1,
	operand3));
}

/* ../../gcc/config/i386/sse.md:23537 */
rtx
gen_sse4_1_blendvsd (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (DFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	51));
}

/* ../../gcc/config/i386/sse.md:23788 */
rtx
gen_sse4_1_mpsadbw (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	128));
}

/* ../../gcc/config/i386/sse.md:23835 */
rtx
gen_sse4_1_packusdw (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HImode,
	gen_rtvec (2,
		operand1,
		operand2),
	57));
}

/* ../../gcc/config/i386/sse.md:24100 */
rtx
gen_sse4_1_phminposuw (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HImode,
	gen_rtvec (1,
		operand1),
	129));
}

/* ../../gcc/config/i386/sse.md:24167 */
rtx
gen_avx512bw_zero_extendv32qiv32hi2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (V32HImode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:24362 */
rtx
gen_avx512f_zero_extendv16qiv16si2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SImode,
	gen_rtx_ZERO_EXTEND (V16SImode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:24440 */
rtx
gen_sse4_1_sign_extendv4qiv4si2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_SIGN_EXTEND (V4SImode,
	gen_rtx_VEC_SELECT (V4QImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)])))),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:24613 */
rtx
gen_sse4_1_sign_extendv4hiv4si2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_SIGN_EXTEND (V4SImode,
	gen_rtx_VEC_SELECT (V4HImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)])))));
}

/* ../../gcc/config/i386/sse.md:24803 */
rtx
gen_avx2_zero_extendv4qiv4di2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (V4DImode,
	gen_rtx_VEC_SELECT (V4QImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)])))));
}

/* ../../gcc/config/i386/sse.md:24930 */
rtx
gen_avx512f_sign_extendv8hiv8di2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DImode,
	gen_rtx_SIGN_EXTEND (V8DImode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:25004 */
rtx
gen_sse4_1_zero_extendv2hiv2di2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DImode,
	gen_rtx_ZERO_EXTEND (V2DImode,
	gen_rtx_VEC_SELECT (V2HImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		const0_rtx,
		const1_rtx)))),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:25295 */
rtx
gen_avx_vtestps256 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_UNSPEC (CCmode,
	gen_rtvec (2,
		operand0,
		operand1),
	148));
}

/* ../../gcc/config/i386/sse.md:25470 */
rtx
gen_sse4_1_roundps (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	94));
}

/* ../../gcc/config/i386/sse.md:25960 */
rtx
gen_sse4_2_pcmpistr (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (3,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (3,
		operand2,
		operand3,
		operand4),
	132)),
		gen_rtx_SET (operand1,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (3,
		copy_rtx (operand2),
		copy_rtx (operand3),
		copy_rtx (operand4)),
	132)),
		gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_UNSPEC (CCmode,
	gen_rtvec (3,
		copy_rtx (operand2),
		copy_rtx (operand3),
		copy_rtx (operand4)),
	132))));
}

/* ../../gcc/config/i386/sse.md:26171 */
rtx
gen_xop_pmadcswd (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_PLUS (V4SImode,
	gen_rtx_PLUS (V4SImode,
	gen_rtx_MULT (V4SImode,
	gen_rtx_SIGN_EXTEND (V4SImode,
	gen_rtx_VEC_SELECT (V4HImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)])))),
	gen_rtx_SIGN_EXTEND (V4SImode,
	gen_rtx_VEC_SELECT (V4HImode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)]))))),
	gen_rtx_MULT (V4SImode,
	gen_rtx_SIGN_EXTEND (V4SImode,
	gen_rtx_VEC_SELECT (V4HImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)])))),
	gen_rtx_SIGN_EXTEND (V4SImode,
	gen_rtx_VEC_SELECT (V4HImode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)])))))),
	operand3));
}

/* ../../gcc/config/i386/sse.md:26367 */
rtx
gen_xop_phaddwq (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_PLUS (V2DImode,
	gen_rtx_PLUS (V2DImode,
	gen_rtx_SIGN_EXTEND (V2DImode,
	gen_rtx_VEC_SELECT (V2HImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (4)])))),
	gen_rtx_SIGN_EXTEND (V2DImode,
	gen_rtx_VEC_SELECT (V2HImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (5)]))))),
	gen_rtx_PLUS (V2DImode,
	gen_rtx_SIGN_EXTEND (V2DImode,
	gen_rtx_VEC_SELECT (V2HImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)])))),
	gen_rtx_SIGN_EXTEND (V2DImode,
	gen_rtx_VEC_SELECT (V2HImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)])))))));
}

/* ../../gcc/config/i386/sse.md:26502 */
rtx
gen_xop_pperm_pack_v4si_v8hi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V8HImode,
	gen_rtx_TRUNCATE (V4HImode,
	operand1),
	gen_rtx_TRUNCATE (V4HImode,
	operand2))),
		gen_rtx_USE (VOIDmode,
	operand3)));
}

/* ../../gcc/config/i386/sse.md:26606 */
rtx
gen_xop_rotrv8hi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ROTATERT (V8HImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:26882 */
rtx
gen_xop_shav2di3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (V2DImode,
	gen_rtx_GE (V2DImode,
	operand2,
	const0_rtx),
	gen_rtx_ASHIFT (V2DImode,
	operand1,
	operand2),
	gen_rtx_ASHIFTRT (V2DImode,
	operand1,
	gen_rtx_NEG (V2DImode,
	operand2))));
}

/* ../../gcc/config/i386/sse.md:26986 */
rtx
gen_xop_frczv4df2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (1,
		operand1),
	136));
}

/* ../../gcc/config/i386/sse.md:27047 */
rtx
gen_xop_maskcmp_uns2v16qi3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (1,
		gen_rtx_fmt_ee (GET_CODE (operand1), V16QImode,
		operand2,
		operand3)),
	134));
}

/* ../../gcc/config/i386/sse.md:27077 */
rtx
gen_xop_vpermil2v4df3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (4,
		operand1,
		operand2,
		operand3,
		operand4),
	145));
}

/* ../../gcc/config/i386/sse.md:27276 */
rtx
gen_avx2_pbroadcastv16si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_DUPLICATE (V16SImode,
	gen_rtx_VEC_SELECT (SImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))));
}

/* ../../gcc/config/i386/sse.md:27276 */
rtx
gen_avx2_pbroadcastv4di (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_DUPLICATE (V4DImode,
	gen_rtx_VEC_SELECT (DImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))));
}

/* ../../gcc/config/i386/sse.md:27290 */
rtx
gen_avx2_pbroadcastv8si_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_DUPLICATE (V8SImode,
	gen_rtx_VEC_SELECT (SImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))));
}

/* ../../gcc/config/i386/sse.md:27308 */
rtx
gen_avx512f_permvarv16sf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	151));
}

/* ../../gcc/config/i386/sse.md:27308 */
rtx
gen_avx2_permvarv4df_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DFmode,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	151),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:27339 */
rtx
gen_avx512bw_permvarv32hi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HImode,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (2,
		operand1,
		operand2),
	151),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:27339 */
rtx
gen_avx512bw_permvarv32bf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32BFmode,
	gen_rtx_UNSPEC (V32BFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	151),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:27681 */
rtx
gen_avx2_vec_dupv4df (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_DUPLICATE (V4DFmode,
	gen_rtx_VEC_SELECT (DFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))));
}

/* ../../gcc/config/i386/sse.md:27693 */
rtx
gen_avx512bw_vec_dupv32bf_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_DUPLICATE (V32BFmode,
	gen_rtx_VEC_SELECT (BFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))));
}

/* ../../gcc/config/i386/sse.md:27707 */
rtx
gen_avx512vl_vec_dupv4di_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DImode,
	gen_rtx_VEC_DUPLICATE (V4DImode,
	gen_rtx_VEC_SELECT (DImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:27707 */
rtx
gen_avx512vl_vec_dupv4df (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_DUPLICATE (V4DFmode,
	gen_rtx_VEC_SELECT (DFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))));
}

/* ../../gcc/config/i386/sse.md:27726 */
rtx
gen_avx512vl_vec_dupv32qi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_DUPLICATE (V32QImode,
	gen_rtx_VEC_SELECT (QImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))));
}

/* ../../gcc/config/i386/sse.md:27726 */
rtx
gen_avx512bw_vec_dupv32hf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_DUPLICATE (V32HFmode,
	gen_rtx_VEC_SELECT (HFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))));
}

/* ../../gcc/config/i386/sse.md:27726 */
rtx
gen_avx512vl_vec_dupv16bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_DUPLICATE (V16BFmode,
	gen_rtx_VEC_SELECT (BFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))));
}

/* ../../gcc/config/i386/sse.md:27762 */
rtx
gen_avx512vl_vec_dup_gprv16qi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16QImode,
	gen_rtx_VEC_DUPLICATE (V16QImode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:27762 */
rtx
gen_avx512vl_vec_dup_gprv8bf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8BFmode,
	gen_rtx_VEC_DUPLICATE (V8BFmode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:27774 */
rtx
gen_avx512f_vec_dup_gprv8df_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_VEC_DUPLICATE (V8DFmode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:27944 */
rtx
gen_vec_dupv8sf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_DUPLICATE (V8SFmode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:27995 */
rtx
gen_avx_vbroadcastf128_v16hf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V16HFmode,
	operand1,
	operand1));
}

/* ../../gcc/config/i386/sse.md:28058 */
rtx
gen_avx512dq_broadcastv16si_mask_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SImode,
	gen_rtx_VEC_DUPLICATE (V16SImode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:28103 */
rtx
gen_avx512cd_maskw_vec_dupv4si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_VEC_DUPLICATE (V4SImode,
	gen_rtx_ZERO_EXTEND (SImode,
	operand1))),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	174)));
}

/* ../../gcc/config/i386/sse.md:28115 */
rtx
gen_avx_vpermilvarv2df3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	144));
}

/* ../../gcc/config/i386/sse.md:28216 */
rtx
gen_avx512f_vpermt2varv8di3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	155));
}

/* ../../gcc/config/i386/sse.md:28216 */
rtx
gen_avx512vl_vpermt2varv4di3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	155));
}

/* ../../gcc/config/i386/sse.md:28216 */
rtx
gen_avx512vl_vpermt2varv2di3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	155));
}

/* ../../gcc/config/i386/sse.md:28216 */
rtx
gen_avx512vl_vpermt2varv8hi3_maskz_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HImode,
	gen_rtx_UNSPEC (V8HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	155),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:28231 */
rtx
gen_avx512fp16_vpermt2varv8hf3_maskz_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	155),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:28246 */
rtx
gen_avx512vl_vpermt2varv8si3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	155),
	operand2,
	operand4));
}

/* ../../gcc/config/i386/sse.md:28246 */
rtx
gen_avx512vl_vpermt2varv8hi3_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HImode,
	gen_rtx_UNSPEC (V8HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	155),
	operand2,
	operand4));
}

/* ../../gcc/config/i386/sse.md:28449 */
rtx
gen_vec_set_hi_v4df (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V4DFmode,
	gen_rtx_VEC_SELECT (V2DFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		const0_rtx,
		const1_rtx))),
	operand2));
}

/* ../../gcc/config/i386/sse.md:28496 */
rtx
gen_vec_set_hi_v8sf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V8SFmode,
	gen_rtx_VEC_SELECT (V4SFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)]))),
	operand2));
}

/* ../../gcc/config/i386/sse.md:28563 */
rtx
gen_vec_set_lo_v32qi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V32QImode,
	operand2,
	gen_rtx_VEC_SELECT (V16QImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (16,
		const_int_rtx[MAX_SAVED_CONST_INT + (16)],
		const_int_rtx[MAX_SAVED_CONST_INT + (17)],
		const_int_rtx[MAX_SAVED_CONST_INT + (18)],
		const_int_rtx[MAX_SAVED_CONST_INT + (19)],
		const_int_rtx[MAX_SAVED_CONST_INT + (20)],
		const_int_rtx[MAX_SAVED_CONST_INT + (21)],
		const_int_rtx[MAX_SAVED_CONST_INT + (22)],
		const_int_rtx[MAX_SAVED_CONST_INT + (23)],
		const_int_rtx[MAX_SAVED_CONST_INT + (24)],
		const_int_rtx[MAX_SAVED_CONST_INT + (25)],
		const_int_rtx[MAX_SAVED_CONST_INT + (26)],
		const_int_rtx[MAX_SAVED_CONST_INT + (27)],
		const_int_rtx[MAX_SAVED_CONST_INT + (28)],
		const_int_rtx[MAX_SAVED_CONST_INT + (29)],
		const_int_rtx[MAX_SAVED_CONST_INT + (30)],
		const_int_rtx[MAX_SAVED_CONST_INT + (31)])))));
}

/* ../../gcc/config/i386/sse.md:28726 */
rtx
gen_avx512vl_storev8sf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (3,
		operand1,
		operand0,
		operand2),
	47));
}

/* ../../gcc/config/i386/sse.md:28755 */
rtx
gen_avx512vl_storev8hi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HImode,
	gen_rtvec (3,
		operand1,
		operand0,
		operand2),
	47));
}

/* ../../gcc/config/i386/sse.md:28896 */
rtx
gen_avx2_ashrvv4si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ASHIFTRT (V4SImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:28896 */
rtx
gen_avx2_ashrvv4di_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DImode,
	gen_rtx_ASHIFTRT (V4DImode,
	operand1,
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:28918 */
rtx
gen_avx512f_lshrvv16si_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SImode,
	gen_rtx_LSHIFTRT (V16SImode,
	operand1,
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:28918 */
rtx
gen_avx512f_lshrvv8di_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DImode,
	gen_rtx_LSHIFTRT (V8DImode,
	operand1,
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:28929 */
rtx
gen_avx512vl_lshrvv8hi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HImode,
	gen_rtx_LSHIFTRT (V8HImode,
	operand1,
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:28940 */
rtx
gen_avx_vec_concatv16bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V16BFmode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:28940 */
rtx
gen_avx_vec_concatv16si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V16SImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:29104 */
rtx
gen_avx512f_vcvtph2ps512_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SFmode,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (1,
		operand1),
	149),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:29647 */
rtx
gen_avx512f_compressv8df_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	169));
}

/* ../../gcc/config/i386/sse.md:29660 */
rtx
gen_compressv64qi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V64QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	169));
}

/* ../../gcc/config/i386/sse.md:29673 */
rtx
gen_avx512vl_compressstorev8si_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (3,
		operand1,
		operand0,
		operand2),
	170));
}

/* ../../gcc/config/i386/sse.md:29687 */
rtx
gen_compressstorev32qi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32QImode,
	gen_rtvec (3,
		operand1,
		operand0,
		operand2),
	170));
}

/* ../../gcc/config/i386/sse.md:29711 */
rtx
gen_expandv4di_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	171));
}

/* ../../gcc/config/i386/sse.md:29725 */
rtx
gen_expandv16hi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	171));
}

/* ../../gcc/config/i386/sse.md:29805 */
rtx
gen_avx512dq_rangepv4sf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	194));
}

/* ../../gcc/config/i386/sse.md:29805 */
rtx
gen_avx512dq_rangepv4df (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	194));
}

/* ../../gcc/config/i386/sse.md:29825 */
rtx
gen_avx512dq_rangesv4sf_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED,
	rtx operand6 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	194),
	operand4,
	operand5),
	operand1,
	const1_rtx),
		operand6),
	178));
}

/* ../../gcc/config/i386/sse.md:29848 */
rtx
gen_avx512dq_fpclassv8sf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	193));
}

/* ../../gcc/config/i386/sse.md:29848 */
rtx
gen_avx512dq_fpclassv2df_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (QImode,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	193),
	operand3));
}

/* ../../gcc/config/i386/sse.md:29876 */
rtx
gen_avx512bw_getmantv32hf_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V32HFmode,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	166),
	operand3,
	operand4),
		operand5),
	178));
}

/* ../../gcc/config/i386/sse.md:29876 */
rtx
gen_avx512vl_getmantv4sf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	166));
}

/* ../../gcc/config/i386/sse.md:29876 */
rtx
gen_avx512vl_getmantv4df (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	166));
}

/* ../../gcc/config/i386/sse.md:29893 */
rtx
gen_avx512f_vgetmantv8hf_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	166),
	operand1,
	const1_rtx),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:29917 */
rtx
gen_avx512bw_dbpsadbwv16hi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HImode,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	186),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:29931 */
rtx
gen_clzv4di2_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DImode,
	gen_rtx_CLZ (V4DImode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:29974 */
rtx
gen_sha1nexte (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (2,
		operand1,
		operand2),
	181));
}

/* ../../gcc/config/i386/sse.md:30093 */
rtx
gen_vsha512rnds2 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	241));
}

/* ../../gcc/config/i386/sse.md:30150 */
rtx
gen_avx512f_si512_256si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V16SImode,
	operand1,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (1,
		const0_rtx),
	147)));
}

/* ../../gcc/config/i386/sse.md:30215 */
rtx
gen_vpmadd52luqv2di (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	195));
}

/* ../../gcc/config/i386/sse.md:30248 */
rtx
gen_vpmadd52luqv4di_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DImode,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	195),
	operand1,
	operand4));
}

/* ../../gcc/config/i386/sse.md:30282 */
rtx
gen_vpopcountv16si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_POPCOUNT (V16SImode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:30282 */
rtx
gen_vpopcountv4di (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_POPCOUNT (V4DImode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:30332 */
rtx
gen_vpopcountv16qi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16QImode,
	gen_rtx_POPCOUNT (V16QImode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:30339 */
rtx
gen_vgf2p8affineinvqb_v32qi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32QImode,
	gen_rtx_UNSPEC (V32QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	198),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:30373 */
rtx
gen_vgf2p8mulb_v32qi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32QImode,
	gen_rtx_UNSPEC (V32QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	200),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:30389 */
rtx
gen_vpshrd_v8si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	202));
}

/* ../../gcc/config/i386/sse.md:30389 */
rtx
gen_vpshrd_v2di (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	202));
}

/* ../../gcc/config/i386/sse.md:30400 */
rtx
gen_vpshld_v16hi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HImode,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	201),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:30411 */
rtx
gen_vpshrdv_v32hi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	203));
}

/* ../../gcc/config/i386/sse.md:30423 */
rtx
gen_vpshrdv_v32hi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HImode,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	203),
	operand1,
	operand4));
}

/* ../../gcc/config/i386/sse.md:30453 */
rtx
gen_vpshrdv_v16si_maskz_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SImode,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	203),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:30468 */
rtx
gen_vpshldv_v8di (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	204));
}

/* ../../gcc/config/i386/sse.md:30480 */
rtx
gen_vpshldv_v16hi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HImode,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	204),
	operand1,
	operand4));
}

/* ../../gcc/config/i386/sse.md:30510 */
rtx
gen_vpshldv_v8si_maskz_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	204),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:30628 */
rtx
gen_vpdpbusd_v16si_maskz_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SImode,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	205),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:30722 */
rtx
gen_vpdpwssd_v8si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	207));
}

/* ../../gcc/config/i386/sse.md:30766 */
rtx
gen_vpdpwssd_v4si_maskz_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	207),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:30863 */
rtx
gen_vaesdeclast_v32qi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	210));
}

/* ../../gcc/config/i386/sse.md:30891 */
rtx
gen_vaesenclast_v16qi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	212));
}

/* ../../gcc/config/i386/sse.md:30915 */
rtx
gen_avx512vl_vpshufbitqmbv32qi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (SImode,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (2,
		operand1,
		operand2),
	214),
	operand3));
}

/* ../../gcc/config/i386/sse.md:31002 */
rtx
gen_avx512f_cvtne2ps2bf16_v8bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V8BFmode,
	gen_rtx_FLOAT_TRUNCATE (V4BFmode,
	operand2),
	gen_rtx_FLOAT_TRUNCATE (V4BFmode,
	operand1)));
}

/* ../../gcc/config/i386/sse.md:31183 */
rtx
gen_avx512f_dpbf16ps_v8sf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	216));
}

/* ../../gcc/config/i386/sse.md:31341 */
rtx
gen_aesdec128klu8 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC_VOLATILE (V2DImode,
	gen_rtvec (2,
		operand1,
		operand2),
	99)),
		gen_rtx_SET (gen_rtx_REG (CCZmode,
	17),
	gen_rtx_UNSPEC_VOLATILE (CCZmode,
	gen_rtvec (2,
		copy_rtx (operand1),
		copy_rtx (operand2)),
	99))));
}

/* ../../gcc/config/i386/sse.md:31554 */
rtx
gen_vpdpbssds_v4si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	228));
}

/* ../../gcc/config/i386/sse.md:31565 */
rtx
gen_vpdpbuuds_v16si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	232));
}

/* ../../gcc/config/i386/sse.md:31576 */
rtx
gen_vpdpbsuds_v8si_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	230),
	operand1,
	operand4));
}

/* ../../gcc/config/i386/sse.md:31617 */
rtx
gen_vbcstnebf162ps_v4sf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_DUPLICATE (V4SFmode,
	gen_rtx_FLOAT_EXTEND (SFmode,
	operand1)));
}

/* ../../gcc/config/i386/sse.md:31671 */
rtx
gen_vcvtneobf162ps_v8bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FLOAT_EXTEND (V4SFmode,
	gen_rtx_VEC_SELECT (V4BFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)])))));
}

/* ../../gcc/config/i386/sse.md:31699 */
rtx
gen_avx10_2_cvt2ps2phx_v16hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HFmode,
	gen_rtx_VEC_CONCAT (V16HFmode,
	gen_rtx_FLOAT_TRUNCATE (V8HFmode,
	operand2),
	gen_rtx_FLOAT_TRUNCATE (V8HFmode,
	operand1)),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:31722 */
rtx
gen_vcvtne2ph2hf8v32hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V64QImode,
	gen_rtx_UNSPEC (V64QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	251),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:31722 */
rtx
gen_vcvtne2ph2bf8v8hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16QImode,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	249),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:31811 */
rtx
gen_vcvtbiasph2hf8v32hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32QImode,
	gen_rtx_UNSPEC (V32QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	247),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:31896 */
rtx
gen_vcvtneph2bf8v16hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16QImode,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (1,
		operand1),
	253),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:31896 */
rtx
gen_vcvtneph2hf8v32hf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32QImode,
	gen_rtvec (1,
		operand1),
	255));
}

/* ../../gcc/config/i386/sse.md:31905 */
rtx
gen_vcvthf82phv8hf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (1,
		operand1),
	257));
}

/* ../../gcc/config/i386/sse.md:31963 */
rtx
gen_vpdpwusd_v4si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	233));
}

/* ../../gcc/config/i386/sse.md:31974 */
rtx
gen_vpdpwuud_v16si (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	237));
}

/* ../../gcc/config/i386/sse.md:31985 */
rtx
gen_vpdpwsud_v8si_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	235),
	operand1,
	operand4));
}

/* ../../gcc/config/i386/sse.md:32026 */
rtx
gen_vdpphps_v16sf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	244));
}

/* ../../gcc/config/i386/sse.md:32064 */
rtx
gen_vdpphps_v4sf_maskz_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	244),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:32095 */
rtx
gen_avx10_2_sminpbf16_v16bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_SMIN (V16BFmode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:32105 */
rtx
gen_avx10_2_addnepbf16_v32bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_PLUS (V32BFmode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:32105 */
rtx
gen_avx10_2_divnepbf16_v32bf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32BFmode,
	gen_rtx_DIV (V32BFmode,
	operand1,
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:32105 */
rtx
gen_avx10_2_mulnepbf16_v8bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_MULT (V8BFmode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/sse.md:32129 */
rtx
gen_avx10_2_fmaddnepbf16_v8bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FMA (V8BFmode,
	operand1,
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:32191 */
rtx
gen_avx10_2_fnmaddnepbf16_v32bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FMA (V32BFmode,
	gen_rtx_NEG (V32BFmode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:32225 */
rtx
gen_avx10_2_fnmaddnepbf16_v16bf_mask3 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16BFmode,
	gen_rtx_FMA (V16BFmode,
	gen_rtx_NEG (V16BFmode,
	operand1),
	operand2,
	operand3),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:32272 */
rtx
gen_avx10_2_fmsubnepbf16_v8bf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8BFmode,
	gen_rtx_FMA (V8BFmode,
	operand1,
	operand2,
	gen_rtx_NEG (V8BFmode,
	operand3)),
	operand1,
	operand4));
}

/* ../../gcc/config/i386/sse.md:32321 */
rtx
gen_avx10_2_fnmsubnepbf16_v8bf_maskz_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8BFmode,
	gen_rtx_FMA (V8BFmode,
	gen_rtx_NEG (V8BFmode,
	operand1),
	operand2,
	gen_rtx_NEG (V8BFmode,
	operand3)),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:32374 */
rtx
gen_avx10_2_rsqrtpbf16_v8bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8BFmode,
	gen_rtvec (1,
		operand1),
	55));
}

/* ../../gcc/config/i386/sse.md:32391 */
rtx
gen_avx10_2_rcppbf16_v32bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32BFmode,
	gen_rtvec (1,
		operand1),
	54));
}

/* ../../gcc/config/i386/sse.md:32400 */
rtx
gen_avx10_2_getexppbf16_v16bf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16BFmode,
	gen_rtx_UNSPEC (V16BFmode,
	gen_rtvec (1,
		operand1),
	165),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:32419 */
rtx
gen_avx10_2_reducenepbf16_v16bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16BFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	260));
}

/* ../../gcc/config/i386/sse.md:32419 */
rtx
gen_avx10_2_getmantpbf16_v8bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8BFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	261));
}

/* ../../gcc/config/i386/sse.md:32439 */
rtx
gen_avx10_2_cmppbf16_v32bf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59));
}

/* ../../gcc/config/i386/sse.md:32492 */
rtx
gen_avx10_2_cvtnebf162iubsv32bf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HImode,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (1,
		operand1),
	265),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:32492 */
rtx
gen_avx10_2_cvttnebf162iubsv16bf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HImode,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (1,
		operand1),
	271),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:32507 */
rtx
gen_avx10_2_cvtph2ibsv32hf_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V32HImode,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (1,
		operand1),
	266),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:32507 */
rtx
gen_avx10_2_cvtph2ibsv8hf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HImode,
	gen_rtvec (1,
		operand1),
	266));
}

/* ../../gcc/config/i386/sse.md:32522 */
rtx
gen_avx10_2_cvttph2ibsv32hf_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V32HImode,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (1,
		operand1),
	272),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:32522 */
rtx
gen_avx10_2_cvttph2ibsv8hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HImode,
	gen_rtx_UNSPEC (V8HImode,
	gen_rtvec (1,
		operand1),
	272),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:32537 */
rtx
gen_avx10_2_cvtps2ibsv8sf (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (1,
		operand1),
	268));
}

/* ../../gcc/config/i386/sse.md:32537 */
rtx
gen_avx10_2_cvtps2iubsv8sf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (1,
		operand1),
	269),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:32552 */
rtx
gen_avx10_2_cvttps2iubsv16sf_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (1,
		operand1),
	275),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:32552 */
rtx
gen_avx10_2_cvttps2iubsv8sf_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (1,
		operand1),
	275),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:32571 */
rtx
gen_avx10_2_vcvttps2dqsv8sf_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (1,
		operand1),
	276),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:32571 */
rtx
gen_avx10_2_vcvttps2udqsv4sf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (1,
		operand1),
	277),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:32571 */
rtx
gen_avx10_2_vcvttpd2dqsv4df_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (1,
		operand1),
	276),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:32582 */
rtx
gen_avx10_2_vcvttpd2qqsv8df (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (1,
		operand1),
	276));
}

/* ../../gcc/config/i386/sse.md:32582 */
rtx
gen_avx10_2_vcvttpd2uqqsv8df_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8DImode,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (1,
		operand1),
	277),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:32593 */
rtx
gen_avx10_2_vcvttps2qqsv8di_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (1,
		operand1),
	276),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:32593 */
rtx
gen_avx10_2_vcvttps2qqsv4di_mask_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4DImode,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (1,
		operand1),
	276),
	operand2,
	operand3),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:32604 */
rtx
gen_avx10_2_vcvttsd2sisdi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (DImode,
	gen_rtvec (1,
		gen_rtx_VEC_SELECT (DFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))),
	276));
}

/* ../../gcc/config/i386/sse.md:32617 */
rtx
gen_avx10_2_vcvttss2sisdi_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (DImode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (DImode,
	gen_rtvec (1,
		gen_rtx_VEC_SELECT (SFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const0_rtx)))),
	276),
		operand2),
	178));
}

/* ../../gcc/config/i386/sse.md:32642 */
rtx
gen_avx10_2_minmaxpv32hf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HFmode,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	279),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:32642 */
rtx
gen_avx10_2_minmaxpv16sf_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	279),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:32642 */
rtx
gen_avx10_2_minmaxpv4sf_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	279),
	operand4,
	operand5));
}

/* ../../gcc/config/i386/sse.md:32642 */
rtx
gen_avx10_2_minmaxpv2df_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (2,
		gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	279),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:32654 */
rtx
gen_avx10_2_minmaxsv4sf_round (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	279),
	operand1,
	const1_rtx),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:32669 */
rtx
gen_avx10_2_vmovrsbv16qi_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16QImode,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (1,
		operand1),
	280),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:32669 */
rtx
gen_avx10_2_vmovrsdv8si_mask (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (1,
		operand1),
	280),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sync.md:281 */
rtx
gen_atomic_storeqi_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	289));
}

/* ../../gcc/config/i386/sync.md:473 */
rtx
gen_atomic_compare_and_swapdi_doubleword (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED,
	rtx operand3 ATTRIBUTE_UNUSED,
	rtx operand4 ATTRIBUTE_UNUSED,
	rtx operand5 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (3,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC_VOLATILE (DImode,
	gen_rtvec (5,
		operand1,
		operand2,
		operand3,
		operand4,
		operand5),
	109)),
		gen_rtx_SET (copy_rtx (operand1),
	gen_rtx_UNSPEC_VOLATILE (DImode,
	gen_rtvec (1,
		const0_rtx),
	109)),
		gen_rtx_SET (gen_rtx_REG (CCZmode,
	17),
	gen_rtx_UNSPEC_VOLATILE (CCZmode,
	gen_rtvec (1,
		const0_rtx),
	109))));
}

/* ../../gcc/config/i386/sync.md:814 */
rtx
gen_rao_aandsi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC_VOLATILE (SImode,
	gen_rtvec (2,
		gen_rtx_AND (SImode,
	operand0,
	operand1),
		const0_rtx),
	113));
}

/* ../../gcc/config/i386/sync.md:814 */
rtx
gen_rao_axordi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC_VOLATILE (DImode,
	gen_rtvec (2,
		gen_rtx_XOR (DImode,
	operand0,
	operand1),
		const0_rtx),
	113));
}

/* ../../gcc/config/i386/sync.md:878 */
rtx
gen_atomic_andqi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC_VOLATILE (QImode,
	gen_rtvec (2,
		gen_rtx_AND (QImode,
	copy_rtx (operand0),
	operand1),
		operand2),
	111)),
		gen_hard_reg_clobber (CCmode, 17)));
}

/* ../../gcc/config/i386/sync.md:878 */
rtx
gen_atomic_ordi (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC_VOLATILE (DImode,
	gen_rtvec (2,
		gen_rtx_IOR (DImode,
	copy_rtx (operand0),
	operand1),
		operand2),
	111)),
		gen_hard_reg_clobber (CCmode, 17)));
}

/* ../../gcc/config/i386/sync.md:985 */
rtx
gen_atomic_bit_test_and_resetdi_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_COMPARE (CCCmode,
	gen_rtx_UNSPEC_VOLATILE (DImode,
	gen_rtvec (2,
		operand0,
		operand2),
	110),
	const0_rtx)),
		gen_rtx_SET (gen_rtx_ZERO_EXTRACT (DImode,
	copy_rtx (operand0),
	const1_rtx,
	operand1),
	const0_rtx)));
}

/* ../../gcc/config/i386/sync.md:1089 */
rtx
gen_atomic_or_fetch_cmp_0qi_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCNOmode,
	17),
	gen_rtx_COMPARE (CCNOmode,
	gen_rtx_IOR (QImode,
	gen_rtx_UNSPEC_VOLATILE (QImode,
	gen_rtvec (2,
		operand0,
		operand2),
	110),
	operand1),
	const0_rtx)),
		gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_IOR (QImode,
	copy_rtx (operand0),
	copy_rtx (operand1)))));
}

/* ../../gcc/config/i386/sync.md:1089 */
rtx
gen_atomic_xor_fetch_cmp_0di_1 (rtx operand0 ATTRIBUTE_UNUSED,
	rtx operand1 ATTRIBUTE_UNUSED,
	rtx operand2 ATTRIBUTE_UNUSED)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCNOmode,
	17),
	gen_rtx_COMPARE (CCNOmode,
	gen_rtx_XOR (DImode,
	gen_rtx_UNSPEC_VOLATILE (DImode,
	gen_rtvec (2,
		operand0,
		operand2),
	110),
	operand1),
	const0_rtx)),
		gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_XOR (DImode,
	copy_rtx (operand0),
	copy_rtx (operand1)))));
}

/* ../../gcc/config/i386/i386.md:1505 */
rtx
gen_cstoreqi4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1513 "../../gcc/config/i386/i386.md"
{
  if (QImode == (TARGET_64BIT ? TImode : DImode))
    {
      if (GET_CODE (operands[1]) != EQ
	  && GET_CODE (operands[1]) != NE)
	FAIL;
    }
  else if (MEM_P (operands[2]) && MEM_P (operands[3]))
    operands[2] = force_reg (QImode, operands[2]);
  ix86_expand_setcc (operands[0], GET_CODE (operands[1]),
		     operands[2], operands[3]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_COMPARE (CCmode,
	operand2,
	operand3)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand1), VOIDmode,
		gen_rtx_REG (CCmode,
	17),
		const0_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:1776 */
rtx
gen_cbranchhf4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1787 "../../gcc/config/i386/i386.md"
{
  ix86_expand_branch (GET_CODE (operands[0]),
		      operands[1], operands[2], operands[3]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_COMPARE (CCmode,
	operand1,
	operand2)));
  emit_jump_insn (gen_rtx_SET (pc_rtx,
	gen_rtx_IF_THEN_ELSE (VOIDmode,
	gen_rtx_fmt_ee (GET_CODE (operand0), VOIDmode,
		gen_rtx_REG (CCmode,
	17),
		const0_rtx),
	gen_rtx_LABEL_REF (VOIDmode,
	operand3),
	pc_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:1889 */
rtx
gen_cbranchcc4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1897 "../../gcc/config/i386/i386.md"
{
  ix86_expand_branch (GET_CODE (operands[0]),
		      operands[1], operands[2], operands[3]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_jump_insn (gen_rtx_SET (pc_rtx,
	gen_rtx_IF_THEN_ELSE (VOIDmode,
	gen_rtx_fmt_ee (GET_CODE (operand0), VOIDmode,
		operand1,
		operand2),
	gen_rtx_LABEL_REF (VOIDmode,
	operand3),
	pc_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:1911 */
rtx
gen_cstorecco4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1917 "../../gcc/config/i386/i386.md"
{
  ix86_expand_setcc (operands[0], GET_CODE (operands[1]),
		     operands[2], operands[3]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand1), VOIDmode,
		operand2,
		operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:2196 */
extern rtx_insn *gen_split_6 (rtx_insn *, rtx *);
rtx_insn *
gen_split_6 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_6 (i386.md:2196)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2201 "../../gcc/config/i386/i386.md"
ix86_split_long_move (operands); DONE;
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:2266 */
extern rtx_insn *gen_split_12 (rtx_insn *, rtx *);
rtx_insn *
gen_split_12 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_12 (i386.md:2266)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2272 "../../gcc/config/i386/i386.md"
{
  operands[2] = GEN_INT (-PUSH_ROUNDING (GET_MODE_SIZE (DImode)));
  /* Preserve memory attributes. */
  operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (gen_rtx_REG (DImode,
	7),
	gen_rtx_PLUS (DImode,
	gen_rtx_REG (DImode,
	7),
	operand2)));
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:2414 */
rtx
gen_movdi (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2418 "../../gcc/config/i386/i386.md"
ix86_expand_move (DImode, operands); DONE;
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:2945 */
extern rtx_insn *gen_peephole2_6 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_6 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_6 (i386.md:2945)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2955 "../../gcc/config/i386/i386.md"
{
  if (GET_MODE (operands[0]) != word_mode)
    operands[0] = gen_rtx_REG (word_mode, REGNO (operands[0]));

  operands[2] = gen_rtx_MEM (word_mode,
			     gen_rtx_PRE_DEC (Pmode, stack_pointer_rtx));
  operands[3] = gen_rtx_MEM (word_mode,
			     gen_rtx_POST_INC (Pmode, stack_pointer_rtx));
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand2,
	operand1));
  emit_insn (gen_rtx_SET (operand0,
	operand3));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:3379 */
extern rtx_insn *gen_peephole2_18 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_18 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_18 (i386.md:3379)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand1,
	operand2),
		gen_rtx_SET (copy_rtx (operand2),
	copy_rtx (operand1)))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:3469 */
rtx
gen_extvsi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3475 "../../gcc/config/i386/i386.md"
{
  /* Handle extractions from %ah et al.  */
  if (INTVAL (operands[2]) != 8 || INTVAL (operands[3]) != 8)
    FAIL;

  unsigned int regno = reg_or_subregno (operands[1]);

  /* Be careful to expand only with registers having upper parts.  */
  if (regno <= LAST_VIRTUAL_REGISTER && !QI_REGNO_P (regno))
    operands[1] = copy_to_reg (operands[1]);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SIGN_EXTRACT (SImode,
	operand1,
	operand2,
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:3635 */
extern rtx_insn *gen_peephole2_32 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_32 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_32 (i386.md:3635)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	const0_rtx),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:3649 */
extern rtx_insn *gen_peephole2_38 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_38 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_38 (i386.md:3649)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3659 "../../gcc/config/i386/i386.md"
{
  HOST_WIDE_INT tmp = INTVAL (operands[1]) & ~HOST_WIDE_INT_C (0xff00);
  tmp |= (INTVAL (operands[3]) & 0xff) << 8;
  operands[4] = gen_int_mode (tmp, DImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	operand4));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:3776 */
extern rtx_insn *gen_split_31 (rtx_insn *, rtx *);
rtx_insn *
gen_split_31 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_31 (i386.md:3776)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3782 "../../gcc/config/i386/i386.md"
{
  /* Preserve memory attributes. */
  operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (gen_rtx_REG (SImode,
	7),
	gen_rtx_PLUS (SImode,
	gen_rtx_REG (SImode,
	7),
	const_int_rtx[MAX_SAVED_CONST_INT + (-16)])));
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:3976 */
extern rtx_insn *gen_split_41 (rtx_insn *, rtx *);
rtx_insn *
gen_split_41 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_41 (i386.md:3976)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3982 "../../gcc/config/i386/i386.md"
{
  rtx op = XEXP (operands[0], 0);
  if (GET_CODE (op) == PRE_DEC)
    {
      gcc_assert (!TARGET_64BIT);
      op = GEN_INT (-4);
    }
  else
    {
      op = XEXP (XEXP (op, 1), 1);
      gcc_assert (CONST_INT_P (op));
    }
  operands[2] = op;
  /* Preserve memory attributes. */
  operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (gen_rtx_REG (DImode,
	7),
	gen_rtx_PLUS (DImode,
	gen_rtx_REG (DImode,
	7),
	operand2)));
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:4611 */
extern rtx_insn *gen_split_49 (rtx_insn *, rtx *);
rtx_insn *
gen_split_49 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_49 (i386.md:4611)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4620 "../../gcc/config/i386/i386.md"
operands[2] = find_constant_src (curr_insn);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	operand2));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:4834 */
extern rtx_insn *gen_split_57 (rtx_insn *, rtx *);
rtx_insn *
gen_split_57 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_57 (i386.md:4834)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4844 "../../gcc/config/i386/i386.md"
{
  if (!REG_P (operands[1])
      || REGNO (operands[0]) != REGNO (operands[1]))
    {
      ix86_expand_clear (operands[0]);

      gcc_assert (!TARGET_PARTIAL_REG_STALL);
      emit_insn (gen_rtx_SET
      		 (gen_rtx_STRICT_LOW_PART
		  (VOIDmode, gen_lowpart (QImode, operands[0])),
		  operands[1]));
      DONE;
    }

  operands[2] = GEN_INT (GET_MODE_MASK (QImode));
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_AND (SImode,
	copy_rtx (operand0),
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:5030 */
extern rtx_insn *gen_peephole2_50 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_50 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_50 (i386.md:5030)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (copy_rtx (operand1),
	gen_rtx_ASHIFTRT (DImode,
	copy_rtx (operand1),
	operand4)),
		gen_hard_reg_clobber (CCmode, 17))), true);
  emit_insn (gen_rtx_SET (operand3,
	copy_rtx (operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:5262 */
extern rtx_insn *gen_split_66 (rtx_insn *, rtx *);
rtx_insn *
gen_split_66 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_66 (i386.md:5262)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5268 "../../gcc/config/i386/i386.md"
operands[2] = GEN_INT (-GET_MODE_SIZE (XFmode));
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (gen_rtx_REG (SImode,
	7),
	gen_rtx_PLUS (SImode,
	gen_rtx_REG (SImode,
	7),
	operand2)));
  emit_insn (gen_rtx_SET (gen_rtx_MEM (XFmode,
	gen_rtx_REG (SImode,
	7)),
	gen_rtx_FLOAT_EXTEND (XFmode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:5457 */
rtx
gen_extendbfsf2 (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (SFmode,
	gen_rtvec (1,
		operand1),
	60));
}

/* ../../gcc/config/i386/i386.md:5628 */
extern rtx_insn *gen_split_73 (rtx_insn *, rtx *);
rtx_insn *
gen_split_73 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_73 (i386.md:5628)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5647 "../../gcc/config/i386/i386.md"
{
  operands[0] = lowpart_subreg (V4SFmode, operands[0], SFmode);
  emit_move_insn (operands[0], CONST0_RTX (V4SFmode));
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_VEC_DUPLICATE (V4SFmode,
	gen_rtx_FLOAT_TRUNCATE (SFmode,
	operand1)),
	copy_rtx (operand0),
	const1_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:5790 */
rtx
gen_fix_truncdfsi2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5795 "../../gcc/config/i386/i386.md"
{
  if (TARGET_FISTTP
      && !(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH))
   {
     emit_insn (gen_fix_truncsi_i387_fisttp (operands[0], operands[1]));
     DONE;
   }
  if (SSE_FLOAT_MODE_P (DFmode))
   {
     rtx out = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (SImode);
     emit_insn (gen_fix_truncdfsi_sse (out, operands[1]));
     if (out != operands[0])
	emit_move_insn (operands[0], out);
     DONE;
   }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_FIX (SImode,
	operand1)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:5961 */
extern rtx_insn *gen_peephole2_58 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_58 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  HARD_REG_SET _regs_allocated;
  CLEAR_HARD_REG_SET (_regs_allocated);
  if ((operands[2] = peep2_find_free_register (0, 0, "x", DFmode, &_regs_allocated)) == NULL_RTX)
    return NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_58 (i386.md:5961)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand2,
	operand1));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_FIX (SImode,
	copy_rtx (operand2))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:6184 */
extern rtx_insn *gen_split_82 (rtx_insn *, rtx *);
rtx_insn *
gen_split_82 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_82 (i386.md:6184)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6193 "../../gcc/config/i386/i386.md"
{
  rtx s = assign_386_stack_local (DImode, SLOT_FLOATxFDI_387);
  emit_insn (gen_floatdidf2_i387_with_xmm (operands[0], operands[1], s));
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:6241 */
extern rtx_insn *gen_split_90 (rtx_insn *, rtx *);
rtx_insn *
gen_split_90 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_90 (i386.md:6241)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6257 "../../gcc/config/i386/i386.md"
{
  const machine_mode vmode = V2DFmode;

  operands[0] = lowpart_subreg (vmode, operands[0], DFmode);
  emit_move_insn (operands[0], CONST0_RTX (vmode));
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_VEC_DUPLICATE (V2DFmode,
	gen_rtx_FLOAT (DFmode,
	operand1)),
	copy_rtx (operand0),
	const1_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:6334 */
rtx
gen_floatunsdisf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6339 "../../gcc/config/i386/i386.md"
{
  if (!TARGET_AVX512F)
    {
      x86_emit_floatuns (operands);
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSIGNED_FLOAT (SFmode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:6416 */
extern rtx_insn *gen_split_94 (rtx_insn *, rtx *);
rtx_insn *
gen_split_94 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_94 (i386.md:6416)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6423 "../../gcc/config/i386/i386.md"
operands[1] = GEN_INT (exact_log2 (INTVAL (operands[1])));
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (SImode,
	copy_rtx (operand0),
	operand1)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:6449 */
rtx
gen_addti3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6454 "../../gcc/config/i386/i386.md"
{
  ix86_expand_binary_operator (PLUS, TImode, operands, TARGET_APX_NDD);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_PLUS (TImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:6530 */
extern rtx_insn *gen_split_107 (rtx_insn *, rtx *);
rtx_insn *
gen_split_107 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_107 (i386.md:6530)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6558 "../../gcc/config/i386/i386.md"
split_double_mode (TImode, &operands[0], 2, &operands[0], &operands[5]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_COMPARE (CCCmode,
	gen_rtx_PLUS (DImode,
	operand1,
	operand4),
	copy_rtx (operand1))),
		gen_rtx_SET (operand0,
	gen_rtx_PLUS (DImode,
	copy_rtx (operand1),
	copy_rtx (operand4))))), true);
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand5,
	gen_rtx_PLUS (DImode,
	gen_rtx_PLUS (DImode,
	gen_rtx_LTU (DImode,
	gen_rtx_REG (CCmode,
	17),
	const0_rtx),
	operand6),
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:6985 */
extern rtx_insn *gen_split_117 (rtx_insn *, rtx *);
rtx_insn *
gen_split_117 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_117 (i386.md:6985)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 7010 "../../gcc/config/i386/i386.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode,
	operand0),
	operand1));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode,
	copy_rtx (operand0)),
	gen_rtx_PLUS (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand3), GET_MODE (operand3),
		operand2,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	copy_rtx (operand0))),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:7074 */
extern rtx_insn *gen_split_127 (rtx_insn *, rtx *);
rtx_insn *
gen_split_127 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_127 (i386.md:7074)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 7082 "../../gcc/config/i386/i386.md"
{
  if (SImode != SImode)
    {
      operands[0] = gen_lowpart (SImode, operands[0]);
      operands[1] = gen_lowpart (SImode, operands[1]);
      operands[2] = gen_lowpart (SImode, operands[2]);
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_PLUS (SImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:7467 */
extern rtx_insn *gen_split_134 (rtx_insn *, rtx *);
rtx_insn *
gen_split_134 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_134 (i386.md:7467)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 7496 "../../gcc/config/i386/i386.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand4), GET_MODE (operand4),
		operand2,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0)));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_PLUS (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand3), GET_MODE (operand3),
		operand1,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	copy_rtx (operand0))),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:7574 */
extern rtx_insn *gen_split_144 (rtx_insn *, rtx *);
rtx_insn *
gen_split_144 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_144 (i386.md:7574)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 7615 "../../gcc/config/i386/i386.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (gen_rtx_ZERO_EXTRACT (DImode,
	operand0,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_ZERO_EXTRACT (DImode,
	operand1,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)])));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_ZERO_EXTRACT (DImode,
	copy_rtx (operand0),
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_SUBREG (DImode,
	gen_rtx_PLUS (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand3), GET_MODE (operand3),
		copy_rtx (operand0),
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand4), GET_MODE (operand4),
		operand2,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0)),
	0)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:7873 */
rtx
gen_uaddvqi4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 7887 "../../gcc/config/i386/i386.md"
ix86_fixup_binary_operands_no_copy (PLUS, QImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_COMPARE (CCCmode,
	gen_rtx_PLUS (QImode,
	operand1,
	operand2),
	copy_rtx (operand1))),
		gen_rtx_SET (operand0,
	gen_rtx_PLUS (QImode,
	copy_rtx (operand1),
	copy_rtx (operand2))))), true);
  emit_jump_insn (gen_rtx_SET (pc_rtx,
	gen_rtx_IF_THEN_ELSE (VOIDmode,
	gen_rtx_LTU (VOIDmode,
	gen_rtx_REG (CCCmode,
	17),
	const0_rtx),
	gen_rtx_LABEL_REF (VOIDmode,
	operand3),
	pc_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:7892 */
extern rtx_insn *gen_split_151 (rtx_insn *, rtx *);
rtx_insn *
gen_split_151 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_151 (i386.md:7892)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 7905 "../../gcc/config/i386/i386.md"
{
  operands[0] = gen_lowpart (SImode, operands[0]);
  operands[1] = gen_lowpart (SImode, operands[1]);
  operands[2] = gen_lowpart (SImode, operands[2]);
  operands[3] = gen_lowpart (SImode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_PLUS (SImode,
	gen_rtx_PLUS (SImode,
	operand1,
	operand2),
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:8008 */
extern rtx_insn *gen_split_163 (rtx_insn *, rtx *);
rtx_insn *
gen_split_163 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_163 (i386.md:8008)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 8024 "../../gcc/config/i386/i386.md"
{
  operands[0] = gen_lowpart (SImode, operands[0]);
  operands[1] = gen_lowpart (SImode, operands[1]);
  operands[2] = GEN_INT (1 << INTVAL (operands[2]));
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_PLUS (SImode,
	gen_rtx_MULT (SImode,
	operand1,
	operand2),
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:8063 */
extern rtx_insn *gen_split_169 (rtx_insn *, rtx *);
rtx_insn *
gen_split_169 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_169 (i386.md:8063)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 8083 "../../gcc/config/i386/i386.md"
{
  split_double_mode (TImode, &operands[0], 3, &operands[0], &operands[3]);
  if (operands[2] == const0_rtx)
    {
      if (!rtx_equal_p (operands[0], operands[1]))
	emit_move_insn (operands[0], operands[1]);
      ix86_expand_binary_operator (MINUS, DImode, &operands[3],
				   TARGET_APX_NDD);
      DONE;
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_COMPARE (CCmode,
	operand1,
	operand2)),
		gen_rtx_SET (operand0,
	gen_rtx_MINUS (DImode,
	copy_rtx (operand1),
	copy_rtx (operand2))))), true);
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand3,
	gen_rtx_MINUS (DImode,
	gen_rtx_MINUS (DImode,
	operand4,
	gen_rtx_LTU (DImode,
	gen_rtx_REG (CCmode,
	17),
	const0_rtx)),
	operand5)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:8357 */
extern rtx_insn *gen_split_183 (rtx_insn *, rtx *);
rtx_insn *
gen_split_183 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_183 (i386.md:8357)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 8391 "../../gcc/config/i386/i386.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_ZERO_EXTRACT (HImode,
	operand0,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_ZERO_EXTRACT (HImode,
	operand1,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)])));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_ZERO_EXTRACT (HImode,
	copy_rtx (operand0),
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_SUBREG (HImode,
	gen_rtx_MINUS (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand3), GET_MODE (operand3),
		copy_rtx (operand0),
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	operand2),
	0)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:8516 */
extern rtx_insn *gen_split_188 (rtx_insn *, rtx *);
rtx_insn *
gen_split_188 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_188 (i386.md:8516)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 8557 "../../gcc/config/i386/i386.md"
{
  split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);
  if (operands[2] == const0_rtx)
    {
      if (!rtx_equal_p (operands[0], operands[1]))
	emit_move_insn (operands[0], operands[1]);
      emit_insn (gen_subvsi4_1 (operands[3], operands[4], operands[5],
				    operands[5]));
      DONE;
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_COMPARE (CCmode,
	operand1,
	operand2)),
		gen_rtx_SET (operand0,
	gen_rtx_MINUS (SImode,
	copy_rtx (operand1),
	copy_rtx (operand2))))), true);
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCOmode,
	17),
	gen_rtx_EQ (CCOmode,
	gen_rtx_MINUS (DImode,
	gen_rtx_MINUS (DImode,
	gen_rtx_SIGN_EXTEND (DImode,
	operand4),
	gen_rtx_LTU (DImode,
	gen_rtx_REG (CCmode,
	17),
	const0_rtx)),
	operand5),
	gen_rtx_SIGN_EXTEND (DImode,
	gen_rtx_MINUS (SImode,
	gen_rtx_MINUS (SImode,
	copy_rtx (operand4),
	gen_rtx_LTU (SImode,
	gen_rtx_REG (CCmode,
	17),
	const0_rtx)),
	copy_rtx (operand5))))),
		gen_rtx_SET (operand3,
	gen_rtx_MINUS (SImode,
	gen_rtx_MINUS (SImode,
	copy_rtx (operand4),
	gen_rtx_LTU (SImode,
	gen_rtx_REG (CCmode,
	17),
	const0_rtx)),
	copy_rtx (operand5))))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:8692 */
extern rtx_insn *gen_peephole2_71 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_71 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_71 (i386.md:8692)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	operand2));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_COMPARE (CCmode,
	operand1,
	copy_rtx (operand0))),
		gen_rtx_SET (copy_rtx (operand1),
	gen_rtx_MINUS (DImode,
	copy_rtx (operand1),
	copy_rtx (operand0))))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:8805 */
extern rtx_insn *gen_peephole2_78 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_78 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_78 (i386.md:8805)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	operand2));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand1,
	gen_rtx_PLUS (SImode,
	gen_rtx_PLUS (SImode,
	gen_rtx_fmt_ee (GET_CODE (operand4), GET_MODE (operand4),
		operand3,
		const0_rtx),
	copy_rtx (operand1)),
	copy_rtx (operand0))),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:9158 */
extern rtx_insn *gen_peephole2_88 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_88 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_88 (i386.md:9158)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_COMPARE (CCCmode,
	gen_rtx_ZERO_EXTEND (DImode,
	gen_rtx_PLUS (SImode,
	gen_rtx_PLUS (SImode,
	gen_rtx_fmt_ee (GET_CODE (operand4), GET_MODE (operand4),
		operand2,
		const0_rtx),
	operand1),
	operand0)),
	gen_rtx_PLUS (DImode,
	gen_rtx_fmt_ee (GET_CODE (operand3), GET_MODE (operand3),
		copy_rtx (operand2),
		const0_rtx),
	gen_rtx_ZERO_EXTEND (DImode,
	copy_rtx (operand0))))),
		gen_rtx_SET (copy_rtx (operand1),
	gen_rtx_PLUS (SImode,
	gen_rtx_PLUS (SImode,
	gen_rtx_fmt_ee (GET_CODE (operand4), GET_MODE (operand4),
		copy_rtx (operand2),
		const0_rtx),
	copy_rtx (operand1)),
	copy_rtx (operand0))))), true);
  emit_insn (gen_rtx_SET (operand5,
	gen_rtx_LTU (QImode,
	gen_rtx_REG (CCCmode,
	17),
	const0_rtx)));
  emit_insn (gen_rtx_SET (operand6,
	gen_rtx_ZERO_EXTEND (SImode,
	copy_rtx (operand5))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:9602 */
extern rtx_insn *gen_peephole2_99 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_99 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_99 (i386.md:9602)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	operand2));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_COMPARE (CCCmode,
	gen_rtx_ZERO_EXTEND (TImode,
	operand1),
	gen_rtx_PLUS (TImode,
	gen_rtx_fmt_ee (GET_CODE (operand4), GET_MODE (operand4),
		operand3,
		const0_rtx),
	gen_rtx_ZERO_EXTEND (TImode,
	copy_rtx (operand0))))),
		gen_rtx_SET (copy_rtx (operand1),
	gen_rtx_MINUS (DImode,
	gen_rtx_MINUS (DImode,
	copy_rtx (operand1),
	gen_rtx_fmt_ee (GET_CODE (operand5), GET_MODE (operand5),
		copy_rtx (operand3),
		const0_rtx)),
	copy_rtx (operand0))))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:9869 */
extern rtx_insn *gen_split_194 (rtx_insn *, rtx *);
rtx_insn *
gen_split_194 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_194 (i386.md:9869)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 9877 "../../gcc/config/i386/i386.md"
emit_note (NOTE_INSN_DELETED); DONE;
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:9890 */
extern rtx_insn *gen_split_197 (rtx_insn *, rtx *);
rtx_insn *
gen_split_197 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_197 (i386.md:9890)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 9897 "../../gcc/config/i386/i386.md"
emit_note (NOTE_INSN_DELETED); DONE;
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:9977 */
extern rtx_insn *gen_peephole2_109 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_109 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_109 (i386.md:9977)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	operand2));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_COMPARE (CCCmode,
	gen_rtx_PLUS (HImode,
	operand1,
	copy_rtx (operand0)),
	copy_rtx (operand1))),
		gen_rtx_SET (copy_rtx (operand1),
	gen_rtx_PLUS (HImode,
	copy_rtx (operand1),
	copy_rtx (operand0))))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:10149 */
extern rtx_insn *gen_split_207 (rtx_insn *, rtx *);
rtx_insn *
gen_split_207 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_207 (i386.md:10149)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 10172 "../../gcc/config/i386/i386.md"
{
  operands[2] = gen_int_mode (~INTVAL (operands[2]),
			      HImode == DImode ? SImode : HImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_COMPARE (CCmode,
	operand3,
	const1_rtx)));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_MINUS (HImode,
	gen_rtx_MINUS (HImode,
	operand1,
	gen_rtx_LTU (HImode,
	gen_rtx_REG (CCmode,
	17),
	const0_rtx)),
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:10198 */
extern rtx_insn *gen_split_215 (rtx_insn *, rtx *);
rtx_insn *
gen_split_215 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_215 (i386.md:10198)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 10216 "../../gcc/config/i386/i386.md"
{
  if (!nonimmediate_operand (operands[1], HImode))
    operands[1] = force_reg (HImode, operands[1]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_COMPARE (CCmode,
	operand2,
	const1_rtx)));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_MINUS (HImode,
	gen_rtx_MINUS (HImode,
	operand1,
	gen_rtx_LTU (HImode,
	gen_rtx_REG (CCmode,
	17),
	const0_rtx)),
	constm1_rtx)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:10243 */
extern rtx_insn *gen_split_225 (rtx_insn *, rtx *);
rtx_insn *
gen_split_225 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_225 (i386.md:10243)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 10267 "../../gcc/config/i386/i386.md"
{
  operands[2] = gen_int_mode (INTVAL (operands[2]) - 1,
			      DImode == DImode ? SImode : DImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_COMPARE (CCmode,
	operand3,
	const1_rtx)));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_PLUS (DImode,
	gen_rtx_PLUS (DImode,
	gen_rtx_LTU (DImode,
	gen_rtx_REG (CCmode,
	17),
	const0_rtx),
	operand1),
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:10322 */
extern rtx_insn *gen_split_235 (rtx_insn *, rtx *);
rtx_insn *
gen_split_235 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_235 (i386.md:10322)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 10340 "../../gcc/config/i386/i386.md"
{
  if (!nonimmediate_operand (operands[1], HImode))
    operands[1] = force_reg (HImode, operands[1]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_COMPARE (CCmode,
	operand2,
	const1_rtx)));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_PLUS (HImode,
	gen_rtx_PLUS (HImode,
	gen_rtx_LTU (HImode,
	gen_rtx_REG (CCmode,
	17),
	const0_rtx),
	operand1),
	constm1_rtx)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:10387 */
rtx
gen_ussubdi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 10392 "../../gcc/config/i386/i386.md"
{
  rtx res = gen_reg_rtx (DImode);
  rtx dst;

  emit_insn (gen_subdi_3 (res, operands[1], operands[2]));

  if (TARGET_CMOVE)
    {
      rtx cmp = gen_rtx_GEU (VOIDmode, gen_rtx_REG (CCCmode, FLAGS_REG),
			     const0_rtx);

      if (8 < GET_MODE_SIZE (SImode))
	{
	  dst = force_reg (DImode, operands[0]);
	  emit_insn (gen_movsicc (gen_lowpart (SImode, dst), cmp,
				  gen_lowpart (SImode, res), const0_rtx));
	}
       else
	{
	  dst = operands[0];
	  emit_insn (gen_movdicc (dst, cmp, res, const0_rtx));
	}
    }
  else
    {
      rtx msk = gen_reg_rtx (DImode);

      emit_insn (gen_x86_movdicc_0_m1_neg (msk));
      msk = expand_simple_unop (DImode, NOT, msk, NULL, 1);
      dst = expand_simple_binop (DImode, AND, res, msk,
				 operands[0], 1, OPTAB_WIDEN);
    }

  if (!rtx_equal_p (dst, operands[0]))
    emit_move_insn (operands[0], dst);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_US_MINUS (DImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:10571 */
rtx
gen_mulqi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_MULT (QImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17)));
}

/* ../../gcc/config/i386/i386.md:10884 */
rtx
gen_mulvqi4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 10900 "../../gcc/config/i386/i386.md"
{
  if (MEM_P (operands[1]) && MEM_P (operands[2]))
    operands[1] = force_reg (QImode, operands[1]);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCOmode,
	17),
	gen_rtx_EQ (CCOmode,
	gen_rtx_MULT (HImode,
	gen_rtx_SIGN_EXTEND (HImode,
	operand1),
	gen_rtx_SIGN_EXTEND (HImode,
	operand2)),
	gen_rtx_SIGN_EXTEND (HImode,
	gen_rtx_MULT (QImode,
	copy_rtx (operand1),
	copy_rtx (operand2))))),
		gen_rtx_SET (operand0,
	gen_rtx_MULT (QImode,
	copy_rtx (operand1),
	copy_rtx (operand2))))), true);
  emit_jump_insn (gen_rtx_SET (pc_rtx,
	gen_rtx_IF_THEN_ELSE (VOIDmode,
	gen_rtx_EQ (VOIDmode,
	gen_rtx_REG (CCOmode,
	17),
	const0_rtx),
	gen_rtx_LABEL_REF (VOIDmode,
	operand3),
	pc_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:11098 */
extern rtx_insn *gen_peephole2_117 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_117 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_117 (i386.md:11098)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand2,
	operand1));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand4,
	gen_rtx_MULT (DImode,
	copy_rtx (operand2),
	operand3)),
		gen_rtx_SET (operand5,
	gen_rtx_UMUL_HIGHPART (DImode,
	copy_rtx (operand2),
	copy_rtx (operand3))))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:11315 */
rtx
gen_divhf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 11320 "../../gcc/config/i386/i386.md"
{
  if (TARGET_RECIP_DIV
      && optimize_insn_for_speed_p ()
      && flag_finite_math_only && !flag_trapping_math
      && flag_unsafe_math_optimizations)
    {
      rtx op = gen_reg_rtx (HFmode);
      operands[2] = force_reg (HFmode, operands[2]);
      emit_insn (gen_rcphf2 (op, operands[2]));
      emit_insn (gen_mulhf3 (operands[0], operands[1], op));
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_DIV (HFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:11403 */
extern rtx_insn *gen_split_247 (rtx_insn *, rtx *);
rtx_insn *
gen_split_247 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_247 (i386.md:11403)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 11417 "../../gcc/config/i386/i386.md"
ix86_split_idivmod (SImode, operands, true); DONE;
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:11595 */
extern rtx_insn *gen_split_257 (rtx_insn *, rtx *);
rtx_insn *
gen_split_257 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_257 (i386.md:11595)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 11614 "../../gcc/config/i386/i386.md"
{
  operands[5] = GEN_INT (GET_MODE_BITSIZE (SImode)-1);

  if (SImode != HImode
      && (optimize_function_for_size_p (cfun) || TARGET_USE_CLTD))
    operands[4] = operands[2];
  else
    {
      /* Avoid use of cltd in favor of a mov+shift.  */
      emit_move_insn (operands[1], operands[2]);
      operands[4] = operands[1];
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand1,
	gen_rtx_ASHIFTRT (SImode,
	operand4,
	operand5)),
		gen_hard_reg_clobber (CCmode, 17))), true);
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		gen_rtx_SET (operand0,
	gen_rtx_DIV (SImode,
	operand2,
	operand3)),
		gen_rtx_SET (copy_rtx (operand1),
	gen_rtx_MOD (SImode,
	copy_rtx (operand2),
	copy_rtx (operand3))),
		gen_rtx_USE (VOIDmode,
	copy_rtx (operand1)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:11759 */
extern rtx_insn *gen_split_267 (rtx_insn *, rtx *);
rtx_insn *
gen_split_267 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_267 (i386.md:11759)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 11779 "../../gcc/config/i386/i386.md"
{
  operands[5] = GEN_INT (GET_MODE_BITSIZE (SImode)-1);
  operands[6] = gen_lowpart (SImode, operands[1]);

  if (optimize_function_for_size_p (cfun) || TARGET_USE_CLTD)
    operands[4] = operands[2];
  else
    {
      /* Avoid use of cltd in favor of a mov+shift.  */
      emit_move_insn (operands[6], operands[2]);
      operands[4] = operands[6];
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand6,
	gen_rtx_ASHIFTRT (SImode,
	operand4,
	operand5)),
		gen_hard_reg_clobber (CCmode, 17))), true);
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		gen_rtx_SET (operand1,
	gen_rtx_ZERO_EXTEND (DImode,
	gen_rtx_MOD (SImode,
	operand2,
	operand3))),
		gen_rtx_SET (operand0,
	gen_rtx_DIV (SImode,
	copy_rtx (operand2),
	copy_rtx (operand3))),
		gen_rtx_USE (VOIDmode,
	copy_rtx (operand6)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:12313 */
extern rtx_insn *gen_split_276 (rtx_insn *, rtx *);
rtx_insn *
gen_split_276 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_276 (i386.md:12313)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 12328 "../../gcc/config/i386/i386.md"
operands[2] = gen_reg_rtx (HImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand2,
	gen_rtx_NOT (HImode,
	operand0)));
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCZmode,
	17),
	gen_rtx_COMPARE (CCZmode,
	gen_rtx_AND (HImode,
	copy_rtx (operand2),
	operand1),
	const0_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:12408 */
extern rtx_insn *gen_peephole2_124 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_124 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_124 (i386.md:12408)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 12417 "../../gcc/config/i386/i386.md"
{
  unsigned HOST_WIDE_INT ival = UINTVAL (operands[1]);
  int first_nonzero_byte, bitsize;
  rtx new_addr, new_const;
  machine_mode new_mode;

  if (ival == 0)
    FAIL;

  /* Clear bits outside mode width.  */
  ival &= GET_MODE_MASK (HImode);

  first_nonzero_byte = ctz_hwi (ival) / BITS_PER_UNIT;

  ival >>= first_nonzero_byte * BITS_PER_UNIT;

  bitsize = sizeof (ival) * BITS_PER_UNIT - clz_hwi (ival);

  if (bitsize <= GET_MODE_BITSIZE (QImode))
    new_mode = QImode;
  else if (bitsize <= GET_MODE_BITSIZE (HImode))
    new_mode = HImode;
  else if (bitsize <= GET_MODE_BITSIZE (SImode))
    new_mode = SImode;
  else
    new_mode = DImode;

  if (GET_MODE_SIZE (new_mode) >= GET_MODE_SIZE (HImode))
    FAIL;

  new_addr = adjust_address (operands[0], new_mode, first_nonzero_byte);
  new_const = gen_int_mode (ival, new_mode);

  operands[2] = gen_rtx_AND (new_mode, new_addr, new_const);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCZmode,
	17),
	gen_rtx_COMPARE (CCZmode,
	operand2,
	const0_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:12570 */
extern rtx_insn *gen_split_285 (rtx_insn *, rtx *);
rtx_insn *
gen_split_285 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_285 (i386.md:12570)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 12586 "../../gcc/config/i386/i386.md"
operands[3] = GEN_INT (exact_log2 (~INTVAL (operands[2])));
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_ZERO_EXTRACT (DImode,
	operand0,
	const1_rtx,
	operand3),
	const0_rtx),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:12758 */
extern rtx_insn *gen_split_295 (rtx_insn *, rtx *);
rtx_insn *
gen_split_295 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_295 (i386.md:12758)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 12783 "../../gcc/config/i386/i386.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode,
	operand0),
	operand1));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode,
	copy_rtx (operand0)),
	gen_rtx_XOR (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand3), GET_MODE (operand3),
		operand2,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	copy_rtx (operand0))),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:12787 */
extern rtx_insn *gen_split_305 (rtx_insn *, rtx *);
rtx_insn *
gen_split_305 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_305 (i386.md:12787)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 12816 "../../gcc/config/i386/i386.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode,
	operand0),
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand4), GET_MODE (operand4),
		operand2,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0)));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode,
	copy_rtx (operand0)),
	gen_rtx_AND (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand3), GET_MODE (operand3),
		operand1,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	copy_rtx (operand0))),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:12855 */
extern rtx_insn *gen_split_315 (rtx_insn *, rtx *);
rtx_insn *
gen_split_315 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_315 (i386.md:12855)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 12863 "../../gcc/config/i386/i386.md"
operands[1] = gen_lowpart (HImode, operands[0]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode,
	operand1),
	const0_rtx));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:13028 */
extern rtx_insn *gen_split_324 (rtx_insn *, rtx *);
rtx_insn *
gen_split_324 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_324 (i386.md:13028)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13057 "../../gcc/config/i386/i386.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand4), GET_MODE (operand4),
		operand2,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0)));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_XOR (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand3), GET_MODE (operand3),
		operand1,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	copy_rtx (operand0))),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:13076 */
extern rtx_insn *gen_split_333 (rtx_insn *, rtx *);
rtx_insn *
gen_split_333 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_333 (i386.md:13076)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13110 "../../gcc/config/i386/i386.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_ZERO_EXTRACT (HImode,
	operand0,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_ZERO_EXTRACT (HImode,
	operand1,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)])));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_ZERO_EXTRACT (HImode,
	copy_rtx (operand0),
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_SUBREG (HImode,
	gen_rtx_XOR (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand3), GET_MODE (operand3),
		copy_rtx (operand0),
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	operand2),
	0)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:13116 */
extern rtx_insn *gen_split_343 (rtx_insn *, rtx *);
rtx_insn *
gen_split_343 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_343 (i386.md:13116)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13164 "../../gcc/config/i386/i386.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (gen_rtx_ZERO_EXTRACT (SImode,
	operand0,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_ZERO_EXTRACT (SImode,
	operand1,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)])));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand4,
	gen_rtx_fmt_ee (GET_CODE (operand5), GET_MODE (operand5),
		gen_rtx_AND (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand3), GET_MODE (operand3),
		copy_rtx (operand0),
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	operand2),
		const0_rtx)),
		gen_rtx_SET (gen_rtx_ZERO_EXTRACT (SImode,
	copy_rtx (operand0),
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_SUBREG (SImode,
	gen_rtx_AND (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand3), GET_MODE (operand3),
		copy_rtx (operand1),
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	copy_rtx (operand2)),
	0)))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:13170 */
extern rtx_insn *gen_split_353 (rtx_insn *, rtx *);
rtx_insn *
gen_split_353 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_353 (i386.md:13170)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13211 "../../gcc/config/i386/i386.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (gen_rtx_ZERO_EXTRACT (SImode,
	operand0,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_ZERO_EXTRACT (SImode,
	operand1,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)])));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_ZERO_EXTRACT (SImode,
	copy_rtx (operand0),
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_SUBREG (SImode,
	gen_rtx_IOR (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand3), GET_MODE (operand3),
		copy_rtx (operand0),
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand4), GET_MODE (operand4),
		operand2,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0)),
	0)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:13216 */
extern rtx_insn *gen_split_363 (rtx_insn *, rtx *);
rtx_insn *
gen_split_363 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_363 (i386.md:13216)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13246 "../../gcc/config/i386/i386.md"
operands[4] = gen_lowpart (GET_MODE (operands[1]), operands[0]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (gen_rtx_ZERO_EXTRACT (SImode,
	operand0,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_ZERO_EXTRACT (SImode,
	operand1,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)])));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_ZERO_EXTRACT (SImode,
	copy_rtx (operand0),
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_fmt_eee (GET_CODE (operand3), GET_MODE (operand3),
		gen_rtx_XOR (VOIDmode,
	operand4,
	operand2),
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)])),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:13306 */
extern rtx_insn *gen_split_373 (rtx_insn *, rtx *);
rtx_insn *
gen_split_373 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_373 (i386.md:13306)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13321 "../../gcc/config/i386/i386.md"
split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_AND (SImode,
	gen_rtx_NOT (SImode,
	operand1),
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), true);
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand3,
	gen_rtx_AND (SImode,
	gen_rtx_NOT (SImode,
	operand4),
	operand5)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:13507 */
rtx
gen_iorqi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13512 "../../gcc/config/i386/i386.md"
{
  if (GET_MODE_SIZE (QImode) > UNITS_PER_WORD
      && !x86_64_hilo_general_operand (operands[2], QImode))
    operands[2] = force_reg (QImode, operands[2]);

  ix86_expand_binary_operator (IOR, QImode, operands, TARGET_APX_NDD);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IOR (QImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:13507 */
rtx
gen_iordi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13512 "../../gcc/config/i386/i386.md"
{
  if (GET_MODE_SIZE (DImode) > UNITS_PER_WORD
      && !x86_64_hilo_general_operand (operands[2], DImode))
    operands[2] = force_reg (DImode, operands[2]);

  ix86_expand_binary_operator (IOR, DImode, operands, TARGET_APX_NDD);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IOR (DImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:13600 */
extern rtx_insn *gen_split_393 (rtx_insn *, rtx *);
rtx_insn *
gen_split_393 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_393 (i386.md:13600)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13616 "../../gcc/config/i386/i386.md"
{
  if (MASK_REG_P (operands[0]))
    {
      emit_insn (gen_kxnordi (operands[0], operands[1], operands[2]));
      DONE;
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_XOR (DImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), true);
  emit_insn (gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_NOT (DImode,
	copy_rtx (operand0))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:13843 */
extern rtx_insn *gen_split_402 (rtx_insn *, rtx *);
rtx_insn *
gen_split_402 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_402 (i386.md:13843)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13851 "../../gcc/config/i386/i386.md"
operands[3] = gen_reg_rtx (HImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand3,
	gen_rtx_SIGN_EXTEND (HImode,
	operand1)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_XOR (HImode,
	copy_rtx (operand3),
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:13853 */
extern rtx_insn *gen_split_409 (rtx_insn *, rtx *);
rtx_insn *
gen_split_409 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_409 (i386.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13861 "../../gcc/config/i386/i386.md"
operands[3] = gen_reg_rtx (SImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand3,
	gen_rtx_SIGN_EXTEND (SImode,
	operand1)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_AND (SImode,
	copy_rtx (operand3),
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:13947 */
extern rtx_insn *gen_split_419 (rtx_insn *, rtx *);
rtx_insn *
gen_split_419 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_419 (i386.md:13947)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13968 "../../gcc/config/i386/i386.md"
{
  /* Handle the case where INTVAL (operands[2]) == 0.  */
  if (operands[2] == const0_rtx)
    {
      if (!rtx_equal_p (operands[0], operands[1]))
	emit_move_insn (operands[0], operands[1]);
      else
	emit_note (NOTE_INSN_DELETED);
      DONE;
    }
  operands[0] = gen_lowpart (HImode, operands[0]);
  operands[1] = gen_lowpart (HImode, operands[1]);
  operands[2] = gen_int_mode (INTVAL (operands[2]) >> 8, QImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_ZERO_EXTRACT (HImode,
	operand0,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_SUBREG (HImode,
	gen_rtx_XOR (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_ZERO_EXTRACT (HImode,
	operand1,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	operand2),
	0)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14006 */
rtx
gen_xorqi_ext_1_cc (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCNOmode,
	17),
	gen_rtx_COMPARE (CCNOmode,
	gen_rtx_XOR (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_ZERO_EXTRACT (HImode,
	operand1,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	operand2),
	const0_rtx)),
		gen_rtx_SET (gen_rtx_ZERO_EXTRACT (HImode,
	operand0,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_SUBREG (HImode,
	gen_rtx_XOR (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_ZERO_EXTRACT (HImode,
	operand1,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	operand2),
	0))));
}

/* ../../gcc/config/i386/i386.md:14041 */
extern rtx_insn *gen_peephole2_139 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_139 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_139 (i386.md:14041)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	const0_rtx),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14041 */
extern rtx_insn *gen_peephole2_149 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_149 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_149 (i386.md:14041)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	const0_rtx),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14070 */
extern rtx_insn *gen_split_438 (rtx_insn *, rtx *);
rtx_insn *
gen_split_438 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_438 (i386.md:14070)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14081 "../../gcc/config/i386/i386.md"
{
  split_double_concat (DImode, operands[0], operands[1],
		       gen_lowpart (SImode, operands[2]));
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14087 */
extern rtx_insn *gen_split_448 (rtx_insn *, rtx *);
rtx_insn *
gen_split_448 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_448 (i386.md:14087)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14100 "../../gcc/config/i386/i386.md"
{
  if (SSE_REG_P (operands[0]))
    {
      rtx tmp = gen_rtx_REG (V2DImode, REGNO (operands[0]));
      emit_insn (gen_vec_concatv2di (tmp, operands[3], operands[1]));
    }
  else
    split_double_concat (TImode, operands[0], operands[3], operands[1]);
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14112 */
extern rtx_insn *gen_split_458 (rtx_insn *, rtx *);
rtx_insn *
gen_split_458 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_458 (i386.md:14112)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14125 "../../gcc/config/i386/i386.md"
{
  split_double_concat (DImode, operands[0], operands[1], operands[2]);
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14131 */
extern rtx_insn *gen_split_468 (rtx_insn *, rtx *);
rtx_insn *
gen_split_468 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_468 (i386.md:14131)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14153 "../../gcc/config/i386/i386.md"
{
  rtx op3 = simplify_subreg (SImode, operands[3], DImode, 0);
  split_double_concat (DImode, operands[0], op3,
		       gen_lowpart (SImode, operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14161 */
extern rtx_insn *gen_split_478 (rtx_insn *, rtx *);
rtx_insn *
gen_split_478 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_478 (i386.md:14161)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14185 "../../gcc/config/i386/i386.md"
{
  rtx op3 = simplify_subreg (DImode, operands[3], TImode, 0);
  split_double_concat (TImode, operands[0], op3, operands[1]);
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14192 */
extern rtx_insn *gen_split_488 (rtx_insn *, rtx *);
rtx_insn *
gen_split_488 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_488 (i386.md:14192)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14211 "../../gcc/config/i386/i386.md"
{
  rtx op2;
  if (TImode == DImode)
    op2 = gen_int_mode (INTVAL (operands[2]) >> 32, DImode);
  else
    op2 = gen_int_mode (CONST_WIDE_INT_ELT (operands[2], 1), DImode);
  split_double_concat (TImode, operands[0], operands[1], op2);
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14267 */
extern rtx_insn *gen_peephole2_152 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_152 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_152 (i386.md:14267)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14300 "../../gcc/config/i386/i386.md"
ix86_expand_clear (operands[0]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_UNSPEC (CCCmode,
	gen_rtvec (2,
		operand2,
		const0_rtx),
	40)),
		gen_rtx_SET (copy_rtx (operand2),
	gen_rtx_NEG (DImode,
	copy_rtx (operand2))))), true);
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_MINUS (DImode,
	gen_rtx_MINUS (DImode,
	copy_rtx (operand0),
	gen_rtx_LTU (DImode,
	gen_rtx_REG (CCmode,
	17),
	const0_rtx)),
	operand1)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14550 */
extern rtx_insn *gen_peephole2_155 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_155 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_155 (i386.md:14550)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCZmode,
	17),
	gen_rtx_COMPARE (CCZmode,
	gen_rtx_NEG (QImode,
	copy_rtx (operand0)),
	const0_rtx)),
		gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_NEG (QImode,
	copy_rtx (operand0))))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14550 */
extern rtx_insn *gen_peephole2_158 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_158 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_158 (i386.md:14550)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCZmode,
	17),
	gen_rtx_COMPARE (CCZmode,
	gen_rtx_NEG (DImode,
	copy_rtx (operand0)),
	const0_rtx)),
		gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_NEG (DImode,
	copy_rtx (operand0))))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14682 */
extern rtx_insn *gen_split_501 (rtx_insn *, rtx *);
rtx_insn *
gen_split_501 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_501 (i386.md:14682)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14704 "../../gcc/config/i386/i386.md"
{
  operands[1] = force_reg (QImode, operands[1]);
  operands[2] = gen_reg_rtx (QImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCGOCmode,
	17),
	gen_rtx_COMPARE (CCGOCmode,
	gen_rtx_NEG (QImode,
	operand1),
	const0_rtx)),
		gen_rtx_SET (operand2,
	gen_rtx_NEG (QImode,
	copy_rtx (operand1))))), true);
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (QImode,
	gen_rtx_GE (VOIDmode,
	gen_rtx_REG (CCGOCmode,
	17),
	const0_rtx),
	copy_rtx (operand2),
	copy_rtx (operand1))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14709 */
extern rtx_insn *gen_split_507 (rtx_insn *, rtx *);
rtx_insn *
gen_split_507 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_507 (i386.md:14709)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14732 "../../gcc/config/i386/i386.md"
{
  operands[1] = force_reg (SImode, operands[1]);
  operands[2] = gen_reg_rtx (SImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCGOCmode,
	17),
	gen_rtx_COMPARE (CCGOCmode,
	gen_rtx_NEG (SImode,
	operand1),
	const0_rtx)),
		gen_rtx_SET (operand2,
	gen_rtx_NEG (SImode,
	copy_rtx (operand1))))), true);
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (SImode,
	gen_rtx_LT (VOIDmode,
	gen_rtx_REG (CCGOCmode,
	17),
	const0_rtx),
	copy_rtx (operand2),
	copy_rtx (operand1))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14798 */
rtx
gen_negdf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14802 "../../gcc/config/i386/i386.md"
ix86_expand_fp_absneg_operator (NEG, DFmode, operands); DONE;
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_NEG (DFmode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14820 */
extern rtx_insn *gen_split_519 (rtx_insn *, rtx *);
rtx_insn *
gen_split_519 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_519 (i386.md:14820)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14826 "../../gcc/config/i386/i386.md"
ix86_split_fp_absneg_operator (NEG, SFmode, operands); DONE;
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14865 */
extern rtx_insn *gen_split_529 (rtx_insn *, rtx *);
rtx_insn *
gen_split_529 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_529 (i386.md:14865)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14875 "../../gcc/config/i386/i386.md"
{
  machine_mode mode = DFmode;
  machine_mode vmode = V2DFmode;

  operands[0] = lowpart_subreg (vmode, operands[0], mode);
  operands[1] = lowpart_subreg (vmode, operands[1], mode);

  if (!TARGET_AVX && operands_match_p (operands[0], operands[2]))
    std::swap (operands[1], operands[2]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_XOR (V2DFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14939 */
rtx
gen_copysigntf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"copysigntf3 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14946 "../../gcc/config/i386/i386.md"
ix86_expand_copysign (operands); DONE;
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:14964 */
rtx
gen_one_cmplti2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14968 "../../gcc/config/i386/i386.md"
{
  ix86_expand_unary_operator (NOT, TImode, operands, TARGET_APX_NDD);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_NOT (TImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:15127 */
extern rtx_insn *gen_split_549 (rtx_insn *, rtx *);
rtx_insn *
gen_split_549 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_549 (i386.md:15127)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 15156 "../../gcc/config/i386/i386.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (gen_rtx_ZERO_EXTRACT (HImode,
	operand0,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_ZERO_EXTRACT (HImode,
	operand1,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)])));
  emit_insn (gen_rtx_SET (gen_rtx_ZERO_EXTRACT (HImode,
	copy_rtx (operand0),
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_SUBREG (HImode,
	gen_rtx_NOT (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand2), GET_MODE (operand2),
		copy_rtx (operand0),
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0)),
	0)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:15318 */
extern rtx_insn *gen_split_557 (rtx_insn *, rtx *);
rtx_insn *
gen_split_557 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_557 (i386.md:15318)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 15325 "../../gcc/config/i386/i386.md"
{
  if (TARGET_APX_NDD
      && !rtx_equal_p (operands[0], operands[1])
      && REG_P (operands[1]))
    ix86_split_ashl_ndd (operands, NULL_RTX);
  else
    ix86_split_ashl (operands, NULL_RTX, TImode);
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:15359 */
extern rtx_insn *gen_split_561 (rtx_insn *, rtx *);
rtx_insn *
gen_split_561 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_561 (i386.md:15359)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 15370 "../../gcc/config/i386/i386.md"
{
  split_double_mode (TImode, &operands[0], 1, &operands[0], &operands[3]);
  int bits = INTVAL (operands[2]) - (8 * BITS_PER_UNIT);
  bool op_equal_p = rtx_equal_p (operands[3], operands[1]);
  if (bits == 0)
    {
      if (!op_equal_p)
	emit_move_insn (operands[3], operands[1]);
    }
  else
    {
      if (!op_equal_p && !TARGET_APX_NDD)
	emit_move_insn (operands[3], operands[1]);
      rtx op_tmp = TARGET_APX_NDD ? operands[1] : operands[3];
      emit_insn (gen_ashldi3 (operands[3], op_tmp, GEN_INT (bits)));
    }
  ix86_expand_clear (operands[0]);
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:15755 */
extern rtx_insn *gen_split_567 (rtx_insn *, rtx *);
rtx_insn *
gen_split_567 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_567 (i386.md:15755)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 15768 "../../gcc/config/i386/i386.md"
{
  if (rtx_equal_p (operands[4], operands[0]))
    {
      operands[1] = force_reg (SImode, operands[1]);
      emit_insn (gen_x86_shld_1 (operands[0], operands[1], operands[2], operands[3]));
    }
  else if (rtx_equal_p (operands[1], operands[0]))
    {
      operands[4] = force_reg (SImode, operands[4]);
      emit_insn (gen_x86_shrd_1 (operands[0], operands[4], operands[3], operands[2]));
    }
  else if (TARGET_APX_NDD)
    {
     rtx tmp = gen_reg_rtx (SImode);
     if (MEM_P (operands[4]))
       {
	 operands[1] = force_reg (SImode, operands[1]);
	 emit_insn (gen_x86_shld_ndd_1 (tmp, operands[4], operands[1],
					operands[2], operands[3]));
       }
     else if (MEM_P (operands[1]))
       emit_insn (gen_x86_shrd_ndd_1 (tmp, operands[1], operands[4],
				      operands[3], operands[2]));
     else
       emit_insn (gen_x86_shld_ndd_1 (tmp, operands[4], operands[1],
				      operands[2], operands[3]));
     emit_move_insn (operands[0], tmp);
    }
 else
   {
     operands[1] = force_reg (SImode, operands[1]);
     rtx tmp = gen_reg_rtx (SImode);
     emit_move_insn (tmp, operands[4]);
     emit_insn (gen_x86_shld_1 (tmp, operands[1], operands[2], operands[3]));
     emit_move_insn (operands[0], tmp);
   }
   DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:16278 */
extern rtx_insn *gen_split_579 (rtx_insn *, rtx *);
rtx_insn *
gen_split_579 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_579 (i386.md:16278)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16287 "../../gcc/config/i386/i386.md"
{
  if (SImode != SImode)
    {
      operands[0] = gen_lowpart (SImode, operands[0]);
      operands[1] = gen_lowpart (SImode, operands[1]);
    }
  operands[2] = GEN_INT (1 << INTVAL (operands[2]));
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_MULT (SImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:16563 */
rtx
gen_lshrqi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16568 "../../gcc/config/i386/i386.md"
{
  ix86_expand_binary_operator (LSHIFTRT, QImode, operands, TARGET_APX_NDD);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_LSHIFTRT (QImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:16563 */
rtx
gen_lshrdi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16568 "../../gcc/config/i386/i386.md"
{
  ix86_expand_binary_operator (LSHIFTRT, DImode, operands, TARGET_APX_NDD);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_LSHIFTRT (DImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:16635 */
extern rtx_insn *gen_split_595 (rtx_insn *, rtx *);
rtx_insn *
gen_split_595 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx operand9;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_595 (i386.md:16635)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16662 "../../gcc/config/i386/i386.md"
{
  if ((INTVAL (operands[3]) & (8 * BITS_PER_UNIT)) != 0)
    {
      emit_insn (gen_lshrti3_doubleword (operands[0], operands[1],
					      operands[2]));
      DONE;
    }

  split_double_mode (TImode, &operands[0], 2, &operands[4], &operands[6]);

  operands[8] = GEN_INT (8 * BITS_PER_UNIT - 1);
  operands[9] = GEN_INT (8 * BITS_PER_UNIT);

  if ((INTVAL (operands[3]) & ((8 * BITS_PER_UNIT) - 1))
      != ((8 * BITS_PER_UNIT) - 1))
    {
      rtx tem = gen_reg_rtx (QImode);
      emit_insn (gen_andqi3 (tem, operands[2], operands[3]));
      operands[2] = tem;
    }

  if (!rtx_equal_p (operands[4], operands[5]))
    emit_move_insn (operands[4], operands[5]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  operand7 = operands[7];
  (void) operand7;
  operand8 = operands[8];
  (void) operand8;
  operand9 = operands[9];
  (void) operand9;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand4,
	gen_rtx_IOR (DImode,
	gen_rtx_LSHIFTRT (DImode,
	copy_rtx (operand4),
	gen_rtx_AND (QImode,
	operand2,
	operand8)),
	gen_rtx_SUBREG (DImode,
	gen_rtx_ASHIFT (TImode,
	gen_rtx_ZERO_EXTEND (TImode,
	operand7),
	gen_rtx_MINUS (QImode,
	operand9,
	gen_rtx_AND (QImode,
	copy_rtx (operand2),
	copy_rtx (operand8)))),
	0))),
		gen_hard_reg_clobber (CCmode, 17))), true);
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand6,
	gen_rtx_LSHIFTRT (DImode,
	copy_rtx (operand7),
	copy_rtx (operand2))),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:16731 */
extern rtx_insn *gen_split_602 (rtx_insn *, rtx *);
rtx_insn *
gen_split_602 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_602 (i386.md:16731)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16744 "../../gcc/config/i386/i386.md"
{
  split_double_mode (DImode, &operands[1], 1, &operands[1], &operands[3]);
  operands[4] = GEN_INT ((4 * BITS_PER_UNIT) - INTVAL (operands[2]));
  if (!rtx_equal_p (operands[0], operands[1]))
    emit_move_insn (operands[0], operands[1]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IOR (SImode,
	gen_rtx_LSHIFTRT (SImode,
	copy_rtx (operand0),
	operand2),
	gen_rtx_SUBREG (SImode,
	gen_rtx_ASHIFT (DImode,
	gen_rtx_ZERO_EXTEND (DImode,
	operand3),
	operand4),
	0))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:16983 */
extern rtx_insn *gen_split_612 (rtx_insn *, rtx *);
rtx_insn *
gen_split_612 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_612 (i386.md:16983)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_IOR (DImode,
	gen_rtx_LSHIFTRT (DImode,
	operand1,
	gen_rtx_AND (QImode,
	operand3,
	const_int_rtx[MAX_SAVED_CONST_INT + (63)])),
	gen_rtx_SUBREG (DImode,
	gen_rtx_ASHIFT (TImode,
	gen_rtx_ZERO_EXTEND (TImode,
	operand2),
	gen_rtx_MINUS (QImode,
	const_int_rtx[MAX_SAVED_CONST_INT + (64)],
	gen_rtx_AND (QImode,
	copy_rtx (operand3),
	const_int_rtx[MAX_SAVED_CONST_INT + (63)]))),
	0))),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:17421 */
extern rtx_insn *gen_split_618 (rtx_insn *, rtx *);
rtx_insn *
gen_split_618 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_618 (i386.md:17421)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17428 "../../gcc/config/i386/i386.md"
operands[2] = gen_lowpart (SImode, operands[2]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_LSHIFTRT (SImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:17516 */
extern rtx_insn *gen_split_627 (rtx_insn *, rtx *);
rtx_insn *
gen_split_627 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_627 (i386.md:17516)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17525 "../../gcc/config/i386/i386.md"
operands[2] = gen_lowpart (SImode, operands[2]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (DImode,
	gen_rtx_ASHIFTRT (SImode,
	operand1,
	operand2))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:17778 */
extern rtx_insn *gen_split_637 (rtx_insn *, rtx *);
rtx_insn *
gen_split_637 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_637 (i386.md:17778)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17819 "../../gcc/config/i386/i386.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_ZERO_EXTRACT (DImode,
	operand0,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_ZERO_EXTRACT (DImode,
	operand1,
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)])));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_ZERO_EXTRACT (DImode,
	copy_rtx (operand0),
	const_int_rtx[MAX_SAVED_CONST_INT + (8)],
	const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	gen_rtx_SUBREG (DImode,
	gen_rtx_ASHIFTRT (QImode,
	gen_rtx_SUBREG (QImode,
	gen_rtx_fmt_eee (GET_CODE (operand3), GET_MODE (operand3),
		copy_rtx (operand0),
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)]),
	0),
	operand2),
	0)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:17879 */
extern rtx_insn *gen_split_651 (rtx_insn *, rtx *);
rtx_insn *
gen_split_651 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_651 (i386.md:17879)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17898 "../../gcc/config/i386/i386.md"
{
  operands[2] = force_reg (GET_MODE (operands[2]), operands[2]);
  operands[2] = gen_lowpart (QImode, operands[2]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_LSHIFTRT (SImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:17904 */
extern rtx_insn *gen_split_661 (rtx_insn *, rtx *);
rtx_insn *
gen_split_661 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_661 (i386.md:17904)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17922 "../../gcc/config/i386/i386.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_ASHIFTRT (DImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:17956 */
extern rtx_insn *gen_split_671 (rtx_insn *, rtx *);
rtx_insn *
gen_split_671 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_671 (i386.md:17956)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17978 "../../gcc/config/i386/i386.md"
operands[4] = gen_reg_rtx (QImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand4,
	gen_rtx_NEG (QImode,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), true);
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (DImode,
	operand1,
	copy_rtx (operand4))),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18100 */
rtx
gen_rotrdi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18105 "../../gcc/config/i386/i386.md"
{
  if (TARGET_64BIT)
    ix86_expand_binary_operator (ROTATERT, DImode, operands, TARGET_APX_NDD);
  else if (const_1_to_31_operand (operands[2], VOIDmode))
    emit_insn (gen_ix86_rotrdi3_doubleword
		(operands[0], operands[1], operands[2]));
  else if (CONST_INT_P (operands[2]) && INTVAL (operands[2]) == 32)
    {
      operands[1] = force_reg (DImode, operands[1]);
      emit_insn (gen_rotr32di2_doubleword (operands[0], operands[1]));
    }
  else
    FAIL;

  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ROTATERT (DImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18133 */
extern rtx_insn *gen_split_678 (rtx_insn *, rtx *);
rtx_insn *
gen_split_678 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_678 (i386.md:18133)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18153 "../../gcc/config/i386/i386.md"
{
  operands[2] = force_reg (GET_MODE (operands[2]), operands[2]);
  operands[2] = gen_lowpart (QImode, operands[2]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_ROTATE (QImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18158 */
extern rtx_insn *gen_split_688 (rtx_insn *, rtx *);
rtx_insn *
gen_split_688 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_688 (i386.md:18158)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18172 "../../gcc/config/i386/i386.md"
operands[4] = gen_reg_rtx (HImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand4,
	operand1));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ROTATE (HImode,
	copy_rtx (operand4),
	gen_rtx_SUBREG (QImode,
	operand2,
	0))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18174 */
extern rtx_insn *gen_split_698 (rtx_insn *, rtx *);
rtx_insn *
gen_split_698 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_698 (i386.md:18174)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_ROTATE (SImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18194 */
extern rtx_insn *gen_split_708 (rtx_insn *, rtx *);
rtx_insn *
gen_split_708 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_708 (i386.md:18194)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18206 "../../gcc/config/i386/i386.md"
operands[4] = gen_reg_rtx (DImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand4,
	operand1));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ROTATE (DImode,
	copy_rtx (operand4),
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18231 */
extern rtx_insn *gen_split_718 (rtx_insn *, rtx *);
rtx_insn *
gen_split_718 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_718 (i386.md:18231)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18243 "../../gcc/config/i386/i386.md"
operands[4] = gen_reg_rtx (QImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand4,
	operand1));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ROTATE (QImode,
	copy_rtx (operand4),
	gen_rtx_SUBREG (QImode,
	operand2,
	0))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18245 */
extern rtx_insn *gen_split_728 (rtx_insn *, rtx *);
rtx_insn *
gen_split_728 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_728 (i386.md:18245)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18262 "../../gcc/config/i386/i386.md"
operands[2] = force_reg (GET_MODE (operands[2]), operands[2]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_ROTATE (HImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18264 */
extern rtx_insn *gen_split_738 (rtx_insn *, rtx *);
rtx_insn *
gen_split_738 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_738 (i386.md:18264)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18275 "../../gcc/config/i386/i386.md"
operands[4] = gen_reg_rtx (SImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand4,
	operand1));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ROTATE (SImode,
	copy_rtx (operand4),
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18277 */
extern rtx_insn *gen_split_748 (rtx_insn *, rtx *);
rtx_insn *
gen_split_748 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_748 (i386.md:18277)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18295 "../../gcc/config/i386/i386.md"
{
  operands[2] = force_reg (GET_MODE (operands[2]), operands[2]);
  operands[2] = gen_lowpart (QImode, operands[2]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_ROTATERT (DImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18314 */
extern rtx_insn *gen_split_758 (rtx_insn *, rtx *);
rtx_insn *
gen_split_758 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_758 (i386.md:18314)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18331 "../../gcc/config/i386/i386.md"
operands[2] = force_reg (GET_MODE (operands[2]), operands[2]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_ROTATERT (QImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18333 */
extern rtx_insn *gen_split_766 (rtx_insn *, rtx *);
rtx_insn *
gen_split_766 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_766 (i386.md:18333)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18344 "../../gcc/config/i386/i386.md"
operands[4] = gen_reg_rtx (QImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand4,
	operand1));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ROTATERT (QImode,
	copy_rtx (operand4),
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18386 */
extern rtx_insn *gen_split_776 (rtx_insn *, rtx *);
rtx_insn *
gen_split_776 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_776 (i386.md:18386)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18416 "../../gcc/config/i386/i386.md"
{
  operands[6] = GEN_INT (GET_MODE_BITSIZE (SImode) - 1);
  operands[7] = GEN_INT (GET_MODE_BITSIZE (SImode));

  split_double_mode (DImode, &operands[0], 1, &operands[4], &operands[5]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  operand7 = operands[7];
  (void) operand7;
  emit_insn (gen_rtx_SET (operand3,
	operand4));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (copy_rtx (operand4),
	gen_rtx_IOR (SImode,
	gen_rtx_LSHIFTRT (SImode,
	copy_rtx (operand4),
	gen_rtx_AND (QImode,
	operand2,
	operand6)),
	gen_rtx_SUBREG (SImode,
	gen_rtx_ASHIFT (DImode,
	gen_rtx_ZERO_EXTEND (DImode,
	operand5),
	gen_rtx_MINUS (QImode,
	operand7,
	gen_rtx_AND (QImode,
	copy_rtx (operand2),
	copy_rtx (operand6)))),
	0))),
		gen_hard_reg_clobber (CCmode, 17))), true);
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (copy_rtx (operand5),
	gen_rtx_IOR (SImode,
	gen_rtx_LSHIFTRT (SImode,
	copy_rtx (operand5),
	gen_rtx_AND (QImode,
	copy_rtx (operand2),
	copy_rtx (operand6))),
	gen_rtx_SUBREG (SImode,
	gen_rtx_ASHIFT (DImode,
	gen_rtx_ZERO_EXTEND (DImode,
	copy_rtx (operand3)),
	gen_rtx_MINUS (QImode,
	copy_rtx (operand7),
	gen_rtx_AND (QImode,
	copy_rtx (operand2),
	copy_rtx (operand6)))),
	0))),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18719 */
extern rtx_insn *gen_split_795 (rtx_insn *, rtx *);
rtx_insn *
gen_split_795 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_795 (i386.md:18719)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_BSWAP (HImode,
	copy_rtx (operand0))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18842 */
extern rtx_insn *gen_split_801 (rtx_insn *, rtx *);
rtx_insn *
gen_split_801 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_801 (i386.md:18842)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_XOR (SImode,
	gen_rtx_ASHIFT (SImode,
	const1_rtx,
	operand1),
	operand3)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:18956 */
extern rtx_insn *gen_split_810 (rtx_insn *, rtx *);
rtx_insn *
gen_split_810 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_810 (i386.md:18956)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18973 "../../gcc/config/i386/i386.md"
{
  operands[2] = gen_reg_rtx (QImode);
  operands[5] = gen_reg_rtx (QImode);
  operands[3] = lowpart_subreg (SImode, operands[5], QImode);
  operands[4] = lowpart_subreg (SImode, operands[2], QImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand2,
	operand0));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand3,
	gen_rtx_AND (SImode,
	gen_rtx_ROTATE (SImode,
	const_int_rtx[MAX_SAVED_CONST_INT + (-2)],
	operand1),
	operand4)),
		gen_hard_reg_clobber (CCmode, 17))), true);
  emit_insn (gen_rtx_SET (copy_rtx (operand0),
	operand5));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:19155 */
extern rtx_insn *gen_split_818 (rtx_insn *, rtx *);
rtx_insn *
gen_split_818 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_818 (i386.md:19155)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 19176 "../../gcc/config/i386/i386.md"
operands[1] = gen_lowpart (QImode, operands[1]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_COMPARE (CCCmode,
	gen_rtx_ZERO_EXTRACT (SImode,
	operand0,
	const1_rtx,
	operand1),
	const0_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:19251 */
extern rtx_insn *gen_split_828 (rtx_insn *, rtx *);
rtx_insn *
gen_split_828 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_828 (i386.md:19251)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 19282 "../../gcc/config/i386/i386.md"
{
  operands[0] = shallow_copy_rtx (operands[0]);
  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));
  operands[2] = gen_lowpart (QImode, operands[2]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_COMPARE (CCCmode,
	gen_rtx_ZERO_EXTRACT (SImode,
	operand1,
	const1_rtx,
	operand2),
	const0_rtx)));
  emit_jump_insn (gen_rtx_SET (pc_rtx,
	gen_rtx_IF_THEN_ELSE (VOIDmode,
	gen_rtx_fmt_ee (GET_CODE (operand0), GET_MODE (operand0),
		gen_rtx_REG (CCCmode,
	17),
		const0_rtx),
	gen_rtx_LABEL_REF (VOIDmode,
	operand4),
	pc_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:19335 */
extern rtx_insn *gen_split_838 (rtx_insn *, rtx *);
rtx_insn *
gen_split_838 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_838 (i386.md:19335)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_COMPARE (CCCmode,
	gen_rtx_ZERO_EXTRACT (SImode,
	operand1,
	const1_rtx,
	operand2),
	const0_rtx)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_NE (QImode,
	gen_rtx_REG (CCCmode,
	17),
	const0_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:19395 */
extern rtx_insn *gen_split_844 (rtx_insn *, rtx *);
rtx_insn *
gen_split_844 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_844 (i386.md:19395)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 19418 "../../gcc/config/i386/i386.md"
{
  operands[2] = gen_lowpart (QImode, operands[2]);
  operands[3] = gen_reg_rtx (QImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_COMPARE (CCCmode,
	gen_rtx_ZERO_EXTRACT (SImode,
	operand1,
	const1_rtx,
	operand2),
	const0_rtx)));
  emit_insn (gen_rtx_SET (operand3,
	gen_rtx_EQ (QImode,
	gen_rtx_REG (CCCmode,
	17),
	const0_rtx)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (SImode,
	copy_rtx (operand3))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:19573 */
extern rtx_insn *gen_split_857 (rtx_insn *, rtx *);
rtx_insn *
gen_split_857 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_857 (i386.md:19573)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 19580 "../../gcc/config/i386/i386.md"
{
  operands[1] = shallow_copy_rtx (operands[1]);
  PUT_MODE (operands[1], QImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:19703 */
extern rtx_insn *gen_split_864 (rtx_insn *, rtx *);
rtx_insn *
gen_split_864 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_864 (i386.md:19703)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_COMPARE (CCCmode,
	gen_rtx_PLUS (DImode,
	operand2,
	operand3),
	copy_rtx (operand2))));
  emit_jump_insn (gen_rtx_SET (pc_rtx,
	gen_rtx_IF_THEN_ELSE (VOIDmode,
	gen_rtx_fmt_ee (GET_CODE (operand1), GET_MODE (operand1),
		gen_rtx_REG (CCCmode,
	17),
		const0_rtx),
	gen_rtx_LABEL_REF (VOIDmode,
	operand0),
	pc_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:20009 */
extern rtx_insn *gen_peephole2_173 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_173 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_173 (i386.md:20009)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 20028 "../../gcc/config/i386/i386.md"
{
  operands[6] = gen_lowpart (QImode, operands[3]);
  ix86_expand_clear (operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand5,
	operand0),
		operand4)), true);
  emit_insn (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode,
	operand6),
	operand2));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:20207 */
rtx
gen_call_pop (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 20214 "../../gcc/config/i386/i386.md"
{
  ix86_expand_call (NULL, operands[0], operands[1],
		    operands[2], operands[3], false);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_call_insn (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_CALL (VOIDmode,
	operand0,
	operand1),
		gen_rtx_SET (gen_rtx_REG (SImode,
	7),
	gen_rtx_PLUS (SImode,
	gen_rtx_REG (SImode,
	7),
	operand3)))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:20467 */
extern rtx_insn *gen_peephole2_188 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_188 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_188 (i386.md:20467)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_call_insn (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (3,
		gen_rtx_SET (operand2,
	gen_rtx_CALL (VOIDmode,
	gen_rtx_MEM (QImode,
	operand1),
	operand3)),
		gen_rtx_SET (gen_rtx_REG (SImode,
	7),
	gen_rtx_PLUS (SImode,
	gen_rtx_REG (SImode,
	7),
	operand4)),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	37))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:20827 */
rtx
gen_eh_return (rtx operand0)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 20830 "../../gcc/config/i386/i386.md"
{
  rtx tmp, sa = EH_RETURN_STACKADJ_RTX, ra = operands[0];

  /* Tricky bit: we write the address of the handler to which we will
     be returning into someone else's stack frame, one word below the
     stack address we wish to restore.  */
  tmp = gen_rtx_PLUS (Pmode, arg_pointer_rtx, sa);
  tmp = plus_constant (Pmode, tmp, -UNITS_PER_WORD);
  /* Return address is always in word_mode.  */
  tmp = gen_rtx_MEM (word_mode, tmp);
  if (GET_MODE (ra) != word_mode)
    ra = convert_to_mode (word_mode, ra, 1);
  emit_move_insn (tmp, ra);

  emit_jump_insn (gen_eh_return_internal ());
  emit_barrier ();
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
  }
  emit_insn (gen_rtx_USE (VOIDmode,
	operand0));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:21159 */
extern rtx_insn *gen_split_876 (rtx_insn *, rtx *);
rtx_insn *
gen_split_876 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_876 (i386.md:21159)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 21184 "../../gcc/config/i386/i386.md"
ix86_expand_clear (operands[0]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (3,
		gen_rtx_SET (operand0,
	gen_rtx_SIGN_EXTEND (DImode,
	gen_rtx_CTZ (SImode,
	operand1))),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		copy_rtx (operand0)),
	38),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:21432 */
extern rtx_insn *gen_split_883 (rtx_insn *, rtx *);
rtx_insn *
gen_split_883 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_883 (i386.md:21432)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 21451 "../../gcc/config/i386/i386.md"
{
  if (INTVAL (operands[2]) == 31)
    {
      emit_insn (gen_bsr_zext_1 (operands[0], operands[1]));
      DONE;
    }
  operands[3] = gen_reg_rtx (DImode);
  operands[4] = GEN_INT (UINTVAL (operands[2]) - 31);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand3,
	gen_rtx_ZERO_EXTEND (DImode,
	gen_rtx_MINUS (SImode,
	const_int_rtx[MAX_SAVED_CONST_INT + (31)],
	gen_rtx_CLZ (SImode,
	operand1)))));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_PLUS (DImode,
	copy_rtx (operand3),
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:21645 */
extern rtx_insn *gen_split_892 (rtx_insn *, rtx *);
rtx_insn *
gen_split_892 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_892 (i386.md:21645)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 21658 "../../gcc/config/i386/i386.md"
ix86_expand_clear (operands[0]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (DImode,
	gen_rtvec (1,
		operand1),
	97)),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		copy_rtx (operand0)),
	38))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:22165 */
extern rtx_insn *gen_split_900 (rtx_insn *, rtx *);
rtx_insn *
gen_split_900 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_900 (i386.md:22165)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 22186 "../../gcc/config/i386/i386.md"
ix86_expand_clear (operands[0]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (3,
		gen_rtx_SET (operand0,
	gen_rtx_POPCOUNT (SImode,
	operand1)),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		copy_rtx (operand0)),
	38),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:22442 */
rtx
gen_bswaphi2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 22446 "../../gcc/config/i386/i386.md"
{
  if (!TARGET_MOVBE)
    operands[1] = force_reg (HImode, operands[1]);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_BSWAP (HImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:22677 */
extern rtx_insn *gen_peephole2_194 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_194 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_194 (i386.md:22677)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 22702 "../../gcc/config/i386/i386.md"
{
  operands[4] = shallow_copy_rtx (operands[4]);
  PUT_CODE (operands[4], GET_CODE (operands[4]) == EQ ? UNORDERED : ORDERED);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_UNSPEC (CCmode,
	gen_rtvec (1,
		operand1),
	27)));
  emit_jump_insn (gen_rtx_SET (pc_rtx,
	gen_rtx_IF_THEN_ELSE (VOIDmode,
	gen_rtx_fmt_ee (GET_CODE (operand4), GET_MODE (operand4),
		gen_rtx_REG (CCmode,
	17),
		const0_rtx),
	gen_rtx_LABEL_REF (VOIDmode,
	operand5),
	pc_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:22997 */
extern rtx_insn *gen_split_906 (rtx_insn *, rtx *);
rtx_insn *
gen_split_906 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_906 (i386.md:22997)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (4,
		operand1,
		operand3,
		operand2,
		gen_rtx_REG (SImode,
	7)),
	20)),
		gen_rtx_CLOBBER (VOIDmode,
	operand4),
		gen_rtx_CLOBBER (VOIDmode,
	operand5),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:23233 */
extern rtx_insn *gen_split_916 (rtx_insn *, rtx *);
rtx_insn *
gen_split_916 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_916 (i386.md:23233)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 23237 "../../gcc/config/i386/i386.md"
operands[0] = ix86_rewrite_tls_address (operands[0]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  emit (operand0, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:23688 */
rtx
gen_hypotsf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"hypotsf3 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 23697 "../../gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);
  rtx op2 = gen_reg_rtx (XFmode);

  emit_insn (gen_extendsfxf2 (op2, operands[2]));
  emit_insn (gen_extendsfxf2 (op1, operands[1]));

  emit_insn (gen_mulxf3 (op1, op1, op1));
  emit_insn (gen_mulxf3 (op2, op2, op2));
  emit_insn (gen_addxf3 (op0, op2, op1));
  emit_insn (gen_sqrtxf2 (op0, op0));

  emit_insn (gen_truncxfsf2 (operands[0], op0));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_USE (VOIDmode,
	operand0));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand1));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand2));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:23887 */
rtx
gen_sindf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"sindf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 23895 "../../gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extenddfxf2 (op1, operands[1]));
  emit_insn (gen_sinxf2 (op0, op1));
  emit_insn (gen_truncxfdf2 (operands[0], op0));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (DFmode,
	gen_rtvec (1,
		operand1),
	64)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:24024 */
rtx
gen_atansf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"atansf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 24031 "../../gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extendsfxf2 (op1, operands[1]));
  emit_insn (gen_atanxf2 (op0, op1));
  emit_insn (gen_truncxfsf2 (operands[0], op0));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_USE (VOIDmode,
	operand0));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:24128 */
rtx
gen_sinhdf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"sinhdf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 24136 "../../gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extenddfxf2 (op1, operands[1]));
  emit_insn (gen_sinhxf2 (op0, op1));
  emit_insn (gen_truncxfdf2 (operands[0], op0));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_USE (VOIDmode,
	operand0));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:24211 */
rtx
gen_asinhdf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"asinhdf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 24219 "../../gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extenddfxf2 (op1, operands[1]));
  emit_insn (gen_asinhxf2 (op0, op1));
  emit_insn (gen_truncxfdf2 (operands[0], op0));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_USE (VOIDmode,
	operand0));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:24337 */
rtx
gen_log10sf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"log10sf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 24344 "../../gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extendsfxf2 (op1, operands[1]));
  emit_insn (gen_log10xf2 (op0, op1));
  emit_insn (gen_truncxfsf2 (operands[0], op0));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_USE (VOIDmode,
	operand0));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:24443 */
rtx
gen_logbsf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"logbsf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 24450 "../../gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extendsfxf2 (op1, operands[1]));
  emit_insn (gen_logbxf2 (op0, op1));
  emit_insn (gen_truncxfsf2 (operands[0], op1));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_USE (VOIDmode,
	operand0));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:24593 */
rtx
gen_exp10sf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"exp10sf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 24600 "../../gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extendsfxf2 (op1, operands[1]));
  emit_insn (gen_exp10xf2 (op0, op1));
  emit_insn (gen_truncxfsf2 (operands[0], op0));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_USE (VOIDmode,
	operand0));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:24716 */
rtx
gen_ldexpsf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"ldexpsf3 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 24725 "../../gcc/config/i386/i386.md"
{
  /* Prefer avx512f version.  */
  if (TARGET_AVX512F && TARGET_SSE_MATH)
   {
     rtx op2 = gen_reg_rtx (SFmode);
     operands[1] = force_reg (SFmode, operands[1]);

     emit_insn (gen_floatsisf2 (op2, operands[2]));
     emit_insn (gen_avx512f_scalefsf2 (operands[0], operands[1], op2));
   }
  else
    {
      rtx op0 = gen_reg_rtx (XFmode);
      rtx op1 = gen_reg_rtx (XFmode);

      emit_insn (gen_extendsfxf2 (op1, operands[1]));
      emit_insn (gen_ldexpxf3 (op0, op1, operands[2]));
      emit_insn (gen_truncxfsf2 (operands[0], op0));
  }
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_USE (VOIDmode,
	operand0));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand1));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand2));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:24857 */
rtx
gen_rintdf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"rintdf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 24862 "../../gcc/config/i386/i386.md"
{
  if (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)
    {
      if (TARGET_SSE4_1)
	emit_insn (gen_sse4_1_rounddf2
		   (operands[0], operands[1], GEN_INT (ROUND_MXCSR)));
      else
	ix86_expand_rint (operands[0], operands[1]);
    }
  else
    {
      rtx op0 = gen_reg_rtx (XFmode);
      rtx op1 = gen_reg_rtx (XFmode);

      emit_insn (gen_extenddfxf2 (op1, operands[1]));
      emit_insn (gen_rintxf2 (op0, op1));
      emit_insn (gen_truncxfdf2_i387_noop_unspec (operands[0], op0));
    }
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_USE (VOIDmode,
	operand0));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:25002 */
rtx
gen_lrintsfsi2 (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (1,
		operand1),
	46));
}

/* ../../gcc/config/i386/i386.md:25008 */
rtx
gen_lroundsfhi2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"lroundsfhi2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25019 "../../gcc/config/i386/i386.md"
{
  if (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH
      && HImode != HImode
      && ((HImode != DImode) || TARGET_64BIT)
      && !flag_trapping_math && !flag_rounding_math)
    ix86_expand_lround (operands[0], operands[1]);
  else
    ix86_emit_i387_round (operands[0], operands[1]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:25066 */
extern rtx_insn *gen_split_918 (rtx_insn *, rtx *);
rtx_insn *
gen_split_918 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_918 (i386.md:25066)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25077 "../../gcc/config/i386/i386.md"
{
  ix86_optimize_mode_switching[I387_FLOOR] = 1;

  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);
  operands[3] = assign_386_stack_local (HImode, SLOT_CW_FLOOR);

  emit_insn (gen_frndintxf2_floor_i387 (operands[0], operands[1],
					     operands[2], operands[3]));
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:25124 */
rtx
gen_btruncsf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"btruncsf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25137 "../../gcc/config/i386/i386.md"
{
  if (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH
      && (TARGET_SSE4_1
	  || (ROUND_TRUNC != ROUND_ROUNDEVEN
	      && (flag_fp_int_builtin_inexact || !flag_trapping_math))))
    {
      if (TARGET_SSE4_1)
	emit_insn (gen_sse4_1_roundsf2
		   (operands[0], operands[1],
		    GEN_INT (ROUND_TRUNC | ROUND_NO_EXC)));
      else if (TARGET_64BIT || (SFmode != DFmode))
	{
	  if (ROUND_TRUNC == ROUND_FLOOR)
	    ix86_expand_floorceil (operands[0], operands[1], true);
	  else if (ROUND_TRUNC == ROUND_CEIL)
	    ix86_expand_floorceil (operands[0], operands[1], false);
	  else if (ROUND_TRUNC == ROUND_TRUNC)
	    ix86_expand_trunc (operands[0], operands[1]);
	  else
	    gcc_unreachable ();
	}
      else
	{
	  if (ROUND_TRUNC == ROUND_FLOOR)
	    ix86_expand_floorceildf_32 (operands[0], operands[1], true);
	  else if (ROUND_TRUNC == ROUND_CEIL)
	    ix86_expand_floorceildf_32 (operands[0], operands[1], false);
	  else if (ROUND_TRUNC == ROUND_TRUNC)
	    ix86_expand_truncdf_32 (operands[0], operands[1]);
	  else
	    gcc_unreachable ();
	}
    }
  else
    {
      rtx op0 = gen_reg_rtx (XFmode);
      rtx op1 = gen_reg_rtx (XFmode);

      emit_insn (gen_extendsfxf2 (op1, operands[1]));
      emit_insn (gen_frndintxf2_trunc (op0, op1));
      emit_insn (gen_truncxfsf2_i387_noop_unspec (operands[0], op0));
    }
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (SFmode,
	gen_rtvec (1,
		operand1),
	77)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:25235 */
rtx
gen_lfloorxfdi2 (rtx operand0,
	rtx operand1)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (DImode,
	gen_rtvec (1,
		operand1),
	78)),
		gen_hard_reg_clobber (CCmode, 17)));
}

/* ../../gcc/config/i386/i386.md:25257 */
rtx
gen_lfloorsfdi2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"lfloorsfdi2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25264 "../../gcc/config/i386/i386.md"
{
  if (TARGET_SSE4_1)
    {
      rtx tmp = gen_reg_rtx (SFmode);

      emit_insn (gen_sse4_1_roundsf2
		 (tmp, operands[1], GEN_INT (ROUND_FLOOR
					     | ROUND_NO_EXC)));
      emit_insn (gen_fix_truncsfdi2
		 (operands[0], tmp));
    }
  else if (ROUND_FLOOR == ROUND_FLOOR)
    ix86_expand_lfloorceil (operands[0], operands[1], true);
  else if (ROUND_FLOOR == ROUND_CEIL)
    ix86_expand_lfloorceil (operands[0], operands[1], false);
  else
    gcc_unreachable ();

  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (DImode,
	gen_rtvec (1,
		operand1),
	78)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:25395 */
rtx
gen_cpymemsi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5,
	rtx operand6,
	rtx operand7,
	rtx operand8)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[9];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
    operands[6] = operand6;
    operands[7] = operand7;
    operands[8] = operand8;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25406 "../../gcc/config/i386/i386.md"
{
 if (ix86_expand_set_or_cpymem (operands[0], operands[1],
			        operands[2], NULL, operands[3],
			        operands[4], operands[5],
				operands[6], operands[7],
				operands[8], false))
   DONE;
 else
   FAIL;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
    operand6 = operands[6];
    (void) operand6;
    operand7 = operands[7];
    (void) operand7;
    operand8 = operands[8];
    (void) operand8;
  }
  emit_insn (gen_rtx_USE (VOIDmode,
	operand0));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand1));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand2));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand3));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand4));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand5));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand6));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand7));
  emit_insn (gen_rtx_USE (VOIDmode,
	operand8));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:25845 */
rtx
gen_cmpintqi (rtx operand0)
{
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25855 "../../gcc/config/i386/i386.md"
{
  operands[1] = gen_reg_rtx (QImode);
  operands[2] = gen_reg_rtx (QImode);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand1,
	gen_rtx_GTU (QImode,
	gen_rtx_REG (CCmode,
	17),
	const0_rtx)));
  emit_insn (gen_rtx_SET (operand2,
	gen_rtx_LTU (QImode,
	gen_rtx_REG (CCmode,
	17),
	const0_rtx)));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_MINUS (QImode,
	copy_rtx (operand1),
	copy_rtx (operand2))),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:26063 */
rtx
gen_movhicc (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 26069 "../../gcc/config/i386/i386.md"
if (ix86_expand_int_movcc (operands)) DONE; else FAIL;
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (HImode,
	operand1,
	operand2,
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:26149 */
extern rtx_insn *gen_split_932 (rtx_insn *, rtx *);
rtx_insn *
gen_split_932 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_932 (i386.md:26149)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_COMPARE (CCmode,
	operand1,
	const1_rtx)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_NEG (DImode,
	gen_rtx_LTU (DImode,
	gen_rtx_REG (CCmode,
	17),
	const0_rtx))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:26258 */
extern rtx_insn *gen_split_940 (rtx_insn *, rtx *);
rtx_insn *
gen_split_940 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_940 (i386.md:26258)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 26268 "../../gcc/config/i386/i386.md"
{
  operands[0] = gen_lowpart (SImode, operands[0]);
  operands[2] = gen_lowpart (SImode, operands[2]);
  operands[3] = gen_lowpart (SImode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (SImode,
	operand1,
	operand2,
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:26372 */
extern rtx_insn *gen_peephole2_207 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_207 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx operand9;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_207 (i386.md:26372)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 26397 "../../gcc/config/i386/i386.md"
{
  operands[7] = SET_DEST (XVECEXP (PATTERN (peep2_next_insn (2)), 0, 0));
  operands[8]
    = ix86_replace_reg_with_reg (operands[5], operands[0], operands[1]);
  operands[9]
    = ix86_replace_reg_with_reg (operands[6], operands[0], operands[1]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  operand7 = operands[7];
  (void) operand7;
  operand8 = operands[8];
  (void) operand8;
  operand9 = operands[9];
  (void) operand9;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand7,
	operand8),
		gen_rtx_SET (operand1,
	operand9))), true);
  emit_insn (gen_rtx_SET (operand0,
	operand3));
  emit_insn (gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_IF_THEN_ELSE (SImode,
	operand4,
	copy_rtx (operand1),
	copy_rtx (operand0))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:26657 */
extern rtx_insn *gen_split_948 (rtx_insn *, rtx *);
rtx_insn *
gen_split_948 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_948 (i386.md:26657)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (DFmode,
	gen_rtvec (2,
		operand2,
		operand1),
	62)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:26743 */
rtx
gen_sminqi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_SMIN (QImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17)));
}

/* ../../gcc/config/i386/i386.md:26743 */
rtx
gen_uminqi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UMIN (QImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17)));
}

/* ../../gcc/config/i386/i386.md:26743 */
rtx
gen_umaxhi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UMAX (HImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17)));
}

/* ../../gcc/config/i386/i386.md:26743 */
rtx
gen_smindi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_SMIN (DImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17)));
}

/* ../../gcc/config/i386/i386.md:26753 */
extern rtx_insn *gen_split_951 (rtx_insn *, rtx *);
rtx_insn *
gen_split_951 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_951 (i386.md:26753)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 26771 "../../gcc/config/i386/i386.md"
{
  operands[2] = force_reg (DImode, operands[2]);

  split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);

  rtx cmplo[2] = { operands[1], operands[2] };
  rtx cmphi[2] = { operands[4], operands[5] };

  enum rtx_code code = GEU;

  switch (code)
    {
    case LE: case LEU:
      std::swap (cmplo[0], cmplo[1]);
      std::swap (cmphi[0], cmphi[1]);
      code = swap_condition (code);
      /* FALLTHRU */

    case GE: case GEU:
      {
	bool uns = (code == GEU);
	rtx (*sbb_insn) (machine_mode, rtx, rtx, rtx)
	  = uns ? gen_sub3_carry_ccc : gen_sub3_carry_ccgz;

	emit_insn (gen_cmp_1 (SImode, cmplo[0], cmplo[1]));

	rtx tmp = gen_rtx_SCRATCH (SImode);
	emit_insn (sbb_insn (SImode, tmp, cmphi[0], cmphi[1]));

	rtx flags = gen_rtx_REG (uns ? CCCmode : CCGZmode, FLAGS_REG);
	operands[6] = gen_rtx_fmt_ee (code, VOIDmode, flags, const0_rtx);

	break;
      }

    default:
      gcc_unreachable ();
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (SImode,
	operand6,
	operand1,
	operand2)));
  emit_insn (gen_rtx_SET (operand3,
	gen_rtx_IF_THEN_ELSE (SImode,
	copy_rtx (operand6),
	operand4,
	operand5)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:26811 */
extern rtx_insn *gen_split_961 (rtx_insn *, rtx *);
rtx_insn *
gen_split_961 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_961 (i386.md:26811)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 26826 "../../gcc/config/i386/i386.md"
{
  machine_mode mode = HImode;
  rtx cmp_op = operands[2];

  operands[2] = force_reg (mode, cmp_op);

  enum rtx_code code = GE;

  if (cmp_op == const1_rtx)
    {
      /* Convert smax (x, 1) into (x > 0 ? x : 1).
	 Convert umax (x, 1) into (x != 0 ? x : 1).
	 Convert ?min (x, 1) into (x <= 0 ? x : 1).  */
      cmp_op = const0_rtx;
      if (code == GE)
	code = GT;
      else if (code == GEU)
	code = NE;
    }
  /* Convert smin (x, -1) into (x < 0 ? x : -1).  */
  else if (cmp_op == constm1_rtx && code == LE)
    {
      cmp_op = const0_rtx;
      code = LT;
    }
  /* Convert smax (x, -1) into (x >= 0 ? x : -1).  */
  else if (cmp_op == constm1_rtx && code == GE)
    cmp_op = const0_rtx;
  else if (cmp_op != const0_rtx)
    cmp_op = operands[2];

  machine_mode cmpmode = SELECT_CC_MODE (code, operands[1], cmp_op);
  rtx flags = gen_rtx_REG (cmpmode, FLAGS_REG);

  rtx tmp = gen_rtx_COMPARE (cmpmode, operands[1], cmp_op);
  emit_insn (gen_rtx_SET (flags, tmp));

  operands[3] = gen_rtx_fmt_ee (code, VOIDmode, flags, const0_rtx);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (HImode,
	operand3,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:26811 */
extern rtx_insn *gen_split_971 (rtx_insn *, rtx *);
rtx_insn *
gen_split_971 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_971 (i386.md:26811)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 26826 "../../gcc/config/i386/i386.md"
{
  machine_mode mode = DImode;
  rtx cmp_op = operands[2];

  operands[2] = force_reg (mode, cmp_op);

  enum rtx_code code = GEU;

  if (cmp_op == const1_rtx)
    {
      /* Convert smax (x, 1) into (x > 0 ? x : 1).
	 Convert umax (x, 1) into (x != 0 ? x : 1).
	 Convert ?min (x, 1) into (x <= 0 ? x : 1).  */
      cmp_op = const0_rtx;
      if (code == GE)
	code = GT;
      else if (code == GEU)
	code = NE;
    }
  /* Convert smin (x, -1) into (x < 0 ? x : -1).  */
  else if (cmp_op == constm1_rtx && code == LE)
    {
      cmp_op = const0_rtx;
      code = LT;
    }
  /* Convert smax (x, -1) into (x >= 0 ? x : -1).  */
  else if (cmp_op == constm1_rtx && code == GE)
    cmp_op = const0_rtx;
  else if (cmp_op != const0_rtx)
    cmp_op = operands[2];

  machine_mode cmpmode = SELECT_CC_MODE (code, operands[1], cmp_op);
  rtx flags = gen_rtx_REG (cmpmode, FLAGS_REG);

  rtx tmp = gen_rtx_COMPARE (cmpmode, operands[1], cmp_op);
  emit_insn (gen_rtx_SET (flags, tmp));

  operands[3] = gen_rtx_fmt_ee (code, VOIDmode, flags, const0_rtx);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (DImode,
	operand3,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:26976 */
extern rtx_insn *gen_peephole2_231 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_231 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_231 (i386.md:26976)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand2,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:27178 */
rtx
gen_restore_stack_nonlocal (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 27182 "../../gcc/config/i386/i386.md"
{
  rtx stack_slot;

  if (flag_cf_protection & CF_RETURN)
    {
      /* Restore shadow stack pointer from the first slot
	 and stack pointer from the second slot.  */
      rtx ssp_slot = adjust_address (operands[1], word_mode, 0);
      stack_slot = adjust_address (operands[1], Pmode, UNITS_PER_WORD);

      /* Get the current shadow stack pointer.  The code below will check if
	 SHSTK feature is enabled.  If it is not enabled the RDSSP instruction
	 is a NOP.  */
      rtx reg_ssp = force_reg (word_mode, const0_rtx);
      emit_insn (gen_rdssp (word_mode, reg_ssp, reg_ssp));

      /* Compare through subtraction the saved and the current ssp
	 to decide if ssp has to be adjusted.  */
      reg_ssp = expand_simple_binop (word_mode, MINUS,
				     reg_ssp, ssp_slot,
				     reg_ssp, 1, OPTAB_DIRECT);

      /* Compare and jump over adjustment code.  */
      rtx noadj_label = gen_label_rtx ();
      emit_cmp_and_jump_insns (reg_ssp, const0_rtx, EQ, NULL_RTX,
			       word_mode, 1, noadj_label);

      /* Compute the number of frames to adjust.  */
      rtx reg_adj = gen_lowpart (ptr_mode, reg_ssp);
      rtx reg_adj_neg = expand_simple_unop (ptr_mode, NEG, reg_adj,
					    NULL_RTX, 1);

      reg_adj = expand_simple_binop (ptr_mode, LSHIFTRT, reg_adj_neg,
				     GEN_INT (exact_log2 (UNITS_PER_WORD)),
				     reg_adj, 1, OPTAB_DIRECT);

      /* Check if number of frames <= 255 so no loop is needed.  */
      rtx inc_label = gen_label_rtx ();
      emit_cmp_and_jump_insns (reg_adj, GEN_INT (255), LEU, NULL_RTX,
			       ptr_mode, 1, inc_label);

      /* Adjust the ssp in a loop.  */
      rtx loop_label = gen_label_rtx ();
      emit_label (loop_label);
      LABEL_NUSES (loop_label) = 1;

      rtx reg_255 = force_reg (word_mode, GEN_INT (255));
      emit_insn (gen_incssp (word_mode, reg_255));

      reg_adj = expand_simple_binop (ptr_mode, MINUS,
				     reg_adj, GEN_INT (255),
				     reg_adj, 1, OPTAB_DIRECT);

      /* Compare and jump to the loop label.  */
      emit_cmp_and_jump_insns (reg_adj, GEN_INT (255), GTU, NULL_RTX,
			       ptr_mode, 1, loop_label);

      emit_label (inc_label);
      LABEL_NUSES (inc_label) = 1;

      emit_insn (gen_incssp (word_mode, reg_ssp));

      emit_label (noadj_label);
      LABEL_NUSES (noadj_label) = 1;
    }
  else
    stack_slot = adjust_address (operands[1], Pmode, 0);
  emit_move_insn (operands[0], stack_slot);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:27646 */
extern rtx_insn *gen_peephole2_255 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_255 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  HARD_REG_SET _regs_allocated;
  CLEAR_HARD_REG_SET (_regs_allocated);
  if ((operands[2] = peep2_find_free_register (1, 1, "r", SFmode, &_regs_allocated)) == NULL_RTX)
    return NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_255 (i386.md:27646)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand2,
	operand1));
  emit_insn (gen_rtx_SET (operand0,
	copy_rtx (operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:27707 */
extern rtx_insn *gen_peephole2_265 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_265 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_265 (i386.md:27707)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_XOR (SImode,
	operand1,
	constm1_rtx)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:27802 */
extern rtx_insn *gen_peephole2_274 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_274 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  HARD_REG_SET _regs_allocated;
  CLEAR_HARD_REG_SET (_regs_allocated);
  if ((operands[2] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == NULL_RTX)
    return NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_274 (i386.md:27802)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand2,
	operand1));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand3), GET_MODE (operand3),
		copy_rtx (operand0),
		copy_rtx (operand2))),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:27831 */
extern rtx_insn *gen_peephole2_281 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_281 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_281 (i386.md:27831)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 27846 "../../gcc/config/i386/i386.md"
{
  operands[4]
    = ix86_replace_reg_with_reg (operands[2], operands[0], operands[1]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	operand4));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_fmt_ee (GET_CODE (operand3), GET_MODE (operand3),
		copy_rtx (operand0),
		operand1)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:27920 */
extern rtx_insn *gen_peephole2_293 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_293 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_293 (i386.md:27920)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 27943 "../../gcc/config/i386/i386.md"
{
  operands[4] = SET_DEST (PATTERN (peep2_next_insn (3)));
  operands[5]
    = gen_rtx_fmt_ee (GET_CODE (operands[3]), GET_MODE (operands[3]),
		      copy_rtx (operands[1]),
		      operands[2]);
  operands[6]
    = gen_rtx_COMPARE (GET_MODE (operands[4]),
		       copy_rtx (operands[5]),
		       const0_rtx);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand4,
	operand6),
		gen_rtx_SET (operand1,
	operand5))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:27987 */
extern rtx_insn *gen_peephole2_303 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_303 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_303 (i386.md:27987)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28010 "../../gcc/config/i386/i386.md"
{
  operands[6] = SET_DEST (PATTERN (peep2_next_insn (3)));
  operands[7]
    = gen_rtx_PLUS (SImode,
		    copy_rtx (operands[1]),
		    gen_lowpart (SImode, operands[2]));
  operands[8]
    = gen_rtx_COMPARE (GET_MODE (operands[6]),
		       copy_rtx (operands[7]),
		       const0_rtx);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  operand7 = operands[7];
  (void) operand7;
  operand8 = operands[8];
  (void) operand8;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand6,
	operand8),
		gen_rtx_SET (operand1,
	operand7))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:28079 */
extern rtx_insn *gen_peephole2_313 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_313 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_313 (i386.md:28079)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28103 "../../gcc/config/i386/i386.md"
{
  operands[5] = SET_DEST (PATTERN (peep2_next_insn (3)));
  operands[6]
    = gen_rtx_fmt_ee (GET_CODE (operands[3]), QImode,
		      copy_rtx (operands[1]),
		      gen_lowpart (QImode, operands[2]));
  operands[7]
    = gen_rtx_COMPARE (GET_MODE (operands[5]),
		       copy_rtx (operands[6]),
		       const0_rtx);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  operand7 = operands[7];
  (void) operand7;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand5,
	operand7),
		gen_rtx_SET (operand1,
	operand6))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:28195 */
extern rtx_insn *gen_peephole2_323 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_323 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_323 (i386.md:28195)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28218 "../../gcc/config/i386/i386.md"
{
  operands[5] = SET_DEST (XVECEXP (PATTERN (peep2_next_insn (1)), 0, 0));
  operands[6]
    = gen_rtx_fmt_ee (GET_CODE (operands[3]), GET_MODE (operands[3]),
		      copy_rtx (operands[1]), operands[2]);
  operands[7]
    = gen_rtx_COMPARE (GET_MODE (operands[5]), copy_rtx (operands[6]),
		       const0_rtx);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  operand7 = operands[7];
  (void) operand7;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand5,
	operand7),
		gen_rtx_SET (operand1,
	operand6))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:28345 */
extern rtx_insn *gen_peephole2_333 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_333 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_333 (i386.md:28345)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode,
	operand0),
	const0_rtx),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:28380 */
extern rtx_insn *gen_peephole2_340 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_340 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_340 (i386.md:28380)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_PLUS (SImode,
	copy_rtx (operand0),
	operand1)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:28457 */
extern rtx_insn *gen_peephole2_350 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_350 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  HARD_REG_SET _regs_allocated;
  CLEAR_HARD_REG_SET (_regs_allocated);
  if ((operands[1] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == NULL_RTX)
    return NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_350 (i386.md:28457)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_CLOBBER (VOIDmode,
	operand1));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_MEM (DImode,
	gen_rtx_PRE_DEC (DImode,
	gen_rtx_REG (DImode,
	7))),
	copy_rtx (operand1)),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_MEM (BLKmode,
	gen_rtx_SCRATCH (VOIDmode))))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:28499 */
extern rtx_insn *gen_peephole2_360 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_360 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  HARD_REG_SET _regs_allocated;
  CLEAR_HARD_REG_SET (_regs_allocated);
  if ((operands[1] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == NULL_RTX)
    return NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_360 (i386.md:28499)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_CLOBBER (VOIDmode,
	operand1));
  emit_insn (gen_rtx_SET (gen_rtx_MEM (DImode,
	gen_rtx_PRE_DEC (SImode,
	gen_rtx_REG (SImode,
	7))),
	copy_rtx (operand1)));
  emit_insn (gen_rtx_SET (gen_rtx_MEM (DImode,
	gen_rtx_PRE_DEC (SImode,
	gen_rtx_REG (SImode,
	7))),
	copy_rtx (operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:28527 */
extern rtx_insn *gen_peephole2_370 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_370 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  HARD_REG_SET _regs_allocated;
  CLEAR_HARD_REG_SET (_regs_allocated);
  if ((operands[1] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == NULL_RTX)
    return NULL;
  if ((operands[2] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == NULL_RTX)
    return NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_370 (i386.md:28527)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand1,
	gen_rtx_MEM (DImode,
	gen_rtx_POST_INC (DImode,
	gen_rtx_REG (DImode,
	7)))),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_MEM (BLKmode,
	gen_rtx_SCRATCH (VOIDmode))))), true);
  emit_insn (gen_rtx_SET (operand2,
	gen_rtx_MEM (DImode,
	gen_rtx_POST_INC (DImode,
	gen_rtx_REG (DImode,
	7)))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:28566 */
extern rtx_insn *gen_peephole2_381 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_381 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  HARD_REG_SET _regs_allocated;
  CLEAR_HARD_REG_SET (_regs_allocated);
  if ((operands[1] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == NULL_RTX)
    return NULL;
  if ((operands[2] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == NULL_RTX)
    return NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_381 (i386.md:28566)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand1,
	gen_rtx_MEM (SImode,
	gen_rtx_POST_INC (DImode,
	gen_rtx_REG (DImode,
	7)))));
  emit_insn (gen_rtx_SET (operand2,
	gen_rtx_MEM (SImode,
	gen_rtx_POST_INC (DImode,
	gen_rtx_REG (DImode,
	7)))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:28620 */
extern rtx_insn *gen_peephole2_391 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_391 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_391 (i386.md:28620)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28632 "../../gcc/config/i386/i386.md"
operands[2] = GEN_INT (INTVAL (operands[2]) - 1);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  emit_insn (gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_PLUS (DImode,
	gen_rtx_MULT (DImode,
	copy_rtx (operand0),
	operand2),
	copy_rtx (operand0))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:29357 */
rtx
gen_pause (void)
{
  rtx operand0;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[1];
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29361 "../../gcc/config/i386/i386.md"
{
  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));
  MEM_VOLATILE_P (operands[0]) = 1;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (BLKmode,
	gen_rtvec (1,
		copy_rtx (operand0)),
	33)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/i386.md:29823 */
rtx
gen_spaceshipxf4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29829 "../../gcc/config/i386/i386.md"
{
  ix86_expand_fp_spaceship (operands[0], operands[1], operands[2],
			    operands[3]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:175 */
rtx
gen_movv2si (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 179 "../../gcc/config/i386/mmx.md"
{
  ix86_expand_vector_move (V2SImode, operands);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:307 */
extern rtx_insn *gen_split_983 (rtx_insn *, rtx *);
rtx_insn *
gen_split_983 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_983 (mmx.md:307)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 312 "../../gcc/config/i386/mmx.md"
ix86_split_long_move (operands); DONE;
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:314 */
extern rtx_insn *gen_split_992 (rtx_insn *, rtx *);
rtx_insn *
gen_split_992 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_992 (mmx.md:314)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 319 "../../gcc/config/i386/mmx.md"
ix86_split_long_move (operands); DONE;
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:330 */
rtx
gen_movv2hi (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 334 "../../gcc/config/i386/mmx.md"
{
  ix86_expand_vector_move (V2HImode, operands);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:412 */
extern rtx_insn *gen_split_999 (rtx_insn *, rtx *);
rtx_insn *
gen_split_999 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_999 (mmx.md:412)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 419 "../../gcc/config/i386/mmx.md"
{
  HOST_WIDE_INT val = ix86_convert_const_vector_to_integer (operands[1],
							    V4HFmode);
  operands[1] = GEN_INT (val);
  operands[0] = lowpart_subreg (DImode, operands[0], V4HFmode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:437 */
extern rtx_insn *gen_split_1009 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1009 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1009 (mmx.md:437)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 443 "../../gcc/config/i386/mmx.md"
{
  operands[2] = GEN_INT (-PUSH_ROUNDING (GET_MODE_SIZE (V2HImode)));
  /* Preserve memory attributes. */
  operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (gen_rtx_REG (DImode,
	7),
	gen_rtx_PLUS (DImode,
	gen_rtx_REG (DImode,
	7),
	operand2)));
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:611 */
extern rtx_insn *gen_split_1013 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1013 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1013 (mmx.md:611)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 617 "../../gcc/config/i386/mmx.md"
{
  operands[2] = GEN_INT (-PUSH_ROUNDING (GET_MODE_SIZE (V2QImode)));
  /* Preserve memory attributes. */
  operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (gen_rtx_REG (SImode,
	7),
	gen_rtx_PLUS (SImode,
	gen_rtx_REG (SImode,
	7),
	operand2)));
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:694 */
extern rtx_insn *gen_split_1017 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1017 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1017 (mmx.md:694)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 705 "../../gcc/config/i386/mmx.md"
{
  if (!TARGET_AVX && operands_match_p (operands[0], operands[2]))
    std::swap (operands[1], operands[2]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IOR (V2SFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:842 */
rtx
gen_mmx_sminv2sf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 849 "../../gcc/config/i386/mmx.md"
{
  if (!flag_finite_math_only || flag_signed_zeros)
    {
      operands[1] = force_reg (V2SFmode, operands[1]);
      emit_insn (gen_mmx_ieee_minv2sf3
		 (operands[0], operands[1], operands[2]));
      DONE;
    }
  else
    ix86_fixup_binary_operands_no_copy (SMIN, V2SFmode, operands);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_SMIN (V2SFmode,
	operand1,
	operand2)),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	110))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:1440 */
rtx
gen_fmsv2sf4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL _Pragma ("GCC error \"fmsv2sf4 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1449 "../../gcc/config/i386/mmx.md"
{
  rtx op3 = gen_reg_rtx (V4SFmode);
  rtx op2 = gen_reg_rtx (V4SFmode);
  rtx op1 = gen_reg_rtx (V4SFmode);
  rtx op0 = gen_reg_rtx (V4SFmode);

  emit_insn (gen_movq_v2sf_to_sse (op3, operands[3]));
  emit_insn (gen_movq_v2sf_to_sse (op2, operands[2]));
  emit_insn (gen_movq_v2sf_to_sse (op1, operands[1]));

  emit_insn (gen_fmsv4sf4 (op0, op1, op2, op3));

  emit_move_insn (operands[0], lowpart_subreg (V2SFmode, op0, V4SFmode));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_FMA (V2SFmode,
	operand1,
	operand2,
	gen_rtx_NEG (V2SFmode,
	operand3))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:1778 */
extern rtx_insn *gen_split_1022 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1022 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1022 (mmx.md:1778)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1788 "../../gcc/config/i386/mmx.md"
operands[1] = gen_lowpart (SFmode, operands[1]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:1924 */
rtx
gen_lceilv2sfv2si2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"lceilv2sfv2si2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1929 "../../gcc/config/i386/mmx.md"
{
  rtx op1 = gen_reg_rtx (V4SFmode);
  rtx op0 = gen_reg_rtx (V4SImode);

  emit_insn (gen_movq_v2sf_to_sse (op1, operands[1]));

  emit_insn (gen_lceilv4sfv4si2 (op0, op1));

  emit_move_insn (operands[0], lowpart_subreg (V2SImode, op0, V4SImode));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:2086 */
rtx
gen_movd_v2hf_to_sse_reg (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_VEC_DUPLICATE (V8HFmode,
	operand1),
	operand2,
	const_int_rtx[MAX_SAVED_CONST_INT + (3)]));
}

/* ../../gcc/config/i386/mmx.md:2095 */
rtx
gen_addv2hf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2101 "../../gcc/config/i386/mmx.md"
{
  rtx op2 = gen_reg_rtx (V8HFmode);
  rtx op1 = gen_reg_rtx (V8HFmode);
  rtx op0 = gen_reg_rtx (V8HFmode);

  emit_insn (gen_movd_v2hf_to_sse (op2, operands[2]));
  emit_insn (gen_movd_v2hf_to_sse (op1, operands[1]));
  emit_insn (gen_addv8hf3 (op0, op1, op2));

  emit_move_insn (operands[0], lowpart_subreg (V2HFmode, op0, V8HFmode));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_PLUS (V2HFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:2115 */
rtx
gen_addv4bf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2121 "../../gcc/config/i386/mmx.md"
{
  rtx op0 = gen_reg_rtx (V8BFmode);
  rtx op1 = lowpart_subreg (V8BFmode,
			    force_reg (V4BFmode, operands[1]), V4BFmode);
  rtx op2 = lowpart_subreg (V8BFmode,
			    force_reg (V4BFmode, operands[2]), V4BFmode);

  emit_insn (gen_addv8bf3 (op0, op1, op2));

  emit_move_insn (operands[0], lowpart_subreg (V4BFmode, op0, V8BFmode));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_PLUS (V4BFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:2174 */
rtx
gen_sminv2bf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2180 "../../gcc/config/i386/mmx.md"
{
  rtx op0 = gen_reg_rtx (V8BFmode);
  rtx op1 = lowpart_subreg (V8BFmode,
			    force_reg (V2BFmode, operands[1]), V2BFmode);
  rtx op2 = lowpart_subreg (V8BFmode,
			    force_reg (V2BFmode, operands[2]), V2BFmode);

  emit_insn (gen_sminv8bf3 (op0, op1, op2));

  emit_move_insn (operands[0], lowpart_subreg (V2BFmode, op0, V8BFmode));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SMIN (V2BFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:2227 */
rtx
gen_absv2hf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2232 "../../gcc/config/i386/mmx.md"
ix86_expand_fp_absneg_operator (ABS, V2HFmode, operands); DONE;
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ABS (V2HFmode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:2234 */
extern rtx_insn *gen_split_1030 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1030 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1030 (mmx.md:2234)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2244 "../../gcc/config/i386/mmx.md"
{
  if (!TARGET_AVX && operands_match_p (operands[0], operands[2]))
    std::swap (operands[1], operands[2]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_AND (V4HFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:2317 */
rtx
gen_vec_cmpv2hfqi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2324 "../../gcc/config/i386/mmx.md"
{
  rtx ops[4];
  ops[3] = gen_reg_rtx (V8HFmode);
  ops[2] = gen_reg_rtx (V8HFmode);

  emit_insn (gen_movd_v2hf_to_sse (ops[3], operands[3]));
  emit_insn (gen_movd_v2hf_to_sse (ops[2], operands[2]));
  emit_insn (gen_vec_cmpv8hfqi (operands[0], operands[1], ops[2], ops[3]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand1), QImode,
		operand2,
		operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:2406 */
rtx
gen_nearbyintv4hf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"nearbyintv4hf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2411 "../../gcc/config/i386/mmx.md"
{
  rtx op1 = gen_reg_rtx (V8HFmode);
  rtx op0 = gen_reg_rtx (V8HFmode);

  emit_insn (gen_movq_v4hf_to_sse (op1, operands[1]));
  emit_insn (gen_nearbyintv8hf2 (op0, op1));
  emit_move_insn (operands[0], lowpart_subreg (V4HFmode, op0, V8HFmode));

  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:2488 */
rtx
gen_ceilv2hf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"ceilv2hf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2494 "../../gcc/config/i386/mmx.md"
{
  rtx op1 = gen_reg_rtx (V8HFmode);
  rtx op0 = gen_reg_rtx (V8HFmode);

  emit_insn (gen_movd_v2hf_to_sse (op1, operands[1]));
  emit_insn (gen_ceilv8hf2 (op0, op1));
  emit_move_insn (operands[0], lowpart_subreg (V2HFmode, op0, V8HFmode));

  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:2591 */
rtx
gen_copysignv2hf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"copysignv2hf3 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2602 "../../gcc/config/i386/mmx.md"
{
  operands[3] = ix86_build_signbit_mask (V2HFmode, true, false);

  operands[4] = gen_reg_rtx (V2HFmode);
  operands[5] = gen_reg_rtx (V2HFmode);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand4,
	gen_rtx_AND (V2HFmode,
	gen_rtx_NOT (V2HFmode,
	operand3),
	operand1)));
  emit_insn (gen_rtx_SET (operand5,
	gen_rtx_AND (V2HFmode,
	copy_rtx (operand3),
	operand2)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IOR (V2HFmode,
	copy_rtx (operand4),
	copy_rtx (operand5))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:2664 */
rtx
gen_fmsv2hf4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL _Pragma ("GCC error \"fmsv2hf4 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2672 "../../gcc/config/i386/mmx.md"
{
  rtx op3 = gen_reg_rtx (V8HFmode);
  rtx op2 = gen_reg_rtx (V8HFmode);
  rtx op1 = gen_reg_rtx (V8HFmode);
  rtx op0 = gen_reg_rtx (V8HFmode);

  emit_insn (gen_movd_v2hf_to_sse (op3, operands[3]));
  emit_insn (gen_movd_v2hf_to_sse (op2, operands[2]));
  emit_insn (gen_movd_v2hf_to_sse (op1, operands[1]));

  emit_insn (gen_fmsv8hf4 (op0, op1, op2, op3));

  emit_move_insn (operands[0], lowpart_subreg (V2HFmode, op0, V8HFmode));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_FMA (V2HFmode,
	operand1,
	operand2,
	gen_rtx_NEG (V2HFmode,
	operand3))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:2804 */
rtx
gen_fmsv2bf4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL _Pragma ("GCC error \"fmsv2bf4 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2812 "../../gcc/config/i386/mmx.md"
{
  rtx op0 = gen_reg_rtx (V8BFmode);
  rtx op1 = lowpart_subreg (V8BFmode, force_reg (V2BFmode, operands[1]), V2BFmode);
  rtx op2 = lowpart_subreg (V8BFmode, force_reg (V2BFmode, operands[2]), V2BFmode);
  rtx op3 = lowpart_subreg (V8BFmode, force_reg (V2BFmode, operands[3]), V2BFmode);

  emit_insn (gen_fmsv8bf4 (op0, op1, op2, op3));

  emit_move_insn (operands[0], lowpart_subreg (V2BFmode, op0, V8BFmode));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_FMA (V2BFmode,
	operand1,
	operand2,
	gen_rtx_NEG (V2BFmode,
	operand3))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:2957 */
rtx
gen_fix_truncv2hfv2hi2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2962 "../../gcc/config/i386/mmx.md"
{
  rtx op1 = gen_reg_rtx (V8HFmode);
  rtx op0 = gen_reg_rtx (V8HImode);

  emit_insn (gen_movd_v2hf_to_sse (op1, operands[1]));

  emit_insn (gen_fix_truncv8hfv8hi2 (op0, op1));

  emit_move_insn (operands[0],
		 lowpart_subreg (V2HImode, op0, V8HImode));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_FIX (V2HImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:2993 */
rtx
gen_floatv4hiv4hf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2998 "../../gcc/config/i386/mmx.md"
{
  rtx op1 = gen_reg_rtx (V8HImode);
  rtx op0 = gen_reg_rtx (V8HFmode);

  rtx (*gen_movd_sse) (rtx, rtx)
    = gen_movq_v4hi_to_sse;
  emit_insn (gen_movd_sse (op1, operands[1]));

  emit_insn (gen_floatv8hiv8hf2 (op0, op1));

  emit_move_insn (operands[0],
		 lowpart_subreg (V4HFmode, op0, V8HFmode));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_FLOAT (V4HFmode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:3121 */
rtx
gen_negv4qi2 (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3127 "../../gcc/config/i386/mmx.md"
operands[2] = force_reg (V4QImode, CONST0_RTX (V4QImode));
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_MINUS (V4QImode,
	operand2,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:3189 */
rtx
gen_mmx_addv1di3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3195 "../../gcc/config/i386/mmx.md"
ix86_fixup_binary_operands_no_copy (PLUS, V1DImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_PLUS (V1DImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:3303 */
rtx
gen_mmx_sssubv8qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3309 "../../gcc/config/i386/mmx.md"
ix86_fixup_binary_operands_no_copy (SS_MINUS, V8QImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SS_MINUS (V8QImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:3311 */
rtx
gen_ssaddv8qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_SS_PLUS (V8QImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/mmx.md:3311 */
rtx
gen_usaddv4hi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_US_PLUS (V4HImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/mmx.md:3414 */
rtx
gen_mulv4qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3419 "../../gcc/config/i386/mmx.md"
{
  ix86_expand_vecop_qihi_partial (MULT, operands[0], operands[1], operands[2]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_MULT (V4QImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:3748 */
rtx
gen_mmx_umaxv8qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3755 "../../gcc/config/i386/mmx.md"
ix86_fixup_binary_operands_no_copy (UMAX, V8QImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UMAX (V8QImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:3916 */
rtx
gen_ashlv4hi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (V4HImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/mmx.md:3957 */
extern rtx_insn *gen_split_1047 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1047 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1047 (mmx.md:3957)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3966 "../../gcc/config/i386/mmx.md"
operands[3] = gen_int_mode (15, DImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ASHIFTRT (V2HImode,
	operand1,
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:4034 */
rtx
gen_vashlv8qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4040 "../../gcc/config/i386/mmx.md"
{
  ix86_expand_vecop_qihi_partial (ASHIFT, operands[0],
				  operands[1], operands[2]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (V8QImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:4058 */
rtx
gen_vec_shl_v2si (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4064 "../../gcc/config/i386/mmx.md"
{
  rtx op0 = gen_reg_rtx (V1DImode);
  rtx op1 = force_reg (V2SImode, operands[1]);

  emit_insn (gen_mmx_ashlv1di3
	      (op0, gen_lowpart (V1DImode, op1), operands[2]));
  emit_move_insn (operands[0], gen_lowpart (V2SImode, op0));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (V1DImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:4090 */
rtx
gen_vec_shr_v2si (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4096 "../../gcc/config/i386/mmx.md"
{
  rtx op0 = gen_reg_rtx (V1DImode);
  rtx op1 = force_reg (V2SImode, operands[1]);

  emit_insn (gen_mmx_lshrv1di3
	      (op0, gen_lowpart (V1DImode, op1), operands[2]));
  emit_move_insn (operands[0], gen_lowpart (V2SImode, op0));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_LSHIFTRT (V1DImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:4128 */
rtx
gen_mmx_eqv4hi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4134 "../../gcc/config/i386/mmx.md"
ix86_fixup_binary_operands_no_copy (EQ, V4HImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_EQ (V4HImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:4257 */
rtx
gen_vec_cmpuv4hiv4hi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4263 "../../gcc/config/i386/mmx.md"
{
  bool ok = ix86_expand_int_vec_cmp (operands);
  gcc_assert (ok);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand1), V4HImode,
		operand2,
		operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:4294 */
rtx
gen_vcond_mask_v2qiv2qi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL _Pragma ("GCC error \"vcond_mask_v2qiv2qi cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4301 "../../gcc/config/i386/mmx.md"
{
  ix86_expand_sse_movcc (operands[0], operands[3],
			 operands[1], operands[2]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2QImode,
	operand1,
	operand2,
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:4535 */
rtx
gen_one_cmplv4hi2 (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4541 "../../gcc/config/i386/mmx.md"
operands[2] = force_reg (V4HImode, CONSTM1_RTX (V4HImode));
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_XOR (V4HImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:4565 */
extern rtx_insn *gen_split_1063 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1063 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1063 (mmx.md:4565)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4574 "../../gcc/config/i386/mmx.md"
{
  operands[2] = CONSTM1_RTX (V16QImode);
  operands[1] = lowpart_subreg (V16QImode, operands[1], V2QImode);
  operands[0] = lowpart_subreg (V16QImode, operands[0], V2QImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	operand2));
  emit_insn (gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_XOR (V16QImode,
	copy_rtx (operand0),
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:4652 */
extern rtx_insn *gen_split_1073 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1073 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1073 (mmx.md:4652)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4661 "../../gcc/config/i386/mmx.md"
{
  operands[2] = lowpart_subreg (V16QImode, operands[2], V2HImode);
  operands[1] = lowpart_subreg (V16QImode, operands[1], V2HImode);
  operands[0] = lowpart_subreg (V16QImode, operands[0], V2HImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_AND (V16QImode,
	gen_rtx_NOT (V16QImode,
	operand1),
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:4675 */
rtx
gen_iorv8qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_IOR (V8QImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/mmx.md:4675 */
rtx
gen_iorv4hi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_IOR (V4HImode,
	operand1,
	operand2));
}

/* ../../gcc/config/i386/mmx.md:4699 */
rtx
gen_andv4qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4705 "../../gcc/config/i386/mmx.md"
ix86_expand_binary_operator (AND, V4QImode, operands); DONE;
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_AND (V4QImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:4719 */
extern rtx_insn *gen_split_1075 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1075 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1075 (mmx.md:4719)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4730 "../../gcc/config/i386/mmx.md"
{
  if (!register_operand (operands[2], V4QImode))
    {
      HOST_WIDE_INT val = ix86_convert_const_vector_to_integer (operands[2],
								V4QImode);
      operands[2] = GEN_INT (val);
    }
  else
    operands[2] = lowpart_subreg (SImode, operands[2], V4QImode);
  operands[1] = lowpart_subreg (SImode, operands[1], V4QImode);
  operands[0] = lowpart_subreg (SImode, operands[0], V4QImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_IOR (SImode,
	operand1,
	operand2)),
		gen_hard_reg_clobber (CCmode, 17))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:4743 */
extern rtx_insn *gen_split_1086 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1086 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1086 (mmx.md:4743)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4752 "../../gcc/config/i386/mmx.md"
{
  operands[2] = lowpart_subreg (V16QImode, operands[2], V2QImode);
  operands[1] = lowpart_subreg (V16QImode, operands[1], V2QImode);
  operands[0] = lowpart_subreg (V16QImode, operands[0], V2QImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_AND (V16QImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:4880 */
extern rtx_insn *gen_split_1098 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1098 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1098 (mmx.md:4880)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4898 "../../gcc/config/i386/mmx.md"
ix86_split_mmx_punpck (operands, false); DONE;
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:5083 */
rtx
gen_extendv2qiv2si2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5088 "../../gcc/config/i386/mmx.md"
{
  rtx op1 = force_reg (V2QImode, operands[1]);
  op1 = lowpart_subreg (V4QImode, op1, V2QImode);
  emit_insn (gen_sse4_1_sign_extendv2qiv2si2 (operands[0], op1));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SIGN_EXTEND (V2SImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:5180 */
rtx
gen_vec_pack_trunc_v2si (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5185 "../../gcc/config/i386/mmx.md"
{
  rtx op1 = gen_lowpart (V4HImode, operands[1]);
  rtx op2 = gen_lowpart (V4HImode, operands[2]);
  ix86_expand_vec_extract_even_odd (operands[0], op1, op2, 0);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:5324 */
extern rtx_insn *gen_split_1104 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1104 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1104 (mmx.md:5324)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5338 "../../gcc/config/i386/mmx.md"
operands[3] = GEN_INT (~INTVAL (operands[3]) & 0xf);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_DUPLICATE (V4HFmode,
	operand2)));
  emit_insn (gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_VEC_MERGE (V4HFmode,
	operand1,
	copy_rtx (operand0),
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:5852 */
rtx
gen_vec_extractv2sisi (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"vec_extractv2sisi cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5857 "../../gcc/config/i386/mmx.md"
{
  ix86_expand_vector_extract (TARGET_MMX_WITH_SSE, operands[0],
			      operands[1], INTVAL (operands[2]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:5918 */
rtx
gen_vec_setv8qi (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"vec_setv8qi cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5923 "../../gcc/config/i386/mmx.md"
{
  if (CONST_INT_P (operands[2]))
    ix86_expand_vector_set (TARGET_MMX_WITH_SSE, operands[0], operands[1],
			    INTVAL (operands[2]));
  else
    ix86_expand_vector_set_var (operands[0], operands[1], operands[2]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:6153 */
rtx
gen_vec_extractv2hihi (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"vec_extractv2hihi cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6158 "../../gcc/config/i386/mmx.md"
{
  ix86_expand_vector_extract (false, operands[0],
			      operands[1], INTVAL (operands[2]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:6298 */
rtx
gen_mmx_uavgv8qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx operand3;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6312 "../../gcc/config/i386/mmx.md"
{
  operands[3] = CONST1_RTX(V8HImode);
  ix86_fixup_binary_operands_no_copy (PLUS, V8QImode, operands);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_TRUNCATE (V8QImode,
	gen_rtx_LSHIFTRT (V8HImode,
	gen_rtx_PLUS (V8HImode,
	gen_rtx_PLUS (V8HImode,
	gen_rtx_ZERO_EXTEND (V8HImode,
	operand1),
	gen_rtx_ZERO_EXTEND (V8HImode,
	operand2)),
	operand3),
	const1_rtx))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:6488 */
rtx
gen_reduc_xor_scal_v8qi (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"reduc_xor_scal_v8qi cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6493 "../../gcc/config/i386/mmx.md"
{
  rtx tmp = gen_reg_rtx (V8QImode);
  ix86_expand_reduc (gen_xorv8qi3, tmp, operands[1]);
  emit_insn (gen_vec_extractv8qiqi (operands[0],
						       tmp, const0_rtx));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_XOR (V8QImode,
	operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:6540 */
rtx
gen_reduc_smin_scal_v4hi (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6545 "../../gcc/config/i386/mmx.md"
{
  rtx tmp = gen_reg_rtx (V4HImode);
  ix86_expand_reduc (gen_sminv4hi3, tmp, operands[1]);
  emit_insn (gen_vec_extractv4hihi (operands[0], tmp, const0_rtx));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SMIN (V4HImode,
	operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/mmx.md:6668 */
rtx
gen_sdot_prodv2siv8qi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6674 "../../gcc/config/i386/mmx.md"
{
  operands[1] = force_reg (V8QImode, operands[1]);
  operands[2] = force_reg (V8QImode, operands[2]);
  operands[3] = force_reg (V2SImode, operands[3]);

  if (TARGET_AVXVNNIINT8)
    {
      rtx op1 = lowpart_subreg (V16QImode, operands[1], V8QImode);
      rtx op2 = lowpart_subreg (V16QImode, operands[2], V8QImode);
      rtx op3 = lowpart_subreg (V4SImode, operands[3], V2SImode);
      rtx op0 = gen_reg_rtx (V4SImode);

      emit_insn (gen_sdot_prodv4siv16qi (op0, op1, op2, op3));
      emit_move_insn (operands[0], lowpart_subreg (V2SImode, op0, V4SImode));
    }
  else
    {
      rtx op1 = gen_reg_rtx (V8HImode);
      rtx op2 = gen_reg_rtx (V8HImode);
      rtx op3 = gen_reg_rtx (V4SImode);
      rtx op0 = gen_reg_rtx (V4SImode);
      rtx op0_1 = gen_reg_rtx (V4SImode);

      emit_move_insn (op3, CONST0_RTX (V4SImode));
      emit_insn (gen_extendv8qiv8hi2 (op1, operands[1]));
      emit_insn (gen_extendv8qiv8hi2 (op2, operands[2]));
      emit_insn (gen_sdot_prodv4siv8hi (op0, op1, op2, op3));

      /* vec_perm (op0, 2, 3, 0, 1);  */
      emit_insn (gen_sse2_pshufd (op0_1, op0, GEN_INT (78)));
      emit_insn (gen_addv4si3 (op0, op0, op0_1));
      emit_insn (gen_addv2si3 (operands[0], operands[3],
			       lowpart_subreg (V2SImode, op0, V4SImode)));
    }
  DONE;

}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:1494 */
rtx
gen_movv4ti (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1498 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_move (V4TImode, operands);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:1494 */
rtx
gen_movv8sf (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1498 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_move (V8SFmode, operands);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:1556 */
extern rtx_insn *gen_split_1124 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1124 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1124 (sse.md:1556)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1566 "../../gcc/config/i386/sse.md"
operands[2] = CONST0_RTX (V8HImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	operand2));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (copy_rtx (operand0),
	operand1),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		copy_rtx (operand0)),
	38))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:1556 */
extern rtx_insn *gen_split_1134 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1134 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1134 (sse.md:1556)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1566 "../../gcc/config/i386/sse.md"
operands[2] = CONST0_RTX (V32HFmode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	operand2));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (copy_rtx (operand0),
	operand1),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		copy_rtx (operand0)),
	38))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:1556 */
extern rtx_insn *gen_split_1144 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1144 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1144 (sse.md:1556)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1566 "../../gcc/config/i386/sse.md"
operands[2] = CONST0_RTX (V4DFmode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	operand2));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (copy_rtx (operand0),
	operand1),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		copy_rtx (operand0)),
	38))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:1581 */
rtx
gen_avx512vl_loadv4sf_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1588 "../../gcc/config/i386/sse.md"
{
  if (CONST_INT_P (operands[3]))
    {
      emit_insn (gen_rtx_SET (operands[0], operands[1]));
      DONE;
    }
  else if (MEM_P (operands[1]))
    operands[1] = gen_rtx_UNSPEC (V4SFmode,
				 gen_rtvec(1, operands[1]),
				 UNSPEC_MASKLOAD);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	operand1,
	operand2,
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:1629 */
extern rtx_insn *gen_split_1153 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1153 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1153 (sse.md:1629)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:1639 */
rtx
gen_avx512vl_loadv8hi_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1646 "../../gcc/config/i386/sse.md"
{
  if (CONST_INT_P (operands[3]))
    {
      emit_insn (gen_rtx_SET (operands[0], operands[1]));
      DONE;
    }
  else if (MEM_P (operands[1]))
    operands[1] = gen_rtx_UNSPEC (V8HImode,
				 gen_rtvec(1, operands[1]),
				 UNSPEC_MASKLOAD);

}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HImode,
	operand1,
	operand2,
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:1698 */
rtx
gen_avx512f_loaddf_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx operand4;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1709 "../../gcc/config/i386/sse.md"
operands[4] = CONST0_RTX (V2DFmode);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_VEC_DUPLICATE (V2DFmode,
	operand1),
	operand2,
	operand3),
	operand4,
	const1_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:1934 */
rtx
gen_movmisalignv8di (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1938 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_move_misalign (V8DImode, operands);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:1934 */
rtx
gen_movmisalignv16bf (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1938 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_move_misalign (V16BFmode, operands);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:1970 */
extern rtx_insn *gen_peephole2_402 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_402 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_402 (sse.md:1970)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1980 "../../gcc/config/i386/sse.md"
operands[4] = adjust_address (operands[0], V2DFmode, 0);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand4,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2110 */
extern rtx_insn *gen_split_1180 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1180 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1180 (sse.md:2110)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_IOR (SImode,
	operand1,
	operand2)),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	174))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2121 */
extern rtx_insn *gen_split_1190 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1190 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1190 (sse.md:2121)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_XOR (HImode,
	operand1,
	operand2)),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	174))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2156 */
extern rtx_insn *gen_split_1200 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1200 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1200 (sse.md:2156)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_AND (DImode,
	gen_rtx_NOT (DImode,
	operand1),
	operand2)),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	174))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2274 */
extern rtx_insn *gen_split_1212 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1212 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1212 (sse.md:2274)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (DImode,
	operand1,
	operand2)),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	174))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2313 */
extern rtx_insn *gen_split_1222 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1222 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1222 (sse.md:2313)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (DImode,
	gen_rtx_LSHIFTRT (SImode,
	operand1,
	operand2))),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	174))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2445 */
extern rtx_insn *gen_split_1232 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1232 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1232 (sse.md:2445)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2463 "../../gcc/config/i386/sse.md"
{
  rtx flag_reg;
  if (MASK_REGNO_P (REGNO (operands[4])))
    {
      emit_insn (gen_kortesthi_ccc (operands[4], operands[4]));
      flag_reg = gen_rtx_REG (CCCmode, FLAGS_REG);
    }
  else
    {
      flag_reg = gen_rtx_REG (CCZmode, FLAGS_REG);
      emit_insn (gen_rtx_SET (flag_reg,
			      gen_rtx_COMPARE (CCZmode,
					       operands[4],
					       constm1_rtx)));
    }
  operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[1]), VOIDmode,
				flag_reg,const0_rtx);
  operands[0] = gen_lowpart (SImode, operands[0]);
  operands[2] = gen_lowpart (SImode, operands[2]);
  operands[3] = gen_lowpart (SImode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (SImode,
	operand5,
	operand2,
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2488 */
extern rtx_insn *gen_split_1242 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1242 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1242 (sse.md:2488)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2507 "../../gcc/config/i386/sse.md"
{
  rtx flag_reg;
  if (MASK_REGNO_P (REGNO (operands[4])))
    {
      emit_insn (gen_kortestsi_ccc (operands[4], operands[4]));
      flag_reg = gen_rtx_REG (CCCmode, FLAGS_REG);
    }
  else
    {
      flag_reg = gen_rtx_REG (CCZmode, FLAGS_REG);
      emit_insn (gen_rtx_SET (flag_reg,
			      gen_rtx_COMPARE (CCZmode,
					       operands[4],
					       constm1_rtx)));
    }
  operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[1]), VOIDmode,
				flag_reg,const0_rtx);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (SImode,
	operand5,
	operand2,
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2574 */
rtx
gen_negv8bf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2579 "../../gcc/config/i386/sse.md"
ix86_expand_fp_absneg_operator (NEG, V8BFmode, operands); DONE;
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_NEG (V8BFmode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2574 */
rtx
gen_negv8hf2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2579 "../../gcc/config/i386/sse.md"
ix86_expand_fp_absneg_operator (NEG, V8HFmode, operands); DONE;
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_NEG (V8HFmode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2574 */
rtx
gen_negv4df2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2579 "../../gcc/config/i386/sse.md"
ix86_expand_fp_absneg_operator (NEG, V4DFmode, operands); DONE;
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_NEG (V4DFmode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2581 */
extern rtx_insn *gen_split_1254 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1254 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1254 (sse.md:2581)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2591 "../../gcc/config/i386/sse.md"
{
  if (TARGET_AVX)
    {
      if (MEM_P (operands[1]))
        std::swap (operands[1], operands[2]);
    }
  else
   {
     if (operands_match_p (operands[0], operands[2]))
       std::swap (operands[1], operands[2]);
   }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_XOR (V32HFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2581 */
extern rtx_insn *gen_split_1264 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1264 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1264 (sse.md:2581)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2591 "../../gcc/config/i386/sse.md"
{
  if (TARGET_AVX)
    {
      if (MEM_P (operands[1]))
        std::swap (operands[1], operands[2]);
    }
  else
   {
     if (operands_match_p (operands[0], operands[2]))
       std::swap (operands[1], operands[2]);
   }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_XOR (V4SFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2605 */
extern rtx_insn *gen_split_1274 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1274 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1274 (sse.md:2605)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2616 "../../gcc/config/i386/sse.md"
{
  if (TARGET_AVX)
    {
      if (MEM_P (operands[1]))
        std::swap (operands[1], operands[2]);
    }
  else
   {
     if (operands_match_p (operands[0], operands[2]))
       std::swap (operands[1], operands[2]);
   }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IOR (V8DFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2630 */
rtx
gen_cond_subv16sf (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL _Pragma ("GCC error \"cond_subv16sf cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2639 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_subv16sf3_mask (operands[0],
				     operands[2],
				     operands[3],
				     operands[4],
				     operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SFmode,
	gen_rtx_MINUS (V16SFmode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2630 */
rtx
gen_cond_subv2df (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL _Pragma ("GCC error \"cond_subv2df cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2639 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_subv2df3_mask (operands[0],
				     operands[2],
				     operands[3],
				     operands[4],
				     operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_MINUS (V2DFmode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2648 */
rtx
gen_addv16hf3_mask_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2654 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (PLUS, V16HFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V16HFmode,
	gen_rtx_PLUS (V16HFmode,
	operand1,
	operand2),
	operand3,
	operand4),
		operand5),
	178)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2648 */
rtx
gen_addv16sf3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2654 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (PLUS, V16SFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SFmode,
	gen_rtx_PLUS (V16SFmode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2648 */
rtx
gen_subv8sf3_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2654 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MINUS, V8SFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (2,
		gen_rtx_MINUS (V8SFmode,
	operand1,
	operand2),
		operand3),
	178)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2648 */
rtx
gen_addv8df3_mask_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2654 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (PLUS, V8DFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_PLUS (V8DFmode,
	operand1,
	operand2),
	operand3,
	operand4),
		operand5),
	178)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2648 */
rtx
gen_subv4df3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2654 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MINUS, V4DFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DFmode,
	gen_rtx_MINUS (V4DFmode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2648 */
rtx
gen_addv16bf3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2654 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (PLUS, V16BFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16BFmode,
	gen_rtx_PLUS (V16BFmode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2719 */
rtx
gen_cond_mulv4sf (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL _Pragma ("GCC error \"cond_mulv4sf cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2728 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_mulv4sf3_mask (operands[0],
				     operands[2],
				     operands[3],
				     operands[4],
				     operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_MULT (V4SFmode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2737 */
rtx
gen_mulv16hf3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2743 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MULT, V16HFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HFmode,
	gen_rtx_MULT (V16HFmode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2737 */
rtx
gen_mulv4sf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2743 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MULT, V4SFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_MULT (V4SFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2737 */
rtx
gen_mulv4df3_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2743 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MULT, V4DFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (2,
		gen_rtx_MULT (V4DFmode,
	operand1,
	operand2),
		operand3),
	178)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2737 */
rtx
gen_mulv8bf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2743 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MULT, V8BFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_MULT (V8BFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2856 */
rtx
gen_divv16bf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2862 "../../gcc/config/i386/sse.md"
{
  if (TARGET_RECIP_VEC_DIV
      && optimize_insn_for_speed_p ()
      && flag_finite_math_only
      && flag_unsafe_math_optimizations)
    {
      rtx op = gen_reg_rtx (V16BFmode);
      operands[2] = force_reg (V16BFmode, operands[2]);
      emit_insn (gen_avx10_2_rcppbf16_v16bf (op, operands[2]));
      emit_insn (gen_avx10_2_mulnepbf16_v16bf (operands[0], operands[1], op));
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_DIV (V16BFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:2876 */
rtx
gen_cond_divv2df (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL _Pragma ("GCC error \"cond_divv2df cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 2885 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_sse2_divv2df3_mask (operands[0],
					operands[2],
					operands[3],
					operands[4],
					operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_DIV (V2DFmode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3257 */
rtx
gen_cond_smaxv8hf (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3266 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_smaxv8hf3_mask (operands[0],
				     operands[2],
				     operands[3],
				     operands[4],
				     operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_SMAX (V8HFmode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3257 */
rtx
gen_cond_smaxv4df (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3266 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_smaxv4df3_mask (operands[0],
				     operands[2],
				     operands[3],
				     operands[4],
				     operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DFmode,
	gen_rtx_SMAX (V4DFmode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3275 */
rtx
gen_sminv32hf3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3282 "../../gcc/config/i386/sse.md"
{
  if (!flag_finite_math_only || flag_signed_zeros)
    {
      operands[1] = force_reg (V32HFmode, operands[1]);
      emit_insn (gen_ieee_minv32hf3_mask
		 (operands[0], operands[1], operands[2]
		  , operands[3], operands[4]
		  ));
      DONE;
    }
  else
    ix86_fixup_binary_operands_no_copy (SMIN, V32HFmode, operands);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HFmode,
	gen_rtx_SMIN (V32HFmode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3275 */
rtx
gen_sminv16hf3_mask_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3282 "../../gcc/config/i386/sse.md"
{
  if (!flag_finite_math_only || flag_signed_zeros)
    {
      operands[1] = force_reg (V16HFmode, operands[1]);
      emit_insn (gen_ieee_minv16hf3_mask_round
		 (operands[0], operands[1], operands[2]
		  , operands[3], operands[4]
		  , operands[5]));
      DONE;
    }
  else
    ix86_fixup_binary_operands_no_copy (SMIN, V16HFmode, operands);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V16HFmode,
	gen_rtx_SMIN (V16HFmode,
	operand1,
	operand2),
	operand3,
	operand4),
		operand5),
	178)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3275 */
rtx
gen_smaxv8sf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3282 "../../gcc/config/i386/sse.md"
{
  if (!flag_finite_math_only || flag_signed_zeros)
    {
      operands[1] = force_reg (V8SFmode, operands[1]);
      emit_insn (gen_ieee_maxv8sf3
		 (operands[0], operands[1], operands[2]
		  
		  ));
      DONE;
    }
  else
    ix86_fixup_binary_operands_no_copy (SMAX, V8SFmode, operands);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SMAX (V8SFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3275 */
rtx
gen_sminv8sf3_mask_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3282 "../../gcc/config/i386/sse.md"
{
  if (!flag_finite_math_only || flag_signed_zeros)
    {
      operands[1] = force_reg (V8SFmode, operands[1]);
      emit_insn (gen_ieee_minv8sf3_mask_round
		 (operands[0], operands[1], operands[2]
		  , operands[3], operands[4]
		  , operands[5]));
      DONE;
    }
  else
    ix86_fixup_binary_operands_no_copy (SMIN, V8SFmode, operands);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8SFmode,
	gen_rtx_SMIN (V8SFmode,
	operand1,
	operand2),
	operand3,
	operand4),
		operand5),
	178)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3275 */
rtx
gen_sminv8df3_mask_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3282 "../../gcc/config/i386/sse.md"
{
  if (!flag_finite_math_only || flag_signed_zeros)
    {
      operands[1] = force_reg (V8DFmode, operands[1]);
      emit_insn (gen_ieee_minv8df3_mask_round
		 (operands[0], operands[1], operands[2]
		  , operands[3], operands[4]
		  , operands[5]));
      DONE;
    }
  else
    ix86_fixup_binary_operands_no_copy (SMIN, V8DFmode, operands);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_SMIN (V8DFmode,
	operand1,
	operand2),
	operand3,
	operand4),
		operand5),
	178)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3275 */
rtx
gen_sminv2df3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3282 "../../gcc/config/i386/sse.md"
{
  if (!flag_finite_math_only || flag_signed_zeros)
    {
      operands[1] = force_reg (V2DFmode, operands[1]);
      emit_insn (gen_ieee_minv2df3_mask
		 (operands[0], operands[1], operands[2]
		  , operands[3], operands[4]
		  ));
      DONE;
    }
  else
    ix86_fixup_binary_operands_no_copy (SMIN, V2DFmode, operands);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DFmode,
	gen_rtx_SMIN (V2DFmode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3352 */
extern rtx_insn *gen_split_1288 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1288 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1288 (sse.md:3352)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3369 "../../gcc/config/i386/sse.md"
{
   int u = UNSPEC_IEEE_MIN;
   if (rtx_equal_p (operands[1], operands[3]))
     u = UNSPEC_IEEE_MAX;

   if (MEM_P (operands[2]))
     operands[2] = force_reg (V4DFmode, operands[2]);
   rtvec v = gen_rtvec (2, operands[2], operands[1]);
   rtx tmp = gen_rtx_UNSPEC (V4DFmode, v, u);
   emit_move_insn (operands[0], tmp);
   DONE;
 }
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3439 */
rtx
gen_sse_vmsmaxv4sf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3448 "../../gcc/config/i386/sse.md"
{
  if (!flag_finite_math_only || flag_signed_zeros)
    {
      emit_insn (gen_sse_ieee_vmmaxv4sf3
		 (operands[0], operands[1], operands[2]
		  
		  ));
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_SMAX (V4SFmode,
	operand1,
	operand2),
	copy_rtx (operand1),
	const1_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3439 */
rtx
gen_sse_vmsminv4sf3_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3448 "../../gcc/config/i386/sse.md"
{
  if (!flag_finite_math_only || flag_signed_zeros)
    {
      emit_insn (gen_sse_ieee_vmminv4sf3_round
		 (operands[0], operands[1], operands[2]
		  
		  , operands[3]));
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_SMIN (V4SFmode,
	operand1,
	operand2),
	copy_rtx (operand1),
	const1_rtx),
		operand3),
	178)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3528 */
extern rtx_insn *gen_split_1291 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1291 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1291 (sse.md:3528)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_MINUS (V4SFmode,
	operand1,
	operand2),
	gen_rtx_PLUS (V4SFmode,
	copy_rtx (operand1),
	copy_rtx (operand2)),
	operand5)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3578 */
extern rtx_insn *gen_split_1299 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1299 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1299 (sse.md:3578)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3601 "../../gcc/config/i386/sse.md"
{
  int i, nelt = XVECLEN (operands[5], 0);
  HOST_WIDE_INT ival = 0;

  for (i = 0; i < nelt; i++)
    if (INTVAL (XVECEXP (operands[5], 0, i)) < GET_MODE_NUNITS (V4SFmode))
      ival |= HOST_WIDE_INT_1 << i;

  operands[5] = GEN_INT (ival);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_MINUS (V4SFmode,
	operand1,
	operand2),
	gen_rtx_PLUS (V4SFmode,
	copy_rtx (operand1),
	copy_rtx (operand2)),
	operand5)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3861 */
rtx
gen_reduc_plus_scal_v8hf (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"reduc_plus_scal_v8hf cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3866 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V8HFmode);
  ix86_expand_reduc (gen_addv8hf3, tmp, operands[1]);
  emit_insn (gen_vec_extractv8hfhf (operands[0], tmp,
                                                        const0_rtx));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_PLUS (V8HFmode,
	operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3907 */
rtx
gen_reduc_plus_scal_v32hf (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"reduc_plus_scal_v32hf cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3912 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V16HFmode);
  rtx tmp2 = gen_reg_rtx (V16HFmode);
  rtx tmp3 = gen_reg_rtx (V16HFmode);
  emit_insn (gen_vec_extract_hi_v32hf (tmp, operands[1]));
  emit_insn (gen_vec_extract_lo_v32hf (tmp2, operands[1]));
  emit_insn (gen_addv16hf3 (tmp3, tmp, tmp2));
  emit_insn (gen_reduc_plus_scal_v16hf (operands[0], tmp3));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_PLUS (V32HFmode,
	operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3930 */
rtx
gen_reduc_smin_scal_v8hf (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3935 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V8HFmode);
  ix86_expand_reduc (gen_sminv8hf3, tmp, operands[1]);
  emit_insn (gen_vec_extractv8hfhf (operands[0], tmp,
							const0_rtx));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SMIN (V8HFmode,
	operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3930 */
rtx
gen_reduc_smax_scal_v16qi (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3935 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V16QImode);
  ix86_expand_reduc (gen_smaxv16qi3, tmp, operands[1]);
  emit_insn (gen_vec_extractv16qiqi (operands[0], tmp,
							const0_rtx));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SMAX (V16QImode,
	operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3956 */
rtx
gen_reduc_smax_scal_v8si (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3961 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V4SImode);
  rtx tmp2 = gen_reg_rtx (V4SImode);
  rtx tmp3 = gen_reg_rtx (V4SImode);
  emit_insn (gen_vec_extract_hi_v8si (tmp, operands[1]));
  emit_insn (gen_vec_extract_lo_v8si (tmp2, operands[1]));
  emit_insn (gen_smaxv4si3 (tmp3, tmp, tmp2));
  emit_insn (gen_reduc_smax_scal_v4si (operands[0], tmp3));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SMAX (V8SImode,
	operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3956 */
rtx
gen_reduc_smax_scal_v32hf (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3961 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V16HFmode);
  rtx tmp2 = gen_reg_rtx (V16HFmode);
  rtx tmp3 = gen_reg_rtx (V16HFmode);
  emit_insn (gen_vec_extract_hi_v32hf (tmp, operands[1]));
  emit_insn (gen_vec_extract_lo_v32hf (tmp2, operands[1]));
  emit_insn (gen_smaxv16hf3 (tmp3, tmp, tmp2));
  emit_insn (gen_reduc_smax_scal_v16hf (operands[0], tmp3));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SMAX (V32HFmode,
	operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3956 */
rtx
gen_reduc_smax_scal_v8df (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3961 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V4DFmode);
  rtx tmp2 = gen_reg_rtx (V4DFmode);
  rtx tmp3 = gen_reg_rtx (V4DFmode);
  emit_insn (gen_vec_extract_hi_v8df (tmp, operands[1]));
  emit_insn (gen_vec_extract_lo_v8df (tmp2, operands[1]));
  emit_insn (gen_smaxv4df3 (tmp3, tmp, tmp2));
  emit_insn (gen_reduc_smax_scal_v4df (operands[0], tmp3));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SMAX (V8DFmode,
	operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:3988 */
rtx
gen_reduc_umax_scal_v32qi (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 3993 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V16QImode);
  rtx tmp2 = gen_reg_rtx (V16QImode);
  rtx tmp3 = gen_reg_rtx (V16QImode);
  emit_insn (gen_vec_extract_hi_v32qi (tmp, operands[1]));
  emit_insn (gen_vec_extract_lo_v32qi (tmp2, operands[1]));
  emit_insn (gen_umaxv16qi3 (tmp3, tmp, tmp2));
  rtx tmp4 = gen_reg_rtx (V16QImode);
  ix86_expand_reduc (gen_umaxv16qi3, tmp4, tmp3);
  emit_insn (gen_vec_extractv16qiqi
		(operands[0], tmp4, const0_rtx));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_UMAX (V32QImode,
	operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4047 */
rtx
gen_reduc_ior_scal_v16qi (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"reduc_ior_scal_v16qi cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4052 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V16QImode);
  ix86_expand_reduc (gen_iorv16qi3, tmp, operands[1]);
  emit_insn (gen_vec_extractv16qiqi (operands[0],
						       tmp, const0_rtx));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_IOR (V16QImode,
	operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4047 */
rtx
gen_reduc_ior_scal_v2di (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"reduc_ior_scal_v2di cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4052 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V2DImode);
  ix86_expand_reduc (gen_iorv2di3, tmp, operands[1]);
  emit_insn (gen_vec_extractv2didi (operands[0],
						       tmp, const0_rtx));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_IOR (V2DImode,
	operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4068 */
rtx
gen_reduc_xor_scal_v8si (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"reduc_xor_scal_v8si cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4073 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V4SImode);
  rtx tmp2 = gen_reg_rtx (V4SImode);
  rtx tmp3 = gen_reg_rtx (V4SImode);
  emit_insn (gen_vec_extract_hi_v8si (tmp, operands[1]));
  emit_insn (gen_vec_extract_lo_v8si (tmp2, operands[1]));
  emit_insn (gen_xorv4si3 (tmp3, tmp, tmp2));
  emit_insn (gen_reduc_xor_scal_v4si (operands[0], tmp3));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_XOR (V8SImode,
	operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4068 */
rtx
gen_reduc_and_scal_v16si (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"reduc_and_scal_v16si cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4073 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V8SImode);
  rtx tmp2 = gen_reg_rtx (V8SImode);
  rtx tmp3 = gen_reg_rtx (V8SImode);
  emit_insn (gen_vec_extract_hi_v16si (tmp, operands[1]));
  emit_insn (gen_vec_extract_lo_v16si (tmp2, operands[1]));
  emit_insn (gen_andv8si3 (tmp3, tmp, tmp2));
  emit_insn (gen_reduc_and_scal_v8si (operands[0], tmp3));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_AND (V16SImode,
	operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4134 */
extern rtx_insn *gen_split_1310 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1310 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1310 (sse.md:4134)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4155 "../../gcc/config/i386/sse.md"
{
  operands[5] = GEN_INT (INTVAL (operands[5]) ^ 4);
  operands[6] = gen_reg_rtx (V8SFmode);
  operands[7]
    = lowpart_subreg (GET_MODE (operands[0]), operands[6], V8SFmode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  operand7 = operands[7];
  (void) operand7;
  emit_insn (gen_rtx_SET (operand6,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (3,
		operand3,
		operand4,
		operand5),
	59)));
  emit_insn (gen_rtx_SET (operand0,
	operand7));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4182 */
extern rtx_insn *gen_split_1321 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1321 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1321 (sse.md:4182)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4202 "../../gcc/config/i386/sse.md"
operands[5] = GEN_INT (INTVAL (operands[5]) ^ 4);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (3,
		operand3,
		operand4,
		operand5),
	59)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4266 */
extern rtx_insn *gen_split_1331 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1331 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1331 (sse.md:4266)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4292 "../../gcc/config/i386/sse.md"
{
  if (INTVAL (operands[5]) == 5)
    std::swap (operands[1], operands[2]);
  operands[0] = gen_lowpart (V16QImode, operands[0]);
  operands[1] = force_reg (V16QImode,
			  gen_lowpart (V16QImode, operands[1]));
  operands[2] = gen_lowpart (V16QImode, operands[2]);

  operands[3] = force_reg (V16QImode, operands[3]);
  operands[3] = lowpart_subreg (V2DImode, operands[3], V16QImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		gen_rtx_SUBREG (V16QImode,
	gen_rtx_LT (V2DImode,
	operand3,
	operand4),
	0)),
	51)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4422 */
extern rtx_insn *gen_split_1341 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1341 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1341 (sse.md:4422)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4451 "../../gcc/config/i386/sse.md"
{
  operands[5] = lowpart_subreg (QImode,
				operands[0], SImode);
  if (SUBREG_P (operands[5]))
    {
      SUBREG_PROMOTED_VAR_P (operands[5]) = 1;
      SUBREG_PROMOTED_SET (operands[5], 1);
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (SImode,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59))));
  emit_insn (gen_rtx_SET (operand4,
	operand5));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4422 */
extern rtx_insn *gen_split_1351 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1351 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1351 (sse.md:4422)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4451 "../../gcc/config/i386/sse.md"
{
  operands[5] = lowpart_subreg (QImode,
				operands[0], DImode);
  if (SUBREG_P (operands[5]))
    {
      SUBREG_PROMOTED_VAR_P (operands[5]) = 1;
      SUBREG_PROMOTED_SET (operands[5], 1);
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (DImode,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59))));
  emit_insn (gen_rtx_SET (operand4,
	operand5));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4422 */
extern rtx_insn *gen_split_1361 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1361 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1361 (sse.md:4422)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4451 "../../gcc/config/i386/sse.md"
{
  operands[5] = lowpart_subreg (HImode,
				operands[0], HImode);
  if (SUBREG_P (operands[5]))
    {
      SUBREG_PROMOTED_VAR_P (operands[5]) = 1;
      SUBREG_PROMOTED_SET (operands[5], 1);
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (HImode,
	gen_rtx_UNSPEC (HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59))));
  emit_insn (gen_rtx_SET (operand4,
	operand5));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4422 */
extern rtx_insn *gen_split_1371 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1371 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1371 (sse.md:4422)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4451 "../../gcc/config/i386/sse.md"
{
  operands[5] = lowpart_subreg (QImode,
				operands[0], SImode);
  if (SUBREG_P (operands[5]))
    {
      SUBREG_PROMOTED_VAR_P (operands[5]) = 1;
      SUBREG_PROMOTED_SET (operands[5], 1);
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (SImode,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59))));
  emit_insn (gen_rtx_SET (operand4,
	operand5));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4461 */
extern rtx_insn *gen_split_1381 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1381 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1381 (sse.md:4461)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4478 "../../gcc/config/i386/sse.md"
operands[4] = GEN_INT (INTVAL (operands[3]) ^ 4);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand4),
	59)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4461 */
extern rtx_insn *gen_split_1390 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1390 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1390 (sse.md:4461)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4478 "../../gcc/config/i386/sse.md"
operands[4] = GEN_INT (INTVAL (operands[3]) ^ 4);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand4),
	59)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4511 */
extern rtx_insn *gen_split_1400 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1400 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1400 (sse.md:4511)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4539 "../../gcc/config/i386/sse.md"
{
  operands[5] = lowpart_subreg (SImode,
				operands[0], HImode);
  if (SUBREG_P (operands[5]))
    {
      SUBREG_PROMOTED_VAR_P (operands[5]) = 1;
      SUBREG_PROMOTED_SET (operands[5], 1);
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (HImode,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59))));
  emit_insn (gen_rtx_SET (operand4,
	operand5));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4511 */
extern rtx_insn *gen_split_1410 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1410 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1410 (sse.md:4511)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4539 "../../gcc/config/i386/sse.md"
{
  operands[5] = lowpart_subreg (QImode,
				operands[0], SImode);
  if (SUBREG_P (operands[5]))
    {
      SUBREG_PROMOTED_VAR_P (operands[5]) = 1;
      SUBREG_PROMOTED_SET (operands[5], 1);
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (SImode,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	59))));
  emit_insn (gen_rtx_SET (operand4,
	operand5));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4556 */
extern rtx_insn *gen_split_1422 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1422 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1422 (sse.md:4556)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4573 "../../gcc/config/i386/sse.md"
operands[4] = GEN_INT (INTVAL (operands[3]) ^ 4);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand4),
	59)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4621 */
extern rtx_insn *gen_split_1432 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1432 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1432 (sse.md:4621)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4650 "../../gcc/config/i386/sse.md"
{
  operands[5] = lowpart_subreg (SImode,
				operands[0], DImode);
  if (SUBREG_P (operands[5]))
    {
      SUBREG_PROMOTED_VAR_P (operands[5]) = 1;
      SUBREG_PROMOTED_SET (operands[5], 1);
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (DImode,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	157))));
  emit_insn (gen_rtx_SET (operand4,
	operand5));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4711 */
extern rtx_insn *gen_split_1442 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1442 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1442 (sse.md:4711)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4740 "../../gcc/config/i386/sse.md"
{
  operands[5] = lowpart_subreg (HImode,
				operands[0], HImode);
  if (SUBREG_P (operands[5]))
    {
      SUBREG_PROMOTED_VAR_P (operands[5]) = 1;
      SUBREG_PROMOTED_SET (operands[5], 1);
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (HImode,
	gen_rtx_UNSPEC (HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	157))));
  emit_insn (gen_rtx_SET (operand4,
	operand5));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4711 */
extern rtx_insn *gen_split_1452 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1452 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1452 (sse.md:4711)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4740 "../../gcc/config/i386/sse.md"
{
  operands[5] = lowpart_subreg (QImode,
				operands[0], SImode);
  if (SUBREG_P (operands[5]))
    {
      SUBREG_PROMOTED_VAR_P (operands[5]) = 1;
      SUBREG_PROMOTED_SET (operands[5], 1);
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (SImode,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	157))));
  emit_insn (gen_rtx_SET (operand4,
	operand5));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4754 */
extern rtx_insn *gen_split_1462 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1462 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1462 (sse.md:4754)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4771 "../../gcc/config/i386/sse.md"
operands[4] = GEN_INT (INTVAL (operands[3]) ^ 4);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand4),
	157)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4780 */
extern rtx_insn *gen_split_1468 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1468 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1468 (sse.md:4780)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4795 "../../gcc/config/i386/sse.md"
{
    /* LE: 2, NLT: 5, NLE: 6, LT: 1  */
    int cmp_predicate = 2; /* LE  */
    if (MEM_P (operands[1]))
      {
       std::swap (operands[1], operands[2]);
       cmp_predicate = 5; /* NLT (GE)  */
      }
    if ((INTVAL (operands[4]) & 4) != 0)
      cmp_predicate ^= 4; /* Invert the comparison to NLE (GT) or LT.  */
    emit_insn (gen_avx512vl_ucmpv16qi3 (operands[0], operands[1],operands[2],
					GEN_INT (cmp_predicate)));
    DONE;
  }
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4880 */
rtx
gen_vec_cmpv16sihi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4886 "../../gcc/config/i386/sse.md"
{
  bool ok = ix86_expand_mask_vec_cmp (operands[0], GET_CODE (operands[1]),
				      operands[2], operands[3]);
  gcc_assert (ok);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand1), HImode,
		operand2,
		operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4880 */
rtx
gen_vec_cmpv8sfqi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4886 "../../gcc/config/i386/sse.md"
{
  bool ok = ix86_expand_mask_vec_cmp (operands[0], GET_CODE (operands[1]),
				      operands[2], operands[3]);
  gcc_assert (ok);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand1), QImode,
		operand2,
		operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4893 */
rtx
gen_vec_cmpv8hiqi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4899 "../../gcc/config/i386/sse.md"
{
  bool ok = ix86_expand_mask_vec_cmp (operands[0], GET_CODE (operands[1]),
				      operands[2], operands[3]);
  gcc_assert (ok);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand1), QImode,
		operand2,
		operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4943 */
rtx
gen_vec_cmpv2div2di (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4949 "../../gcc/config/i386/sse.md"
{
  bool ok = ix86_expand_int_vec_cmp (operands);
  gcc_assert (ok);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand1), V2DImode,
		operand2,
		operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:4979 */
rtx
gen_vec_cmpuv2diqi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 4985 "../../gcc/config/i386/sse.md"
{
  bool ok = ix86_expand_mask_vec_cmp (operands[0], GET_CODE (operands[1]),
				      operands[2], operands[3]);
  gcc_assert (ok);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand1), QImode,
		operand2,
		operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:5005 */
rtx
gen_vec_cmpuv4div4di (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5011 "../../gcc/config/i386/sse.md"
{
  bool ok = ix86_expand_int_vec_cmp (operands);
  gcc_assert (ok);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand1), V4DImode,
		operand2,
		operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:5103 */
rtx
gen_vcond_mask_v8diqi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DImode,
	operand1,
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:5103 */
rtx
gen_vcond_mask_v2dfqi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DFmode,
	operand1,
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:5111 */
rtx
gen_vcond_mask_v16hfhi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HFmode,
	operand1,
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:5125 */
rtx
gen_vcond_mask_v4div4di (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL _Pragma ("GCC error \"vcond_mask_v4div4di cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5132 "../../gcc/config/i386/sse.md"
{
  ix86_expand_sse_movcc (operands[0], operands[3],
			 operands[1], operands[2]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DImode,
	operand1,
	operand2,
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:5190 */
rtx
gen_vcond_mask_qiqi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL _Pragma ("GCC error \"vcond_mask_qiqi cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5196 "../../gcc/config/i386/sse.md"
{
  /* (operand[1] & operand[3]) | (operand[2] & ~operand[3])  */
  rtx op1 = gen_reg_rtx (QImode);
  rtx op2 = gen_reg_rtx (QImode);
  rtx op3 = gen_reg_rtx (QImode);

  emit_insn (gen_andqi3 (op1, operands[1], operands[3]));
  emit_insn (gen_one_cmplqi2 (op3, operands[3]));
  emit_insn (gen_andqi3 (op2, operands[2], op3));
  emit_insn (gen_iorqi3 (operands[0], op1, op2));

  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:5327 */
rtx
gen_xorv16hf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5334 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (XOR, V16HFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_XOR (V16HFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:5327 */
rtx
gen_andv4sf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5334 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (AND, V4SFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_AND (V4SFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:5327 */
rtx
gen_iorv4df3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5334 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (IOR, V4DFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DFmode,
	gen_rtx_IOR (V4DFmode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:5336 */
rtx
gen_andv32hf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5342 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (AND, V32HFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_AND (V32HFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:5336 */
rtx
gen_andv8df3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5342 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (AND, V8DFmode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DFmode,
	gen_rtx_AND (V8DFmode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:5453 */
extern rtx_insn *gen_split_1484 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1484 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1484 (sse.md:5453)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5461 "../../gcc/config/i386/sse.md"
operands[1] = force_reg (V16SFmode, operands[1]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:5463 */
rtx
gen_copysignv16hf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"copysignv16hf3 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5474 "../../gcc/config/i386/sse.md"
{
  operands[3] = ix86_build_signbit_mask (V16HFmode, 1, 0);

  operands[4] = gen_reg_rtx (V16HFmode);
  operands[5] = gen_reg_rtx (V16HFmode);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand4,
	gen_rtx_AND (V16HFmode,
	gen_rtx_NOT (V16HFmode,
	operand3),
	operand1)));
  emit_insn (gen_rtx_SET (operand5,
	gen_rtx_AND (V16HFmode,
	copy_rtx (operand3),
	operand2)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IOR (V16HFmode,
	copy_rtx (operand4),
	copy_rtx (operand5))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:5481 */
rtx
gen_xorsignv8bf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"xorsignv8bf3 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5489 "../../gcc/config/i386/sse.md"
{
  operands[3] = ix86_build_signbit_mask (V8BFmode, 1, 0);

  operands[4] = gen_reg_rtx (V8BFmode);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand4,
	gen_rtx_AND (V8BFmode,
	operand3,
	operand2)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_XOR (V8BFmode,
	copy_rtx (operand4),
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:5481 */
rtx
gen_xorsignv2df3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"xorsignv2df3 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5489 "../../gcc/config/i386/sse.md"
{
  operands[3] = ix86_build_signbit_mask (V2DFmode, 1, 0);

  operands[4] = gen_reg_rtx (V2DFmode);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand4,
	gen_rtx_AND (V2DFmode,
	operand3,
	operand2)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_XOR (V2DFmode,
	copy_rtx (operand4),
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:5807 */
rtx
gen_fmav8df4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FMA (V8DFmode,
	operand1,
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:5814 */
rtx
gen_fmsv4sf4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FMA (V4SFmode,
	operand1,
	operand2,
	gen_rtx_NEG (V4SFmode,
	operand3)));
}

/* ../../gcc/config/i386/sse.md:5814 */
rtx
gen_fmsv8bf4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FMA (V8BFmode,
	operand1,
	operand2,
	gen_rtx_NEG (V8BFmode,
	operand3)));
}

/* ../../gcc/config/i386/sse.md:5821 */
rtx
gen_fnmav8df4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FMA (V8DFmode,
	gen_rtx_NEG (V8DFmode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:5828 */
rtx
gen_fnmsv4sf4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FMA (V4SFmode,
	gen_rtx_NEG (V4SFmode,
	operand1),
	operand2,
	gen_rtx_NEG (V4SFmode,
	operand3)));
}

/* ../../gcc/config/i386/sse.md:5828 */
rtx
gen_fnmsv8bf4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FMA (V8BFmode,
	gen_rtx_NEG (V8BFmode,
	operand1),
	operand2,
	gen_rtx_NEG (V8BFmode,
	operand3)));
}

/* ../../gcc/config/i386/sse.md:5856 */
rtx
gen_fma4i_fmsub_df (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FMA (DFmode,
	operand1,
	operand2,
	gen_rtx_NEG (DFmode,
	operand3)));
}

/* ../../gcc/config/i386/sse.md:5864 */
rtx
gen_fma4i_fnmadd_v2df (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FMA (V2DFmode,
	gen_rtx_NEG (V2DFmode,
	operand1),
	operand2,
	operand3));
}

/* ../../gcc/config/i386/sse.md:5872 */
rtx
gen_fma4i_fnmsub_v4df (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FMA (V4DFmode,
	gen_rtx_NEG (V4DFmode,
	operand1),
	operand2,
	gen_rtx_NEG (V4DFmode,
	operand3)));
}

/* ../../gcc/config/i386/sse.md:5881 */
rtx
gen_avx512f_fmadd_v16sf_maskz_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5888 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_fma_fmadd_v16sf_maskz_1_round (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V16SFmode), operands[4], operands[5]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, true);
  emit_insn (gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		operand5),
	178));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:5938 */
rtx
gen_cond_fmav32hf (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL _Pragma ("GCC error \"cond_fmav32hf cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 5948 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V32HFmode);
  emit_insn (gen_fmav32hf4 (tmp,
			     operands[2],
			     operands[3],
			     operands[4]));
  emit_move_insn (operands[0], gen_rtx_VEC_MERGE (V32HFmode,
						  tmp,
						  operands[5],
						  operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HFmode,
	gen_rtx_FMA (V32HFmode,
	operand2,
	operand3,
	operand4),
	operand5,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:6011 */
rtx
gen_avx512bw_fmsub_v32hf_maskz_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6018 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_fma_fmsub_v32hf_maskz_1_round (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V32HFmode), operands[4], operands[5]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, true);
  emit_insn (gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		operand5),
	178));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:6011 */
rtx
gen_avx512f_fmsub_v8df_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6018 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_fma_fmsub_v8df_maskz_1 (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V8DFmode), operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:6041 */
rtx
gen_cond_fmsv16sf (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL _Pragma ("GCC error \"cond_fmsv16sf cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6052 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V16SFmode);
  emit_insn (gen_fmsv16sf4 (tmp,
			     operands[2],
			     operands[3],
			     operands[4]));
  emit_move_insn (operands[0], gen_rtx_VEC_MERGE (V16SFmode,
						  tmp,
						  operands[5],
						  operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SFmode,
	gen_rtx_FMA (V16SFmode,
	operand2,
	operand3,
	gen_rtx_NEG (V16SFmode,
	operand4)),
	operand5,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:6117 */
rtx
gen_avx512fp16_fnmadd_v8hf_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6124 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_fma_fnmadd_v8hf_maskz_1 (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V8HFmode), operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:6117 */
rtx
gen_avx512f_fnmadd_v8df_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6124 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_fma_fnmadd_v8df_maskz_1 (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V8DFmode), operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:6147 */
rtx
gen_cond_fnmav16sf (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL _Pragma ("GCC error \"cond_fnmav16sf cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6158 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V16SFmode);
  emit_insn (gen_fnmav16sf4 (tmp,
			      operands[2],
			      operands[3],
			      operands[4]));
  emit_move_insn (operands[0], gen_rtx_VEC_MERGE (V16SFmode,
						  tmp,
						  operands[5],
						  operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SFmode,
	gen_rtx_FMA (V16SFmode,
	gen_rtx_NEG (V16SFmode,
	operand2),
	operand3,
	operand4),
	operand5,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:6224 */
rtx
gen_avx512fp16_fnmsub_v8hf_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6231 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_fma_fnmsub_v8hf_maskz_1 (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V8HFmode), operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:6224 */
rtx
gen_avx512f_fnmsub_v8df_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6231 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_fma_fnmsub_v8df_maskz_1 (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V8DFmode), operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:6255 */
rtx
gen_cond_fnmsv16sf (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL _Pragma ("GCC error \"cond_fnmsv16sf cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6267 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V16SFmode);
  emit_insn (gen_fnmsv16sf4 (tmp,
			      operands[2],
			      operands[3],
			      operands[4]));
  emit_move_insn (operands[0], gen_rtx_VEC_MERGE (V16SFmode,
						  tmp,
						  operands[5],
						  operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SFmode,
	gen_rtx_FMA (V16SFmode,
	gen_rtx_NEG (V16SFmode,
	operand2),
	operand3,
	gen_rtx_NEG (V16SFmode,
	operand4)),
	operand5,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:6336 */
rtx
gen_vec_fmsubaddv8hf4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		gen_rtx_NEG (V8HFmode,
	operand3)),
	133));
}

/* ../../gcc/config/i386/sse.md:6346 */
rtx
gen_fmaddsub_v8sf (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	133));
}

/* ../../gcc/config/i386/sse.md:6355 */
rtx
gen_avx512fp16_fmaddsub_v8hf_maskz_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6362 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_fma_fmaddsub_v8hf_maskz_1_round (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V8HFmode), operands[4], operands[5]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, true);
  emit_insn (gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		operand5),
	178));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:6355 */
rtx
gen_avx512vl_fmaddsub_v2df_maskz_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6362 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_fma_fmaddsub_v2df_maskz_1_round (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V2DFmode), operands[4], operands[5]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, true);
  emit_insn (gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		operand5),
	178));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:6369 */
rtx
gen_avx512vl_fmsubadd_v4sf_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6376 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_fma_fmsubadd_v4sf_maskz_1 (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V4SFmode), operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:6526 */
rtx
gen_fmai_vmfmadd_v8hf (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_FMA (V8HFmode,
	operand1,
	operand2,
	operand3),
	operand1,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:6526 */
rtx
gen_fmai_vmfmadd_v4sf_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_FMA (V4SFmode,
	operand1,
	operand2,
	operand3),
	operand1,
	const1_rtx),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:6537 */
rtx
gen_fmai_vmfmsub_v4sf_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		gen_rtx_VEC_MERGE (V4SFmode,
	gen_rtx_FMA (V4SFmode,
	operand1,
	operand2,
	gen_rtx_NEG (V4SFmode,
	operand3)),
	operand1,
	const1_rtx),
		operand4),
	178));
}

/* ../../gcc/config/i386/sse.md:6561 */
rtx
gen_fmai_vmfnmsub_v8hf (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HFmode,
	gen_rtx_FMA (V8HFmode,
	gen_rtx_NEG (V8HFmode,
	operand1),
	operand2,
	gen_rtx_NEG (V8HFmode,
	operand3)),
	operand1,
	const1_rtx));
}

/* ../../gcc/config/i386/sse.md:6684 */
rtx
gen_avx512f_vmfmadd_v4sf_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6691 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_avx512f_vmfmadd_v4sf_maskz_1 (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V4SFmode), operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:6819 */
rtx
gen_avx512f_vmfnmadd_v2df_maskz_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 6826 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_avx512f_vmfnmadd_v2df_maskz_1_round (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V2DFmode), operands[4], operands[5]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, true);
  emit_insn (gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		operand5),
	178));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:7071 */
rtx
gen_avx512vl_fmaddc_v16hf_maskz_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 7078 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_fma_fmaddc_v16hf_maskz_1_round (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V16HFmode), operands[4], operands[5]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, true);
  emit_insn (gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		operand5),
	178));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:7117 */
rtx
gen_avx512bw_fcmaddc_v32hf_maskz_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 7124 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_fma_fcmaddc_v32hf_maskz_1_round (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V32HFmode), operands[4], operands[5]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, true);
  emit_insn (gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		operand5),
	178));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:7131 */
rtx
gen_cmla_conjv32hf4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	219));
}

/* ../../gcc/config/i386/sse.md:7153 */
extern rtx_insn *gen_split_1491 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1491 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1491 (sse.md:7153)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	217)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:7187 */
extern rtx_insn *gen_split_1500 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1500 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1500 (sse.md:7187)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand4),
	217)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:7291 */
rtx
gen_cmul_conjv16hf3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	222));
}

/* ../../gcc/config/i386/sse.md:7316 */
rtx
gen_avx512fp16_fmaddcsh_v8hf_maskz_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 7323 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_avx512fp16_fma_fmaddcsh_v8hf_maskz_round (
    operands[0], operands[1], operands[2], operands[3],
    CONST0_RTX (V8HFmode), operands[4], operands[5]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, true);
  emit_insn (gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		operand5),
	178));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:7434 */
rtx
gen_avx512fp16_fmaddcsh_v8hf_mask3_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 7441 "../../gcc/config/i386/sse.md"
{
  rtx dest, op0, op1;

  if (!(CONST_INT_P (operands[5])
								  && (INTVAL (operands[5])
								      == NO_ROUND)))
    emit_insn (gen_avx512fp16_fmaddcsh_v8hf_mask_round (
      operands[0], operands[1], operands[2], operands[3],
      operands[4], operands[5]));
  else
    emit_insn (gen_avx512fp16_fmaddcsh_v8hf_mask (operands[0],
      operands[1], operands[2], operands[3], operands[4]));

  dest = gen_reg_rtx (V4SFmode);
  op0 = lowpart_subreg (V4SFmode,
			force_reg (V8HFmode, operands[0]),
			V8HFmode);
  if (!MEM_P (operands[3]))
    operands[3] = force_reg (V8HFmode, operands[3]);
  op1 = lowpart_subreg (V4SFmode, operands[3], V8HFmode);
  emit_insn (gen_sse_movss_v4sf (dest, op1, op0));
  emit_move_insn (operands[0], lowpart_subreg (V8HFmode, dest, V4SFmode));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, true);
  emit_insn (gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		operand5),
	178));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:7652 */
rtx
gen_avx512fp16_floatunsv4div4hf2 (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 7658 "../../gcc/config/i386/sse.md"
operands[2] = CONST0_RTX (V4HFmode);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V8HFmode,
	gen_rtx_UNSIGNED_FLOAT (V4HFmode,
	operand1),
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:7741 */
rtx
gen_avx512fp16_floatunsv2div2hf2 (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 7747 "../../gcc/config/i386/sse.md"
operands[2] = CONST0_RTX (V6HFmode);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V8HFmode,
	gen_rtx_UNSIGNED_FLOAT (V2HFmode,
	operand1),
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:7844 */
rtx
gen_fix_truncv32hfv32hi2 (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FIX (V32HImode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:7871 */
rtx
gen_fix_truncv4hfv4si2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 7876 "../../gcc/config/i386/sse.md"
{
  if (!MEM_P (operands[1]))
    {
      operands[1] = lowpart_subreg (V8HFmode,
				    force_reg (V4HFmode, operands[1]),
				    V4HFmode);
      emit_insn (gen_avx512fp16_fix_truncv4si2 (operands[0],
								operands[1]));
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_FIX (V4SImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:8102 */
rtx
gen_truncv16sfv16hf2 (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FLOAT_TRUNCATE (V16HFmode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:8164 */
rtx
gen_avx512fp16_vcvtpd2ph_v4df_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx operand4;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 8177 "../../gcc/config/i386/sse.md"
operands[4] = CONST0_RTX (V4HFmode);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V8HFmode,
	gen_rtx_VEC_MERGE (V4HFmode,
	gen_rtx_FLOAT_TRUNCATE (V4HFmode,
	operand1),
	gen_rtx_VEC_SELECT (V4HFmode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)]))),
	operand3),
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:8840 */
rtx
gen_fixuns_truncv8sfv8si2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 8845 "../../gcc/config/i386/sse.md"
{
  /* AVX512 support vcvttps2udq for all 128/256/512-bit vectors.  */
  if (!TARGET_AVX512VL)
    {
      rtx tmp[3];
      tmp[0] = ix86_expand_adjust_ufix_to_sfix_si (operands[1], &tmp[2]);
      tmp[1] = gen_reg_rtx (V8SImode);
      emit_insn (gen_fix_truncv8sfv8si2 (tmp[1], tmp[0]));
      emit_insn (gen_xorv8si3 (operands[0], tmp[1], tmp[2]));
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSIGNED_FIX (V8SImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:9237 */
rtx
gen_vec_packu_float_v4di (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 9243 "../../gcc/config/i386/sse.md"
{
  rtx r1 = gen_reg_rtx (V4SFmode);
  rtx r2 = gen_reg_rtx (V4SFmode);
  rtx (*gen) (rtx, rtx);

  if (V4DImode == V2DImode)
    gen = gen_avx512dq_floatunsv2div2sf2;
  else
    gen = gen_floatunsv4div4sf2;
  emit_insn (gen (r1, operands[1]));
  emit_insn (gen (r2, operands[2]));
  if (V4DImode == V2DImode)
    emit_insn (gen_sse_movlhps (operands[0], r1, r2));
  else
    emit_insn (gen_avx_vec_concatv8sf (operands[0],
							  r1, r2));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit_insn (gen_rtx_UNSIGNED_FLOAT (V8SFmode,
	operand1));
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:9287 */
rtx
gen_floatunsv2div2sf2_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx operand4;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 9298 "../../gcc/config/i386/sse.md"
operands[4] = CONST0_RTX (V2SFmode);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V4SFmode,
	gen_rtx_VEC_MERGE (V2SFmode,
	gen_rtx_UNSIGNED_FLOAT (V2SFmode,
	operand1),
	gen_rtx_VEC_SELECT (V2SFmode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		const0_rtx,
		const1_rtx))),
	operand3),
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:9817 */
rtx
gen_vec_unpack_ufix_trunc_hi_v8sf (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 9822 "../../gcc/config/i386/sse.md"
{
  rtx tem;
  rtx (*gen) (rtx, rtx);

  if (V8SFmode != V4SFmode)
    {
      tem = gen_reg_rtx (V4SFmode);
      emit_insn (gen_vec_extract_hi_v8sf (tem,
							       operands[1]));
      gen = gen_fixuns_truncv4sfv4di2;
    }
  else
    {
      tem = gen_reg_rtx (V4SFmode);
      emit_insn (gen_avx_vpermilv4sf (tem, operands[1], GEN_INT (0x4e)));
      gen = gen_avx512dq_fixuns_truncv2sfv2di2;
    }

  emit_insn (gen (operands[0], tem));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit_insn (gen_rtx_UNSIGNED_FIX (V4DImode,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:9866 */
rtx
gen_vec_unpack_ufix_trunc_hi_v32hf (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 9871 "../../gcc/config/i386/sse.md"
{
  rtx tem = operands[1];
  rtx (*gen) (rtx, rtx);
  if (V32HFmode != V8HFmode)
    {
      tem = gen_reg_rtx (V16HFmode);
      emit_insn (gen_vec_extract_hi_v32hf (tem,
							       operands[1]));
      gen = gen_fixuns_truncv16hfv16si2;
    }
  else
    {
      tem = gen_reg_rtx (V8HFmode);
      rtvec tmp = rtvec_alloc (8);
      for (int i = 0; i != 8; i++)
	RTVEC_ELT (tmp, i) = GEN_INT ((i + 4) % 8);

      rtx selector = gen_rtx_PARALLEL (VOIDmode, tmp);
      emit_move_insn (tem,
		     gen_rtx_VEC_SELECT (V8HFmode, operands[1], selector));
      gen = gen_avx512fp16_fixuns_truncv16si2;
    }

  emit_insn (gen (operands[0], tem));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit_insn (gen_rtx_UNSIGNED_FIX (V16SImode,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:10275 */
rtx
gen_avx512bw_cvtmask2bv64qi (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 10282 "../../gcc/config/i386/sse.md"
{
    operands[2] = CONSTM1_RTX (V64QImode);
    operands[3] = CONST0_RTX (V64QImode);
  }
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V64QImode,
	operand2,
	operand3,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:10298 */
rtx
gen_avx512vl_cvtmask2qv4di (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 10305 "../../gcc/config/i386/sse.md"
{
    operands[2] = CONSTM1_RTX (V4DImode);
    operands[3] = CONST0_RTX (V4DImode);
  }
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DImode,
	operand2,
	operand3,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:10336 */
extern rtx_insn *gen_split_1520 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1520 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1520 (sse.md:10336)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 10352 "../../gcc/config/i386/sse.md"
operands[4] = gen_reg_rtx (HImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand4,
	gen_rtx_NOT (HImode,
	operand1)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16QImode,
	operand3,
	operand2,
	copy_rtx (operand4))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:10367 */
rtx
gen_extendv2sfv2df2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 10372 "../../gcc/config/i386/sse.md"
{
  if (!MEM_P (operands[1]))
    {
      operands[1] = lowpart_subreg (V4SFmode,
				    force_reg (V2SFmode, operands[1]),
				    V2SFmode);
      emit_insn (gen_sse2_cvtps2pd (operands[0], operands[1]));
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_FLOAT_EXTEND (V2DFmode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:10500 */
rtx
gen_vec_unpacks_float_lo_v8hi (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 10504 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V4SImode);

  emit_insn (gen_vec_unpacks_lo_v8hi (tmp, operands[1]));
  emit_insn (gen_rtx_SET (operands[0],
			  gen_rtx_FLOAT (V4SFmode, tmp)));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:10573 */
rtx
gen_vec_unpacks_float_lo_v8si (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FLOAT (V4DFmode,
	gen_rtx_VEC_SELECT (V4SImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)])))));
}

/* ../../gcc/config/i386/sse.md:10596 */
rtx
gen_vec_unpacks_float_lo_v16si (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (operand0,
	gen_rtx_FLOAT (V8DFmode,
	gen_rtx_VEC_SELECT (V8SImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)])))));
}

/* ../../gcc/config/i386/sse.md:10770 */
rtx
gen_vec_pack_trunc_v8df (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 10782 "../../gcc/config/i386/sse.md"
{
  operands[3] = gen_reg_rtx (V8SFmode);
  operands[4] = gen_reg_rtx (V8SFmode);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand3,
	gen_rtx_FLOAT_TRUNCATE (V8SFmode,
	operand1)));
  emit_insn (gen_rtx_SET (operand4,
	gen_rtx_FLOAT_TRUNCATE (V8SFmode,
	operand2)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V16SFmode,
	copy_rtx (operand3),
	copy_rtx (operand4))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:10874 */
rtx
gen_vec_pack_sfix_trunc_v2df (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 10879 "../../gcc/config/i386/sse.md"
{
  rtx tmp0, tmp1, tmp2;

  if (TARGET_AVX && !TARGET_PREFER_AVX128 && optimize_insn_for_speed_p ())
    {
      tmp0 = gen_reg_rtx (V4DFmode);
      tmp1 = force_reg (V2DFmode, operands[1]);

      emit_insn (gen_avx_vec_concatv4df (tmp0, tmp1, operands[2]));
      emit_insn (gen_fix_truncv4dfv4si2 (operands[0], tmp0));
    }
  else
    {
      tmp0 = gen_reg_rtx (V4SImode);
      tmp1 = gen_reg_rtx (V4SImode);
      tmp2 = gen_reg_rtx (V2DImode);

      emit_insn (gen_sse2_cvttpd2dq (tmp0, operands[1]));
      emit_insn (gen_sse2_cvttpd2dq (tmp1, operands[2]));
      emit_insn (gen_vec_interleave_lowv2di (tmp2,
					     gen_lowpart (V2DImode, tmp0),
					     gen_lowpart (V2DImode, tmp1)));
      emit_move_insn (operands[0], gen_lowpart (V4SImode, tmp2));
    }
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:11280 */
rtx
gen_vec_interleave_lowv8sf (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 11309 "../../gcc/config/i386/sse.md"
{
  operands[3] = gen_reg_rtx (V8SFmode);
  operands[4] = gen_reg_rtx (V8SFmode);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand3,
	gen_rtx_VEC_SELECT (V8SFmode,
	gen_rtx_VEC_CONCAT (V16SFmode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (9)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (12)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (13)])))));
  emit_insn (gen_rtx_SET (operand4,
	gen_rtx_VEC_SELECT (V8SFmode,
	gen_rtx_VEC_CONCAT (V16SFmode,
	copy_rtx (operand1),
	copy_rtx (operand2)),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (10)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (11)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (14)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)],
		const_int_rtx[MAX_SAVED_CONST_INT + (15)])))));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_SELECT (V8SFmode,
	gen_rtx_VEC_CONCAT (V16SFmode,
	copy_rtx (operand3),
	copy_rtx (operand4)),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (9)],
		const_int_rtx[MAX_SAVED_CONST_INT + (10)],
		const_int_rtx[MAX_SAVED_CONST_INT + (11)])))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:12183 */
extern rtx_insn *gen_split_1541 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1541 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1541 (sse.md:12183)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 12195 "../../gcc/config/i386/sse.md"
{
  rtx dest = gen_reg_rtx (V8SImode);
  emit_insn (gen_vec_setv8si_0 (dest,
					      CONST0_RTX (V8SImode),
					      operands[1]));
  emit_move_insn (operands[0],
		  lowpart_subreg (V4DImode, dest, V8SImode));
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:12290 */
rtx
gen_vec_setv2di (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"vec_setv2di cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 12295 "../../gcc/config/i386/sse.md"
{
  if (CONST_INT_P (operands[2]))
    ix86_expand_vector_set (false, operands[0], operands[1],
			    INTVAL (operands[2]));
  else
    ix86_expand_vector_set_var (operands[0], operands[1], operands[2]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:12304 */
rtx
gen_vec_setv4df (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"vec_setv4df cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 12309 "../../gcc/config/i386/sse.md"
{
  if (CONST_INT_P (operands[2]))
    ix86_expand_vector_set (false, operands[0], operands[1],
			    INTVAL (operands[2]));
  else
    ix86_expand_vector_set_var (operands[0], operands[1], operands[2]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:12329 */
extern rtx_insn *gen_split_1547 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1547 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1547 (sse.md:12329)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 12343 "../../gcc/config/i386/sse.md"
{
  rtx dest = lowpart_subreg (V4SFmode, operands[0], SFmode);
  switch (INTVAL (operands[2]))
    {
    case 1:
    case 3:
      emit_insn (gen_sse_shufps_v4sf (dest, operands[1], operands[1],
				      operands[2], operands[2],
				      GEN_INT (INTVAL (operands[2]) + 4),
				      GEN_INT (INTVAL (operands[2]) + 4)));
      break;
    case 2:
      emit_insn (gen_vec_interleave_highv4sf (dest, operands[1], operands[1]));
      break;
    default:
      /* 0 should be handled by the *vec_extractv4sf_0 pattern above.  */
      gcc_unreachable ();
    }
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:12568 */
rtx
gen_avx512dq_vextracti32x8_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 12575 "../../gcc/config/i386/sse.md"
{
  rtx (*insn)(rtx, rtx, rtx, rtx);
  rtx dest = operands[0];

  if (MEM_P (dest) && !rtx_equal_p (dest, operands[3]))
    dest = gen_reg_rtx (V8SImode);

  switch (INTVAL (operands[2]))
    {
    case 0:
      insn = gen_vec_extract_lo_v16si_mask;
      break;
    case 1:
      insn = gen_vec_extract_hi_v16si_mask;
      break;
    default:
      gcc_unreachable ();
    }

  emit_insn (insn (dest, operands[1], operands[3], operands[4]));
  if (dest != operands[0])
    emit_move_insn (operands[0], dest);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:12760 */
rtx
gen_avx_vextractf128v4di (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 12765 "../../gcc/config/i386/sse.md"
{
  rtx (*insn)(rtx, rtx);

  switch (INTVAL (operands[2]))
    {
    case 0:
      insn = gen_vec_extract_lo_v4di;
      break;
    case 1:
      insn = gen_vec_extract_hi_v4di;
      break;
    default:
      gcc_unreachable ();
    }

  emit_insn (insn (operands[0], operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:12936 */
extern rtx_insn *gen_split_1559 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1559 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1559 (sse.md:12936)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 12945 "../../gcc/config/i386/sse.md"
operands[1] = gen_lowpart (V4SImode, operands[1]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13183 */
extern rtx_insn *gen_split_1568 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1568 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1568 (sse.md:13183)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13199 "../../gcc/config/i386/sse.md"
operands[1] = gen_lowpart (V16QImode, operands[1]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13284 */
rtx
gen_vec_extractv16qiqi (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"vec_extractv16qiqi cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13289 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_extract (false, operands[0], operands[1],
			      INTVAL (operands[2]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13284 */
rtx
gen_vec_extractv32hfhf (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"vec_extractv32hfhf cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13289 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_extract (false, operands[0], operands[1],
			      INTVAL (operands[2]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13284 */
rtx
gen_vec_extractv4dfdf (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"vec_extractv4dfdf cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13289 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_extract (false, operands[0], operands[1],
			      INTVAL (operands[2]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13295 */
rtx
gen_vec_extractv8sfv4sf (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL _Pragma ("GCC error \"vec_extractv8sfv4sf cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13300 "../../gcc/config/i386/sse.md"
{
  if (INTVAL (operands[2]))
    emit_insn (gen_vec_extract_hi_v8sf (operands[0], operands[1]));
  else
    emit_insn (gen_vec_extract_lo_v8sf (operands[0], operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13345 */
rtx
gen_vec_interleave_highv4df (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13368 "../../gcc/config/i386/sse.md"
{
  operands[3] = gen_reg_rtx (V4DFmode);
  operands[4] = gen_reg_rtx (V4DFmode);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand3,
	gen_rtx_VEC_SELECT (V4DFmode,
	gen_rtx_VEC_CONCAT (V8DFmode,
	operand1,
	operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)])))));
  emit_insn (gen_rtx_SET (operand4,
	gen_rtx_VEC_SELECT (V4DFmode,
	gen_rtx_VEC_CONCAT (V8DFmode,
	copy_rtx (operand1),
	copy_rtx (operand2)),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)])))));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_SELECT (V4DFmode,
	gen_rtx_VEC_CONCAT (V8DFmode,
	copy_rtx (operand3),
	copy_rtx (operand4)),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)])))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13691 */
extern rtx_insn *gen_split_1579 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1579 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1579 (sse.md:13691)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	operand3));
  emit_insn (gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (4,
		copy_rtx (operand0),
		copy_rtx (operand0),
		copy_rtx (operand0),
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13691 */
extern rtx_insn *gen_split_1589 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1589 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1589 (sse.md:13691)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	operand3));
  emit_insn (gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (4,
		copy_rtx (operand0),
		copy_rtx (operand0),
		copy_rtx (operand0),
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13691 */
extern rtx_insn *gen_split_1599 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1599 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1599 (sse.md:13691)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	operand3));
  emit_insn (gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (4,
		copy_rtx (operand0),
		copy_rtx (operand0),
		copy_rtx (operand0),
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13712 */
extern rtx_insn *gen_split_1609 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1609 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1609 (sse.md:13712)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13728 "../../gcc/config/i386/sse.md"
substitute_vpternlog_operands (operands);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (4,
		operand1,
		operand2,
		operand3,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13712 */
extern rtx_insn *gen_split_1619 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1619 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1619 (sse.md:13712)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13728 "../../gcc/config/i386/sse.md"
substitute_vpternlog_operands (operands);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (4,
		operand1,
		operand2,
		operand3,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13744 */
extern rtx_insn *gen_split_1629 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1629 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1629 (sse.md:13744)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13753 "../../gcc/config/i386/sse.md"
{
  rtx args[3];
  args[0] = NULL_RTX;
  args[1] = NULL_RTX;
  args[2] = NULL_RTX;
  int idx = ix86_ternlog_idx (operands[1], args);
  ix86_expand_ternlog (V16HImode, args[0], args[1], args[2], idx,
		       operands[0]);
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13744 */
extern rtx_insn *gen_split_1640 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1640 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1640 (sse.md:13744)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13753 "../../gcc/config/i386/sse.md"
{
  rtx args[3];
  args[0] = NULL_RTX;
  args[1] = NULL_RTX;
  args[2] = NULL_RTX;
  int idx = ix86_ternlog_idx (operands[1], args);
  ix86_expand_ternlog (V32BFmode, args[0], args[1], args[2], idx,
		       operands[0]);
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1650 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1650 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1650 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V64QImode))
     operands[2] = force_reg (V64QImode, operands[2]);
  if (!register_operand (operands[6], V64QImode))
     operands[6] = force_reg (V64QImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V64QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1660 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1660 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1660 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V64QImode))
     operands[2] = force_reg (V64QImode, operands[2]);
  if (!register_operand (operands[6], V64QImode))
     operands[6] = force_reg (V64QImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V64QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1670 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1670 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1670 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V64QImode))
     operands[2] = force_reg (V64QImode, operands[2]);
  if (!register_operand (operands[6], V64QImode))
     operands[6] = force_reg (V64QImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V64QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1680 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1680 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1680 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V32QImode))
     operands[2] = force_reg (V32QImode, operands[2]);
  if (!register_operand (operands[6], V32QImode))
     operands[6] = force_reg (V32QImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1690 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1690 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1690 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V32QImode))
     operands[2] = force_reg (V32QImode, operands[2]);
  if (!register_operand (operands[6], V32QImode))
     operands[6] = force_reg (V32QImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1700 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1700 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1700 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V32QImode))
     operands[2] = force_reg (V32QImode, operands[2]);
  if (!register_operand (operands[6], V32QImode))
     operands[6] = force_reg (V32QImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1710 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1710 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1710 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16QImode))
     operands[2] = force_reg (V16QImode, operands[2]);
  if (!register_operand (operands[6], V16QImode))
     operands[6] = force_reg (V16QImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1720 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1720 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1720 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16QImode))
     operands[2] = force_reg (V16QImode, operands[2]);
  if (!register_operand (operands[6], V16QImode))
     operands[6] = force_reg (V16QImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1730 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1730 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1730 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V32HImode))
     operands[2] = force_reg (V32HImode, operands[2]);
  if (!register_operand (operands[6], V32HImode))
     operands[6] = force_reg (V32HImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1740 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1740 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1740 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V32HImode))
     operands[2] = force_reg (V32HImode, operands[2]);
  if (!register_operand (operands[6], V32HImode))
     operands[6] = force_reg (V32HImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1750 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1750 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1750 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V32HImode))
     operands[2] = force_reg (V32HImode, operands[2]);
  if (!register_operand (operands[6], V32HImode))
     operands[6] = force_reg (V32HImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1760 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1760 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1760 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16HImode))
     operands[2] = force_reg (V16HImode, operands[2]);
  if (!register_operand (operands[6], V16HImode))
     operands[6] = force_reg (V16HImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1770 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1770 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1770 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16HImode))
     operands[2] = force_reg (V16HImode, operands[2]);
  if (!register_operand (operands[6], V16HImode))
     operands[6] = force_reg (V16HImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1780 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1780 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1780 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16HImode))
     operands[2] = force_reg (V16HImode, operands[2]);
  if (!register_operand (operands[6], V16HImode))
     operands[6] = force_reg (V16HImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1790 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1790 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1790 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8HImode))
     operands[2] = force_reg (V8HImode, operands[2]);
  if (!register_operand (operands[6], V8HImode))
     operands[6] = force_reg (V8HImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1800 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1800 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1800 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8HImode))
     operands[2] = force_reg (V8HImode, operands[2]);
  if (!register_operand (operands[6], V8HImode))
     operands[6] = force_reg (V8HImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1810 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1810 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1810 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8HImode))
     operands[2] = force_reg (V8HImode, operands[2]);
  if (!register_operand (operands[6], V8HImode))
     operands[6] = force_reg (V8HImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1820 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1820 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1820 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16SImode))
     operands[2] = force_reg (V16SImode, operands[2]);
  if (!register_operand (operands[6], V16SImode))
     operands[6] = force_reg (V16SImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1830 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1830 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1830 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16SImode))
     operands[2] = force_reg (V16SImode, operands[2]);
  if (!register_operand (operands[6], V16SImode))
     operands[6] = force_reg (V16SImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1840 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1840 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1840 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8SImode))
     operands[2] = force_reg (V8SImode, operands[2]);
  if (!register_operand (operands[6], V8SImode))
     operands[6] = force_reg (V8SImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1850 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1850 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1850 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8SImode))
     operands[2] = force_reg (V8SImode, operands[2]);
  if (!register_operand (operands[6], V8SImode))
     operands[6] = force_reg (V8SImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1860 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1860 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1860 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8SImode))
     operands[2] = force_reg (V8SImode, operands[2]);
  if (!register_operand (operands[6], V8SImode))
     operands[6] = force_reg (V8SImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1870 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1870 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1870 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V4SImode))
     operands[2] = force_reg (V4SImode, operands[2]);
  if (!register_operand (operands[6], V4SImode))
     operands[6] = force_reg (V4SImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1880 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1880 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1880 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V4SImode))
     operands[2] = force_reg (V4SImode, operands[2]);
  if (!register_operand (operands[6], V4SImode))
     operands[6] = force_reg (V4SImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1890 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1890 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1890 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V4SImode))
     operands[2] = force_reg (V4SImode, operands[2]);
  if (!register_operand (operands[6], V4SImode))
     operands[6] = force_reg (V4SImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1900 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1900 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1900 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8DImode))
     operands[2] = force_reg (V8DImode, operands[2]);
  if (!register_operand (operands[6], V8DImode))
     operands[6] = force_reg (V8DImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1910 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1910 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1910 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8DImode))
     operands[2] = force_reg (V8DImode, operands[2]);
  if (!register_operand (operands[6], V8DImode))
     operands[6] = force_reg (V8DImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1920 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1920 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1920 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V4DImode))
     operands[2] = force_reg (V4DImode, operands[2]);
  if (!register_operand (operands[6], V4DImode))
     operands[6] = force_reg (V4DImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1930 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1930 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1930 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V4DImode))
     operands[2] = force_reg (V4DImode, operands[2]);
  if (!register_operand (operands[6], V4DImode))
     operands[6] = force_reg (V4DImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1940 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1940 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1940 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V4DImode))
     operands[2] = force_reg (V4DImode, operands[2]);
  if (!register_operand (operands[6], V4DImode))
     operands[6] = force_reg (V4DImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1950 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1950 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1950 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V2DImode))
     operands[2] = force_reg (V2DImode, operands[2]);
  if (!register_operand (operands[6], V2DImode))
     operands[6] = force_reg (V2DImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1960 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1960 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1960 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V2DImode))
     operands[2] = force_reg (V2DImode, operands[2]);
  if (!register_operand (operands[6], V2DImode))
     operands[6] = force_reg (V2DImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1970 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1970 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1970 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V2DImode))
     operands[2] = force_reg (V2DImode, operands[2]);
  if (!register_operand (operands[6], V2DImode))
     operands[6] = force_reg (V2DImode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1980 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1980 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1980 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V32HFmode))
     operands[2] = force_reg (V32HFmode, operands[2]);
  if (!register_operand (operands[6], V32HFmode))
     operands[6] = force_reg (V32HFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_1990 (rtx_insn *, rtx *);
rtx_insn *
gen_split_1990 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_1990 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V32HFmode))
     operands[2] = force_reg (V32HFmode, operands[2]);
  if (!register_operand (operands[6], V32HFmode))
     operands[6] = force_reg (V32HFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2000 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2000 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2000 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16HFmode))
     operands[2] = force_reg (V16HFmode, operands[2]);
  if (!register_operand (operands[6], V16HFmode))
     operands[6] = force_reg (V16HFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2010 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2010 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2010 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16HFmode))
     operands[2] = force_reg (V16HFmode, operands[2]);
  if (!register_operand (operands[6], V16HFmode))
     operands[6] = force_reg (V16HFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2020 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2020 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2020 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16HFmode))
     operands[2] = force_reg (V16HFmode, operands[2]);
  if (!register_operand (operands[6], V16HFmode))
     operands[6] = force_reg (V16HFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2030 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2030 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2030 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8HFmode))
     operands[2] = force_reg (V8HFmode, operands[2]);
  if (!register_operand (operands[6], V8HFmode))
     operands[6] = force_reg (V8HFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2040 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2040 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2040 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8HFmode))
     operands[2] = force_reg (V8HFmode, operands[2]);
  if (!register_operand (operands[6], V8HFmode))
     operands[6] = force_reg (V8HFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2050 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2050 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2050 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8HFmode))
     operands[2] = force_reg (V8HFmode, operands[2]);
  if (!register_operand (operands[6], V8HFmode))
     operands[6] = force_reg (V8HFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2060 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2060 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2060 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V32BFmode))
     operands[2] = force_reg (V32BFmode, operands[2]);
  if (!register_operand (operands[6], V32BFmode))
     operands[6] = force_reg (V32BFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2070 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2070 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2070 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V32BFmode))
     operands[2] = force_reg (V32BFmode, operands[2]);
  if (!register_operand (operands[6], V32BFmode))
     operands[6] = force_reg (V32BFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2080 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2080 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2080 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V32BFmode))
     operands[2] = force_reg (V32BFmode, operands[2]);
  if (!register_operand (operands[6], V32BFmode))
     operands[6] = force_reg (V32BFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2090 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2090 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2090 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16BFmode))
     operands[2] = force_reg (V16BFmode, operands[2]);
  if (!register_operand (operands[6], V16BFmode))
     operands[6] = force_reg (V16BFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2100 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2100 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2100 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16BFmode))
     operands[2] = force_reg (V16BFmode, operands[2]);
  if (!register_operand (operands[6], V16BFmode))
     operands[6] = force_reg (V16BFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2110 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2110 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2110 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8BFmode))
     operands[2] = force_reg (V8BFmode, operands[2]);
  if (!register_operand (operands[6], V8BFmode))
     operands[6] = force_reg (V8BFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2120 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2120 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2120 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8BFmode))
     operands[2] = force_reg (V8BFmode, operands[2]);
  if (!register_operand (operands[6], V8BFmode))
     operands[6] = force_reg (V8BFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2130 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2130 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2130 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8BFmode))
     operands[2] = force_reg (V8BFmode, operands[2]);
  if (!register_operand (operands[6], V8BFmode))
     operands[6] = force_reg (V8BFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2140 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2140 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2140 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16SFmode))
     operands[2] = force_reg (V16SFmode, operands[2]);
  if (!register_operand (operands[6], V16SFmode))
     operands[6] = force_reg (V16SFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2150 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2150 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2150 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16SFmode))
     operands[2] = force_reg (V16SFmode, operands[2]);
  if (!register_operand (operands[6], V16SFmode))
     operands[6] = force_reg (V16SFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2160 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2160 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2160 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V16SFmode))
     operands[2] = force_reg (V16SFmode, operands[2]);
  if (!register_operand (operands[6], V16SFmode))
     operands[6] = force_reg (V16SFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2170 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2170 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2170 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8SFmode))
     operands[2] = force_reg (V8SFmode, operands[2]);
  if (!register_operand (operands[6], V8SFmode))
     operands[6] = force_reg (V8SFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2180 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2180 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2180 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8SFmode))
     operands[2] = force_reg (V8SFmode, operands[2]);
  if (!register_operand (operands[6], V8SFmode))
     operands[6] = force_reg (V8SFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2190 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2190 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2190 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V4SFmode))
     operands[2] = force_reg (V4SFmode, operands[2]);
  if (!register_operand (operands[6], V4SFmode))
     operands[6] = force_reg (V4SFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2200 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2200 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2200 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V4SFmode))
     operands[2] = force_reg (V4SFmode, operands[2]);
  if (!register_operand (operands[6], V4SFmode))
     operands[6] = force_reg (V4SFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2210 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2210 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2210 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V4SFmode))
     operands[2] = force_reg (V4SFmode, operands[2]);
  if (!register_operand (operands[6], V4SFmode))
     operands[6] = force_reg (V4SFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2220 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2220 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2220 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8DFmode))
     operands[2] = force_reg (V8DFmode, operands[2]);
  if (!register_operand (operands[6], V8DFmode))
     operands[6] = force_reg (V8DFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2230 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2230 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2230 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 | reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8DFmode))
     operands[2] = force_reg (V8DFmode, operands[2]);
  if (!register_operand (operands[6], V8DFmode))
     operands[6] = force_reg (V8DFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2240 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2240 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2240 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V8DFmode))
     operands[2] = force_reg (V8DFmode, operands[2]);
  if (!register_operand (operands[6], V8DFmode))
     operands[6] = force_reg (V8DFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2250 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2250 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2250 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V4DFmode))
     operands[2] = force_reg (V4DFmode, operands[2]);
  if (!register_operand (operands[6], V4DFmode))
     operands[6] = force_reg (V4DFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2260 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2260 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2260 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 ^ reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V4DFmode))
     operands[2] = force_reg (V4DFmode, operands[2]);
  if (!register_operand (operands[6], V4DFmode))
     operands[6] = force_reg (V4DFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2270 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2270 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2270 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  & tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V2DFmode))
     operands[2] = force_reg (V2DFmode, operands[2]);
  if (!register_operand (operands[6], V2DFmode))
     operands[6] = force_reg (V2DFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2280 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2280 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2280 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  | tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V2DFmode))
     operands[2] = force_reg (V2DFmode, operands[2]);
  if (!register_operand (operands[6], V2DFmode))
     operands[6] = force_reg (V2DFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13768 */
extern rtx_insn *gen_split_2290 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2290 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2290 (sse.md:13768)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13797 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = reg3 & reg4;
  reg_mask = tmp1  ^ tmp2;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  if (!register_operand (operands[2], V2DFmode))
     operands[2] = force_reg (V2DFmode, operands[2]);
  if (!register_operand (operands[6], V2DFmode))
     operands[6] = force_reg (V2DFmode, operands[6]);
  operands[5] = GEN_INT (reg_mask);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2300 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2300 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2300 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V64QImode))
    operands[2] = force_reg (V64QImode, operands[2]);
  if (!register_operand (operands[6], V64QImode))
    operands[6] = force_reg (V64QImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V64QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2310 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2310 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2310 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V64QImode))
    operands[2] = force_reg (V64QImode, operands[2]);
  if (!register_operand (operands[6], V64QImode))
    operands[6] = force_reg (V64QImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V64QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2320 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2320 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2320 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V64QImode))
    operands[2] = force_reg (V64QImode, operands[2]);
  if (!register_operand (operands[6], V64QImode))
    operands[6] = force_reg (V64QImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V64QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2330 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2330 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2330 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V32QImode))
    operands[2] = force_reg (V32QImode, operands[2]);
  if (!register_operand (operands[6], V32QImode))
    operands[6] = force_reg (V32QImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2340 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2340 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2340 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V32QImode))
    operands[2] = force_reg (V32QImode, operands[2]);
  if (!register_operand (operands[6], V32QImode))
    operands[6] = force_reg (V32QImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2350 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2350 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2350 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V32QImode))
    operands[2] = force_reg (V32QImode, operands[2]);
  if (!register_operand (operands[6], V32QImode))
    operands[6] = force_reg (V32QImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2360 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2360 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2360 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16QImode))
    operands[2] = force_reg (V16QImode, operands[2]);
  if (!register_operand (operands[6], V16QImode))
    operands[6] = force_reg (V16QImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2370 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2370 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2370 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16QImode))
    operands[2] = force_reg (V16QImode, operands[2]);
  if (!register_operand (operands[6], V16QImode))
    operands[6] = force_reg (V16QImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2380 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2380 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2380 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V32HImode))
    operands[2] = force_reg (V32HImode, operands[2]);
  if (!register_operand (operands[6], V32HImode))
    operands[6] = force_reg (V32HImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2390 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2390 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2390 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V32HImode))
    operands[2] = force_reg (V32HImode, operands[2]);
  if (!register_operand (operands[6], V32HImode))
    operands[6] = force_reg (V32HImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2400 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2400 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2400 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V32HImode))
    operands[2] = force_reg (V32HImode, operands[2]);
  if (!register_operand (operands[6], V32HImode))
    operands[6] = force_reg (V32HImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2410 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2410 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2410 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16HImode))
    operands[2] = force_reg (V16HImode, operands[2]);
  if (!register_operand (operands[6], V16HImode))
    operands[6] = force_reg (V16HImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2420 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2420 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2420 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16HImode))
    operands[2] = force_reg (V16HImode, operands[2]);
  if (!register_operand (operands[6], V16HImode))
    operands[6] = force_reg (V16HImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2430 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2430 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2430 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16HImode))
    operands[2] = force_reg (V16HImode, operands[2]);
  if (!register_operand (operands[6], V16HImode))
    operands[6] = force_reg (V16HImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2440 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2440 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2440 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8HImode))
    operands[2] = force_reg (V8HImode, operands[2]);
  if (!register_operand (operands[6], V8HImode))
    operands[6] = force_reg (V8HImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2450 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2450 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2450 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8HImode))
    operands[2] = force_reg (V8HImode, operands[2]);
  if (!register_operand (operands[6], V8HImode))
    operands[6] = force_reg (V8HImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2460 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2460 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2460 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16SImode))
    operands[2] = force_reg (V16SImode, operands[2]);
  if (!register_operand (operands[6], V16SImode))
    operands[6] = force_reg (V16SImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2470 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2470 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2470 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16SImode))
    operands[2] = force_reg (V16SImode, operands[2]);
  if (!register_operand (operands[6], V16SImode))
    operands[6] = force_reg (V16SImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2480 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2480 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2480 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16SImode))
    operands[2] = force_reg (V16SImode, operands[2]);
  if (!register_operand (operands[6], V16SImode))
    operands[6] = force_reg (V16SImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2490 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2490 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2490 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8SImode))
    operands[2] = force_reg (V8SImode, operands[2]);
  if (!register_operand (operands[6], V8SImode))
    operands[6] = force_reg (V8SImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2500 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2500 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2500 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8SImode))
    operands[2] = force_reg (V8SImode, operands[2]);
  if (!register_operand (operands[6], V8SImode))
    operands[6] = force_reg (V8SImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2510 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2510 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2510 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8SImode))
    operands[2] = force_reg (V8SImode, operands[2]);
  if (!register_operand (operands[6], V8SImode))
    operands[6] = force_reg (V8SImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2520 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2520 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2520 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V4SImode))
    operands[2] = force_reg (V4SImode, operands[2]);
  if (!register_operand (operands[6], V4SImode))
    operands[6] = force_reg (V4SImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2530 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2530 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2530 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V4SImode))
    operands[2] = force_reg (V4SImode, operands[2]);
  if (!register_operand (operands[6], V4SImode))
    operands[6] = force_reg (V4SImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2540 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2540 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2540 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8DImode))
    operands[2] = force_reg (V8DImode, operands[2]);
  if (!register_operand (operands[6], V8DImode))
    operands[6] = force_reg (V8DImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2550 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2550 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2550 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8DImode))
    operands[2] = force_reg (V8DImode, operands[2]);
  if (!register_operand (operands[6], V8DImode))
    operands[6] = force_reg (V8DImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2560 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2560 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2560 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8DImode))
    operands[2] = force_reg (V8DImode, operands[2]);
  if (!register_operand (operands[6], V8DImode))
    operands[6] = force_reg (V8DImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2570 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2570 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2570 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V4DImode))
    operands[2] = force_reg (V4DImode, operands[2]);
  if (!register_operand (operands[6], V4DImode))
    operands[6] = force_reg (V4DImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2580 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2580 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2580 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V4DImode))
    operands[2] = force_reg (V4DImode, operands[2]);
  if (!register_operand (operands[6], V4DImode))
    operands[6] = force_reg (V4DImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2590 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2590 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2590 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V4DImode))
    operands[2] = force_reg (V4DImode, operands[2]);
  if (!register_operand (operands[6], V4DImode))
    operands[6] = force_reg (V4DImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2600 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2600 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2600 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V2DImode))
    operands[2] = force_reg (V2DImode, operands[2]);
  if (!register_operand (operands[6], V2DImode))
    operands[6] = force_reg (V2DImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2610 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2610 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2610 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V2DImode))
    operands[2] = force_reg (V2DImode, operands[2]);
  if (!register_operand (operands[6], V2DImode))
    operands[6] = force_reg (V2DImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2620 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2620 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2620 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V2DImode))
    operands[2] = force_reg (V2DImode, operands[2]);
  if (!register_operand (operands[6], V2DImode))
    operands[6] = force_reg (V2DImode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DImode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2630 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2630 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2630 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V32HFmode))
    operands[2] = force_reg (V32HFmode, operands[2]);
  if (!register_operand (operands[6], V32HFmode))
    operands[6] = force_reg (V32HFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2640 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2640 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2640 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V32HFmode))
    operands[2] = force_reg (V32HFmode, operands[2]);
  if (!register_operand (operands[6], V32HFmode))
    operands[6] = force_reg (V32HFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2650 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2650 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2650 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16HFmode))
    operands[2] = force_reg (V16HFmode, operands[2]);
  if (!register_operand (operands[6], V16HFmode))
    operands[6] = force_reg (V16HFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2660 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2660 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2660 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16HFmode))
    operands[2] = force_reg (V16HFmode, operands[2]);
  if (!register_operand (operands[6], V16HFmode))
    operands[6] = force_reg (V16HFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2670 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2670 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2670 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16HFmode))
    operands[2] = force_reg (V16HFmode, operands[2]);
  if (!register_operand (operands[6], V16HFmode))
    operands[6] = force_reg (V16HFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2680 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2680 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2680 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8HFmode))
    operands[2] = force_reg (V8HFmode, operands[2]);
  if (!register_operand (operands[6], V8HFmode))
    operands[6] = force_reg (V8HFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2690 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2690 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2690 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8HFmode))
    operands[2] = force_reg (V8HFmode, operands[2]);
  if (!register_operand (operands[6], V8HFmode))
    operands[6] = force_reg (V8HFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2700 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2700 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2700 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8HFmode))
    operands[2] = force_reg (V8HFmode, operands[2]);
  if (!register_operand (operands[6], V8HFmode))
    operands[6] = force_reg (V8HFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2710 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2710 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2710 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V32BFmode))
    operands[2] = force_reg (V32BFmode, operands[2]);
  if (!register_operand (operands[6], V32BFmode))
    operands[6] = force_reg (V32BFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2720 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2720 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2720 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V32BFmode))
    operands[2] = force_reg (V32BFmode, operands[2]);
  if (!register_operand (operands[6], V32BFmode))
    operands[6] = force_reg (V32BFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2730 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2730 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2730 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16BFmode))
    operands[2] = force_reg (V16BFmode, operands[2]);
  if (!register_operand (operands[6], V16BFmode))
    operands[6] = force_reg (V16BFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2740 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2740 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2740 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16BFmode))
    operands[2] = force_reg (V16BFmode, operands[2]);
  if (!register_operand (operands[6], V16BFmode))
    operands[6] = force_reg (V16BFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2750 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2750 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2750 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16BFmode))
    operands[2] = force_reg (V16BFmode, operands[2]);
  if (!register_operand (operands[6], V16BFmode))
    operands[6] = force_reg (V16BFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2760 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2760 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2760 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8BFmode))
    operands[2] = force_reg (V8BFmode, operands[2]);
  if (!register_operand (operands[6], V8BFmode))
    operands[6] = force_reg (V8BFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2770 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2770 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2770 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8BFmode))
    operands[2] = force_reg (V8BFmode, operands[2]);
  if (!register_operand (operands[6], V8BFmode))
    operands[6] = force_reg (V8BFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2780 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2780 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2780 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8BFmode))
    operands[2] = force_reg (V8BFmode, operands[2]);
  if (!register_operand (operands[6], V8BFmode))
    operands[6] = force_reg (V8BFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8BFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2790 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2790 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2790 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16SFmode))
    operands[2] = force_reg (V16SFmode, operands[2]);
  if (!register_operand (operands[6], V16SFmode))
    operands[6] = force_reg (V16SFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2800 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2800 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2800 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16SFmode))
    operands[2] = force_reg (V16SFmode, operands[2]);
  if (!register_operand (operands[6], V16SFmode))
    operands[6] = force_reg (V16SFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2810 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2810 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2810 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8SFmode))
    operands[2] = force_reg (V8SFmode, operands[2]);
  if (!register_operand (operands[6], V8SFmode))
    operands[6] = force_reg (V8SFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2819 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2819 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2819 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8SFmode))
    operands[2] = force_reg (V8SFmode, operands[2]);
  if (!register_operand (operands[6], V8SFmode))
    operands[6] = force_reg (V8SFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2829 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2829 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2829 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8SFmode))
    operands[2] = force_reg (V8SFmode, operands[2]);
  if (!register_operand (operands[6], V8SFmode))
    operands[6] = force_reg (V8SFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2839 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2839 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2839 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V4SFmode))
    operands[2] = force_reg (V4SFmode, operands[2]);
  if (!register_operand (operands[6], V4SFmode))
    operands[6] = force_reg (V4SFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2849 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2849 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2849 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V4SFmode))
    operands[2] = force_reg (V4SFmode, operands[2]);
  if (!register_operand (operands[6], V4SFmode))
    operands[6] = force_reg (V4SFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2859 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2859 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2859 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V4SFmode))
    operands[2] = force_reg (V4SFmode, operands[2]);
  if (!register_operand (operands[6], V4SFmode))
    operands[6] = force_reg (V4SFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2869 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2869 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2869 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8DFmode))
    operands[2] = force_reg (V8DFmode, operands[2]);
  if (!register_operand (operands[6], V8DFmode))
    operands[6] = force_reg (V8DFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2879 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2879 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2879 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8DFmode))
    operands[2] = force_reg (V8DFmode, operands[2]);
  if (!register_operand (operands[6], V8DFmode))
    operands[6] = force_reg (V8DFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2889 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2889 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2889 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8DFmode))
    operands[2] = force_reg (V8DFmode, operands[2]);
  if (!register_operand (operands[6], V8DFmode))
    operands[6] = force_reg (V8DFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2899 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2899 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2899 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 ^ reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V4DFmode))
    operands[2] = force_reg (V4DFmode, operands[2]);
  if (!register_operand (operands[6], V4DFmode))
    operands[6] = force_reg (V4DFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2909 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2909 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2909 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V4DFmode))
    operands[2] = force_reg (V4DFmode, operands[2]);
  if (!register_operand (operands[6], V4DFmode))
    operands[6] = force_reg (V4DFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2919 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2919 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2919 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 & reg3;
  reg_mask = tmp2 | reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V2DFmode))
    operands[2] = force_reg (V2DFmode, operands[2]);
  if (!register_operand (operands[6], V2DFmode))
    operands[6] = force_reg (V2DFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2929 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2929 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2929 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 & reg2;
  tmp2 = tmp1 | reg3;
  reg_mask = tmp2 ^ reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V2DFmode))
    operands[2] = force_reg (V2DFmode, operands[2]);
  if (!register_operand (operands[6], V2DFmode))
    operands[6] = force_reg (V2DFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13853 */
extern rtx_insn *gen_split_2939 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2939 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2939 (sse.md:13853)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13882 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg6, reg2, reg1, imm8.  */
  int reg6 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg3 = 0;
  int reg4 = 0;
  int reg_mask, tmp1, tmp2;
  if (rtx_equal_p (STRIP_UNARY (operands[1]),
		   STRIP_UNARY (operands[4])))
    {
      reg4 = reg1;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[2]),
		       STRIP_UNARY (operands[4])))
    {
      reg4 = reg2;
      reg3 = reg6;
      operands[6] = operands[3];
    }
  else if (rtx_equal_p (STRIP_UNARY (operands[1]),
			STRIP_UNARY (operands[3])))
    {
      reg4 = reg6;
      reg3 = reg1;
      operands[6] = operands[4];
    }
  else
    {
      reg4 = reg6;
      reg3 = reg2;
      operands[6] = operands[4];
    }

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;
  reg4 = UNARY_P (operands[4]) ? ~reg4 : reg4;

  tmp1 = reg1 | reg2;
  tmp2 = tmp1 ^ reg3;
  reg_mask = tmp2 & reg4;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[6] = STRIP_UNARY (operands[6]);
  operands[5] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V2DFmode))
    operands[2] = force_reg (V2DFmode, operands[2]);
  if (!register_operand (operands[6], V2DFmode))
    operands[6] = force_reg (V2DFmode, operands[6]);

}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  operand6 = operands[6];
  (void) operand6;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (4,
		operand6,
		operand2,
		operand1,
		operand5),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_2953 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2953 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2953 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 ^ reg2;
  reg_mask = tmp1 ^ reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V64QImode))
    operands[2] = force_reg (V64QImode, operands[2]);
  if (!register_operand (operands[3], V64QImode))
    operands[3] = force_reg (V64QImode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V64QImode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_2963 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2963 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2963 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 & reg2;
  reg_mask = tmp1 & reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16QImode))
    operands[2] = force_reg (V16QImode, operands[2]);
  if (!register_operand (operands[3], V16QImode))
    operands[3] = force_reg (V16QImode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_2973 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2973 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2973 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 & reg2;
  reg_mask = tmp1 | reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V32HImode))
    operands[2] = force_reg (V32HImode, operands[2]);
  if (!register_operand (operands[3], V32HImode))
    operands[3] = force_reg (V32HImode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_2983 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2983 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2983 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 & reg2;
  reg_mask = tmp1 ^ reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16HImode))
    operands[2] = force_reg (V16HImode, operands[2]);
  if (!register_operand (operands[3], V16HImode))
    operands[3] = force_reg (V16HImode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_2993 (rtx_insn *, rtx *);
rtx_insn *
gen_split_2993 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_2993 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 | reg2;
  reg_mask = tmp1 & reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8HImode))
    operands[2] = force_reg (V8HImode, operands[2]);
  if (!register_operand (operands[3], V8HImode))
    operands[3] = force_reg (V8HImode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HImode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3003 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3003 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3003 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 | reg2;
  reg_mask = tmp1 | reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16SImode))
    operands[2] = force_reg (V16SImode, operands[2]);
  if (!register_operand (operands[3], V16SImode))
    operands[3] = force_reg (V16SImode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3013 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3013 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3013 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 | reg2;
  reg_mask = tmp1 ^ reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8SImode))
    operands[2] = force_reg (V8SImode, operands[2]);
  if (!register_operand (operands[3], V8SImode))
    operands[3] = force_reg (V8SImode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3023 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3023 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3023 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 ^ reg2;
  reg_mask = tmp1 & reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V4SImode))
    operands[2] = force_reg (V4SImode, operands[2]);
  if (!register_operand (operands[3], V4SImode))
    operands[3] = force_reg (V4SImode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3033 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3033 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3033 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 ^ reg2;
  reg_mask = tmp1 | reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8DImode))
    operands[2] = force_reg (V8DImode, operands[2]);
  if (!register_operand (operands[3], V8DImode))
    operands[3] = force_reg (V8DImode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DImode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3043 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3043 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3043 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 ^ reg2;
  reg_mask = tmp1 ^ reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V4DImode))
    operands[2] = force_reg (V4DImode, operands[2]);
  if (!register_operand (operands[3], V4DImode))
    operands[3] = force_reg (V4DImode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DImode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3053 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3053 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3053 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 & reg2;
  reg_mask = tmp1 & reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V32HFmode))
    operands[2] = force_reg (V32HFmode, operands[2]);
  if (!register_operand (operands[3], V32HFmode))
    operands[3] = force_reg (V32HFmode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3063 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3063 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3063 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 & reg2;
  reg_mask = tmp1 | reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16HFmode))
    operands[2] = force_reg (V16HFmode, operands[2]);
  if (!register_operand (operands[3], V16HFmode))
    operands[3] = force_reg (V16HFmode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3073 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3073 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3073 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 & reg2;
  reg_mask = tmp1 ^ reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8HFmode))
    operands[2] = force_reg (V8HFmode, operands[2]);
  if (!register_operand (operands[3], V8HFmode))
    operands[3] = force_reg (V8HFmode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3083 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3083 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3083 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 | reg2;
  reg_mask = tmp1 & reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V32BFmode))
    operands[2] = force_reg (V32BFmode, operands[2]);
  if (!register_operand (operands[3], V32BFmode))
    operands[3] = force_reg (V32BFmode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32BFmode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3093 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3093 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3093 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 | reg2;
  reg_mask = tmp1 | reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16BFmode))
    operands[2] = force_reg (V16BFmode, operands[2]);
  if (!register_operand (operands[3], V16BFmode))
    operands[3] = force_reg (V16BFmode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16BFmode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3103 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3103 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3103 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 | reg2;
  reg_mask = tmp1 ^ reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8BFmode))
    operands[2] = force_reg (V8BFmode, operands[2]);
  if (!register_operand (operands[3], V8BFmode))
    operands[3] = force_reg (V8BFmode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8BFmode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3113 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3113 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3113 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 ^ reg2;
  reg_mask = tmp1 & reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V16SFmode))
    operands[2] = force_reg (V16SFmode, operands[2]);
  if (!register_operand (operands[3], V16SFmode))
    operands[3] = force_reg (V16SFmode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3123 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3123 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3123 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 ^ reg2;
  reg_mask = tmp1 | reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V8SFmode))
    operands[2] = force_reg (V8SFmode, operands[2]);
  if (!register_operand (operands[3], V8SFmode))
    operands[3] = force_reg (V8SFmode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3133 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3133 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3133 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 ^ reg2;
  reg_mask = tmp1 ^ reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V4SFmode))
    operands[2] = force_reg (V4SFmode, operands[2]);
  if (!register_operand (operands[3], V4SFmode))
    operands[3] = force_reg (V4SFmode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3143 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3143 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3143 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 & reg2;
  reg_mask = tmp1 & reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V4DFmode))
    operands[2] = force_reg (V4DFmode, operands[2]);
  if (!register_operand (operands[3], V4DFmode))
    operands[3] = force_reg (V4DFmode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13939 */
extern rtx_insn *gen_split_3153 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3153 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3153 (sse.md:13939)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13958 "../../gcc/config/i386/sse.md"
{
  /* VPTERNLOGD reg3, reg2, reg1, imm8.  */
  int reg3 = 0xF0;
  int reg2 = 0xCC;
  int reg1 = 0xAA;
  int reg_mask, tmp1;

  reg1 = UNARY_P (operands[1]) ? ~reg1 : reg1;
  reg2 = UNARY_P (operands[2]) ? ~reg2 : reg2;
  reg3 = UNARY_P (operands[3]) ? ~reg3 : reg3;

  tmp1 = reg1 & reg2;
  reg_mask = tmp1 | reg3;
  reg_mask &= 0xFF;

  operands[1] = STRIP_UNARY (operands[1]);
  operands[2] = STRIP_UNARY (operands[2]);
  operands[3] = STRIP_UNARY (operands[3]);
  operands[4] = GEN_INT (reg_mask);
  if (!register_operand (operands[2], V2DFmode))
    operands[2] = force_reg (V2DFmode, operands[2]);
  if (!register_operand (operands[3], V2DFmode))
    operands[3] = force_reg (V2DFmode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (4,
		operand3,
		operand2,
		operand1,
		operand4),
	164)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:13984 */
rtx
gen_avx512vl_vternlogv4si_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 13996 "../../gcc/config/i386/sse.md"
{
  unsigned HOST_WIDE_INT mode_mask = GET_MODE_MASK (QImode);
  if (CONST_INT_P (operands[5])
      && (UINTVAL (operands[5]) & mode_mask) == mode_mask)
    {
      ix86_expand_ternlog (V4SImode, operands[1], operands[2],
			   operands[3], INTVAL (operands[4]),
			   operands[0]);
      DONE;
    }
  if (!register_operand (operands[5], QImode))
    operands[5] = force_reg (QImode, operands[5]);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (4,
		operand1,
		operand2,
		operand3,
		operand4),
	164),
	copy_rtx (operand1),
	operand5)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:14122 */
rtx
gen_avx512f_fixupimmv8df_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14130 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_avx512f_fixupimmv8df_maskz_1 (
	operands[0], operands[1], operands[2], operands[3],
	operands[4], CONST0_RTX (V8DFmode), operands[5]
	));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, true);
  emit (operand5, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:14167 */
rtx
gen_avx512f_sfixupimmv2df_maskz_round (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5,
	rtx operand6)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[7];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
    operands[6] = operand6;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14175 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_avx512f_sfixupimmv2df_maskz_1_round (
	operands[0], operands[1], operands[2], operands[3],
	operands[4], CONST0_RTX (V2DFmode), operands[5]
	, operands[6]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
    operand6 = operands[6];
    (void) operand6;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, true);
  emit (operand5, true);
  emit_insn (gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		operand6),
	178));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:14755 */
rtx
gen_sse2_loadlpd_exp (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 14763 "../../gcc/config/i386/sse.md"
{
  rtx dst = ix86_fixup_binary_operands (UNKNOWN, V2DFmode, operands);

  emit_insn (gen_sse2_loadlpd (dst, operands[1], operands[2]));

  /* Fix up the destination if needed.  */
  if (dst != operands[0])
    emit_move_insn (operands[0], dst);

  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V2DFmode,
	operand2,
	gen_rtx_VEC_SELECT (DFmode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (1,
		const1_rtx))))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:15142 */
rtx
gen_avx512f_truncatev8div8si2_mask_store (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_TRUNCATE (V8SImode,
	operand1),
	operand0,
	operand2));
}

/* ../../gcc/config/i386/sse.md:15214 */
rtx
gen_avx512bw_truncatev32hiv32qi2_mask_store (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32QImode,
	gen_rtx_TRUNCATE (V32QImode,
	operand1),
	operand0,
	operand2));
}

/* ../../gcc/config/i386/sse.md:15314 */
rtx
gen_avx512vl_us_truncatev4div4si2_mask_store (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_US_TRUNCATE (V4SImode,
	operand1),
	operand0,
	operand2));
}

/* ../../gcc/config/i386/sse.md:15314 */
rtx
gen_avx512vl_ss_truncatev16hiv16qi2_mask_store (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16QImode,
	gen_rtx_SS_TRUNCATE (V16QImode,
	operand1),
	operand0,
	operand2));
}

/* ../../gcc/config/i386/sse.md:15335 */
rtx
gen_truncv8siv8qi2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 15340 "../../gcc/config/i386/sse.md"
{
  if (TARGET_AVX512VL
      && (V8SImode != V8HImode || TARGET_AVX512BW))
    {
       rtx op0 = gen_reg_rtx (V16QImode);

       emit_insn (gen_avx512vl_truncatev8siv8qi2
	         (op0, operands[1], CONST0_RTX (V8QImode)));

       emit_move_insn (operands[0],
		       lowpart_subreg (V8QImode, op0, V16QImode));
    }
  else
    {
      ix86_expand_trunc_with_avx2_noavx512f (operands[0],
					     operands[1],
					     V32QImode);
    }
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_TRUNCATE (V8QImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:15502 */
extern rtx_insn *gen_split_3183 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3183 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3183 (sse.md:15502)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 15512 "../../gcc/config/i386/sse.md"
operands[0] = adjust_address_nv (operands[0], V4QImode, 0);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_TRUNCATE (V4QImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:15600 */
extern rtx_insn *gen_split_3185 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3185 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3185 (sse.md:15600)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 15610 "../../gcc/config/i386/sse.md"
operands[0] = adjust_address_nv (operands[0], V8QImode, 0);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SS_TRUNCATE (V8QImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:15670 */
rtx
gen_avx512vl_ss_truncatev8hiv8qi2_mask_store_2 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 15676 "../../gcc/config/i386/sse.md"
{
  operands[0] = adjust_address_nv (operands[0], V8QImode, 0);
  emit_insn (gen_avx512vl_ss_truncatev8hiv8qi2_mask_store_1 (operands[0],
							  operands[1],
							  operands[2]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit_insn (gen_rtx_SS_TRUNCATE (V8QImode,
	operand1));
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:15762 */
extern rtx_insn *gen_split_3192 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3192 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3192 (sse.md:15762)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 15772 "../../gcc/config/i386/sse.md"
operands[0] = adjust_address_nv (operands[0], V4HImode, 0);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SS_TRUNCATE (V4HImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:15828 */
rtx
gen_avx512vl_truncatev4div4hi2_mask_store_2 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 15834 "../../gcc/config/i386/sse.md"
{
  operands[0] = adjust_address_nv (operands[0], V4HImode, 0);
  emit_insn (gen_avx512vl_truncatev4div4hi2_mask_store_1 (operands[0],
							  operands[1],
							  operands[2]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit_insn (gen_rtx_TRUNCATE (V4HImode,
	operand1));
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16061 */
rtx
gen_avx512vl_ss_truncatev2div2si2_mask_store_2 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16067 "../../gcc/config/i386/sse.md"
{
  operands[0] = adjust_address_nv (operands[0], V2SImode, 0);
  emit_insn (gen_avx512vl_ss_truncatev2div2si2_mask_store_1 (operands[0],
							operands[1],
							operands[2]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit_insn (gen_rtx_SS_TRUNCATE (V2SImode,
	operand1));
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16206 */
rtx
gen_negv64qi2 (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16212 "../../gcc/config/i386/sse.md"
operands[2] = force_reg (V64QImode, CONST0_RTX (V64QImode));
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_MINUS (V64QImode,
	operand2,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16206 */
rtx
gen_negv4di2 (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16212 "../../gcc/config/i386/sse.md"
operands[2] = force_reg (V4DImode, CONST0_RTX (V4DImode));
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_MINUS (V4DImode,
	operand2,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16214 */
rtx
gen_addv16hi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16220 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (PLUS, V16HImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_PLUS (V16HImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16214 */
rtx
gen_addv8di3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16220 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (PLUS, V8DImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_PLUS (V8DImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16222 */
rtx
gen_cond_addv16qi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL _Pragma ("GCC error \"cond_addv16qi cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16231 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_addv16qi3_mask (operands[0],
				     operands[2],
				     operands[3],
				     operands[4],
				     operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16QImode,
	gen_rtx_PLUS (V16QImode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16222 */
rtx
gen_cond_addv8si (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL _Pragma ("GCC error \"cond_addv8si cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16231 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_addv8si3_mask (operands[0],
				     operands[2],
				     operands[3],
				     operands[4],
				     operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_PLUS (V8SImode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16240 */
rtx
gen_addv16si3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16249 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (PLUS, V16SImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SImode,
	gen_rtx_PLUS (V16SImode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16240 */
rtx
gen_subv8di3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16249 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MINUS, V8DImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DImode,
	gen_rtx_MINUS (V8DImode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16251 */
rtx
gen_subv32qi3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16260 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MINUS, V32QImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32QImode,
	gen_rtx_MINUS (V32QImode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16305 */
rtx
gen_sssubv64qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16311 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (SS_MINUS, V64QImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SS_MINUS (V64QImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16305 */
rtx
gen_sssubv32qi3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16311 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (SS_MINUS, V32QImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32QImode,
	gen_rtx_SS_MINUS (V32QImode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16305 */
rtx
gen_ssaddv32hi3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16311 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (SS_PLUS, V32HImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HImode,
	gen_rtx_SS_PLUS (V32HImode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16305 */
rtx
gen_sssubv16hi3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16311 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (SS_MINUS, V16HImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HImode,
	gen_rtx_SS_MINUS (V16HImode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16330 */
extern rtx_insn *gen_split_3209 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3209 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3209 (sse.md:16330)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16344 "../../gcc/config/i386/sse.md"
operands[4] = gen_reg_rtx (V16QImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand4,
	gen_rtx_UMIN (V16QImode,
	operand1,
	operand2)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_EQ (V16QImode,
	copy_rtx (operand4),
	copy_rtx (operand1))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16374 */
rtx
gen_mulv16hi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16379 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MULT, V16HImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_MULT (V16HImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16396 */
rtx
gen_smulv16hi3_highpart (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16408 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MULT, V16HImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_TRUNCATE (V16HImode,
	gen_rtx_LSHIFTRT (V16SImode,
	gen_rtx_MULT (V16SImode,
	gen_rtx_SIGN_EXTEND (V16SImode,
	operand1),
	gen_rtx_SIGN_EXTEND (V16SImode,
	operand2)),
	const_int_rtx[MAX_SAVED_CONST_INT + (16)]))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16431 */
rtx
gen_vec_widen_umult_even_v16si (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16449 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MULT, V16SImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_MULT (V8DImode,
	gen_rtx_ZERO_EXTEND (V8DImode,
	gen_rtx_VEC_SELECT (V8SImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (10)],
		const_int_rtx[MAX_SAVED_CONST_INT + (12)],
		const_int_rtx[MAX_SAVED_CONST_INT + (14)])))),
	gen_rtx_ZERO_EXTEND (V8DImode,
	gen_rtx_VEC_SELECT (V8SImode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (10)],
		const_int_rtx[MAX_SAVED_CONST_INT + (12)],
		const_int_rtx[MAX_SAVED_CONST_INT + (14)])))))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16677 */
rtx
gen_avx2_pmaddwd (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16709 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MULT, V16HImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_PLUS (V8SImode,
	gen_rtx_MULT (V8SImode,
	gen_rtx_SIGN_EXTEND (V8SImode,
	gen_rtx_VEC_SELECT (V8HImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (10)],
		const_int_rtx[MAX_SAVED_CONST_INT + (12)],
		const_int_rtx[MAX_SAVED_CONST_INT + (14)])))),
	gen_rtx_SIGN_EXTEND (V8SImode,
	gen_rtx_VEC_SELECT (V8HImode,
	operand2,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const0_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (8)],
		const_int_rtx[MAX_SAVED_CONST_INT + (10)],
		const_int_rtx[MAX_SAVED_CONST_INT + (12)],
		const_int_rtx[MAX_SAVED_CONST_INT + (14)]))))),
	gen_rtx_MULT (V8SImode,
	gen_rtx_SIGN_EXTEND (V8SImode,
	gen_rtx_VEC_SELECT (V8HImode,
	copy_rtx (operand1),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)],
		const_int_rtx[MAX_SAVED_CONST_INT + (9)],
		const_int_rtx[MAX_SAVED_CONST_INT + (11)],
		const_int_rtx[MAX_SAVED_CONST_INT + (13)],
		const_int_rtx[MAX_SAVED_CONST_INT + (15)])))),
	gen_rtx_SIGN_EXTEND (V8SImode,
	gen_rtx_VEC_SELECT (V8HImode,
	copy_rtx (operand2),
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)],
		const_int_rtx[MAX_SAVED_CONST_INT + (9)],
		const_int_rtx[MAX_SAVED_CONST_INT + (11)],
		const_int_rtx[MAX_SAVED_CONST_INT + (13)],
		const_int_rtx[MAX_SAVED_CONST_INT + (15)]))))))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16912 */
rtx
gen_mulv2di3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16918 "../../gcc/config/i386/sse.md"
{
  ix86_expand_sse2_mulvxdi3 (operands[0], operands[1], operands[2]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_MULT (V2DImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16923 */
rtx
gen_vec_widen_smult_hi_v8si (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16929 "../../gcc/config/i386/sse.md"
{
  ix86_expand_mul_widen_hilo (operands[0], operands[1], operands[2],
			      false, true);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit_insn (gen_rtx_SIGN_EXTEND (V4DImode,
	operand1));
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16935 */
rtx
gen_vec_widen_smult_lo_v8hi (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16941 "../../gcc/config/i386/sse.md"
{
  ix86_expand_mul_widen_hilo (operands[0], operands[1], operands[2],
			      false, false);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit_insn (gen_rtx_SIGN_EXTEND (V4SImode,
	operand1));
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:16960 */
rtx
gen_vec_widen_umult_odd_v8si (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 16966 "../../gcc/config/i386/sse.md"
{
  ix86_expand_mul_widen_evenodd (operands[0], operands[1], operands[2],
				 true, true);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit_insn (gen_rtx_ZERO_EXTEND (V4DImode,
	operand1));
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17026 */
rtx
gen_uavgv32hi3_ceil (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx operand3;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17039 "../../gcc/config/i386/sse.md"
{
  operands[3] = CONST1_RTX(V32SImode);
  ix86_fixup_binary_operands_no_copy (PLUS, V32HImode, operands);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_TRUNCATE (V32HImode,
	gen_rtx_LSHIFTRT (V32SImode,
	gen_rtx_PLUS (V32SImode,
	gen_rtx_PLUS (V32SImode,
	gen_rtx_ZERO_EXTEND (V32SImode,
	operand1),
	gen_rtx_ZERO_EXTEND (V32SImode,
	operand2)),
	operand3),
	const1_rtx))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17122 */
extern rtx_insn *gen_split_3214 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3214 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3214 (sse.md:17122)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17131 "../../gcc/config/i386/sse.md"
operands[3] = gen_int_mode (32 - 1, DImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ASHIFTRT (V8SImode,
	operand1,
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17147 */
extern rtx_insn *gen_split_3223 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3223 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3223 (sse.md:17147)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17162 "../../gcc/config/i386/sse.md"
operands[5] = gen_int_mode (64 - 1, DImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ASHIFTRT (V4DImode,
	operand3,
	operand5)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17347 */
extern rtx_insn *gen_split_3232 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3232 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3232 (sse.md:17347)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17356 "../../gcc/config/i386/sse.md"
operands[4] = gen_int_mode (32 - 1, DImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_LSHIFTRT (V4SImode,
	operand1,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17358 */
extern rtx_insn *gen_split_3241 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3241 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3241 (sse.md:17358)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17371 "../../gcc/config/i386/sse.md"
operands[5] = gen_int_mode (64 - 1, DImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_LSHIFTRT (V8DImode,
	operand3,
	operand5)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17389 */
extern rtx_insn *gen_split_3250 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3250 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3250 (sse.md:17389)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17400 "../../gcc/config/i386/sse.md"
operands[3] = XVECEXP (operands[2], 0, 0);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (V8DImode,
	operand1,
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17402 */
rtx
gen_vec_shl_v4sf (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17408 "../../gcc/config/i386/sse.md"
{
  rtx op0 = gen_reg_rtx (V1TImode);
  rtx op1 = force_reg (V4SFmode, operands[1]);

  emit_insn (gen_sse2_ashlv1ti3
	      (op0, gen_lowpart (V1TImode, op1), operands[2]));
  emit_move_insn (operands[0], gen_lowpart (V4SFmode, op0));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (V1TImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17434 */
rtx
gen_ashlv1ti3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17440 "../../gcc/config/i386/sse.md"
{
  if (!CONST_INT_P (operands[2]))
    {
      ix86_expand_v1ti_shift (ASHIFT, operands);
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (V1TImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17522 */
extern rtx_insn *gen_split_3259 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3259 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3259 (sse.md:17522)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ASHIFTRT (V4SImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17654 */
rtx
gen_uminv32qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17660 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (UMIN, V32QImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UMIN (V32QImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17654 */
rtx
gen_sminv64qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17660 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (SMIN, V64QImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SMIN (V64QImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17654 */
rtx
gen_uminv16si3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17660 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (UMIN, V16SImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UMIN (V16SImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17674 */
rtx
gen_cond_sminv16qi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17683 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_sminv16qi3_mask (operands[0],
				     operands[2],
				     operands[3],
				     operands[4],
				     operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16QImode,
	gen_rtx_SMIN (V16QImode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17674 */
rtx
gen_cond_uminv16hi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17683 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_uminv16hi3_mask (operands[0],
				     operands[2],
				     operands[3],
				     operands[4],
				     operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HImode,
	gen_rtx_UMIN (V16HImode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17674 */
rtx
gen_cond_sminv8si (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17683 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_sminv8si3_mask (operands[0],
				     operands[2],
				     operands[3],
				     operands[4],
				     operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_SMIN (V8SImode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17674 */
rtx
gen_cond_uminv8di (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17683 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_uminv8di3_mask (operands[0],
				     operands[2],
				     operands[3],
				     operands[4],
				     operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DImode,
	gen_rtx_UMIN (V8DImode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17692 */
rtx
gen_sminv16si3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17701 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (SMIN, V16SImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SImode,
	gen_rtx_SMIN (V16SImode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17692 */
rtx
gen_uminv4si3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17701 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (UMIN, V4SImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_UMIN (V4SImode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17692 */
rtx
gen_sminv2di3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17701 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (SMIN, V2DImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V2DImode,
	gen_rtx_SMIN (V2DImode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17725 */
rtx
gen_uminv4di3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17731 "../../gcc/config/i386/sse.md"
{
  if (TARGET_AVX512F
      && (V4DImode == V8DImode || TARGET_AVX512VL))
    ;
  else 
    {
      enum rtx_code code;
      rtx xops[6];
      bool ok;


      xops[0] = operands[0];

      if (UMIN == SMAX || UMIN == UMAX)
	{
	  xops[1] = operands[1];
	  xops[2] = operands[2];
	}
      else
	{
	  xops[1] = operands[2];
	  xops[2] = operands[1];
	}

      code = (UMIN == UMAX || UMIN == UMIN) ? GTU : GT;

      xops[3] = gen_rtx_fmt_ee (code, VOIDmode, operands[1], operands[2]);
      xops[4] = operands[1];
      xops[5] = operands[2];

      ok = ix86_expand_int_vcond (xops);
      gcc_assert (ok);
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UMIN (V4DImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17767 */
rtx
gen_sminv4si3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17773 "../../gcc/config/i386/sse.md"
{
  if (TARGET_SSE4_1 || V4SImode == V8HImode)
    ix86_fixup_binary_operands_no_copy (SMIN, V4SImode, operands);
  else
    {
      rtx xops[6];
      bool ok;

      xops[0] = operands[0];
      operands[1] = force_reg (V4SImode, operands[1]);
      operands[2] = force_reg (V4SImode, operands[2]);

      if (SMIN == SMAX)
	{
	  xops[1] = operands[1];
	  xops[2] = operands[2];
	}
      else
	{
	  xops[1] = operands[2];
	  xops[2] = operands[1];
	}

      xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);
      xops[4] = operands[1];
      xops[5] = operands[2];

      ok = ix86_expand_int_vcond (xops);
      gcc_assert (ok);
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SMIN (V4SImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17946 */
extern rtx_insn *gen_split_3267 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3267 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3267 (sse.md:17946)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 17969 "../../gcc/config/i386/sse.md"
{
  if (INTVAL (operands[5]) == 1)
    std::swap (operands[3], operands[4]);

  if (operands[3] == CONST0_RTX (V2DImode))
    operands[3] = force_reg (V2DImode, operands[3]);
  if (operands[4] == CONST0_RTX (V2DImode))
    operands[4] = force_reg (V2DImode, operands[4]);

  enum rtx_code code = INTVAL (operands[5]) ? GT : EQ;
  emit_move_insn (operands[0], gen_rtx_fmt_ee (code, V2DImode,
					       operands[3], operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:17984 */
extern rtx_insn *gen_split_3273 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3273 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3273 (sse.md:17984)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18008 "../../gcc/config/i386/sse.md"
{
  if (INTVAL (operands[5]) == 5)
    std::swap (operands[3], operands[4]);
  enum rtx_code code = INTVAL (operands[5]) != 4 ? GT : EQ;
  emit_move_insn (operands[0], gen_rtx_fmt_ee (code, V8HImode,
					       operands[3], operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18017 */
extern rtx_insn *gen_split_3281 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3281 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3281 (sse.md:18017)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18041 "../../gcc/config/i386/sse.md"
{
  if (INTVAL (operands[5]) == 5)
    std::swap (operands[1], operands[2]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (3,
		operand2,
		operand1,
		gen_rtx_LT (V16QImode,
	operand3,
	operand4)),
	51)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18110 */
extern rtx_insn *gen_split_3291 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3291 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3291 (sse.md:18110)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18125 "../../gcc/config/i386/sse.md"
{
  rtx dst_min = gen_reg_rtx (V4SImode);

  if (MEM_P (operands[3]) && MEM_P (operands[4]))
    operands[3] = force_reg (V4SImode, operands[3]);
  emit_insn (gen_uminv4si3 (dst_min, operands[3], operands[4]));
  rtx eq_op = INTVAL (operands[5]) == 2 ? operands[3] : operands[4];
  emit_move_insn (operands[0], gen_rtx_EQ (V4SImode, eq_op, dst_min));
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18110 */
extern rtx_insn *gen_split_3301 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3301 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3301 (sse.md:18110)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18125 "../../gcc/config/i386/sse.md"
{
  rtx dst_min = gen_reg_rtx (V4DImode);

  if (MEM_P (operands[3]) && MEM_P (operands[4]))
    operands[3] = force_reg (V4DImode, operands[3]);
  emit_insn (gen_uminv4di3 (dst_min, operands[3], operands[4]));
  rtx eq_op = INTVAL (operands[5]) == 2 ? operands[3] : operands[4];
  emit_move_insn (operands[0], gen_rtx_EQ (V4DImode, eq_op, dst_min));
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18168 */
extern rtx_insn *gen_split_3311 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3311 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3311 (sse.md:18168)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18185 "../../gcc/config/i386/sse.md"
{
  if (MEM_P (operands[3]))
    operands[3] = force_reg (V8HImode, operands[3]);
  emit_move_insn (operands[0], gen_rtx_fmt_ee (EQ, V8HImode,
					       operands[3], operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18193 */
rtx
gen_avx512vl_eqv16qi3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18201 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (EQ, V16QImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_AND (HImode,
	gen_rtx_UNSPEC (HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		const0_rtx),
	59),
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18203 */
rtx
gen_avx512vl_eqv8si3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18211 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (EQ, V8SImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_AND (QImode,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		const0_rtx),
	59),
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18279 */
rtx
gen_avx512vl_gtv8si3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		const_int_rtx[MAX_SAVED_CONST_INT + (6)]),
	59));
}

/* ../../gcc/config/i386/sse.md:18279 */
rtx
gen_avx512f_gtv8di3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		const_int_rtx[MAX_SAVED_CONST_INT + (6)]),
	59));
}

/* ../../gcc/config/i386/sse.md:18287 */
rtx
gen_avx512bw_gtv64qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (DImode,
	gen_rtvec (3,
		operand1,
		operand2,
		const_int_rtx[MAX_SAVED_CONST_INT + (6)]),
	59));
}

/* ../../gcc/config/i386/sse.md:18287 */
rtx
gen_avx512vl_gtv16hi3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (HImode,
	gen_rtx_UNSPEC (HImode,
	gen_rtvec (3,
		operand1,
		operand2,
		const_int_rtx[MAX_SAVED_CONST_INT + (6)]),
	59),
	operand3));
}

/* ../../gcc/config/i386/sse.md:18325 */
rtx
gen_vec_permv16hi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18331 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vec_perm (operands);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18325 */
rtx
gen_vec_permv32hi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18331 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vec_perm (operands);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18342 */
rtx
gen_one_cmplv8hi2 (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18347 "../../gcc/config/i386/sse.md"
{
  operands[2] = CONSTM1_RTX (V8HImode);

  if (!TARGET_AVX512F || (!TARGET_AVX512VL && !TARGET_EVEX512))
    operands[2] = force_reg (V8HImode, operands[2]);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_XOR (V8HImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18354 */
extern rtx_insn *gen_split_3323 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3323 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3323 (sse.md:18354)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18376 "../../gcc/config/i386/sse.md"
{
  if (MEM_P (operands[1]))
   {
     operands[3] = operands[1];
     operands[1] = operands[0];
   }
  else
    {
      if (GET_MODE_SIZE (HImode) < 4)
	{
	  if (64 == 64 ? TARGET_AVX512BW
	     : (TARGET_AVX512BW && TARGET_AVX512VL)
	       || !EXT_REX_SSE_REG_P (operands[0]))
	    {
	      operands[3] = operands[1];
	      operands[1] = operands[0];
	    }
	  else
	    operands[3] = CONST0_RTX (V32HImode);
	}
       else
	 {
	    if (64 == 64 || TARGET_AVX512VL
		|| !EXT_REX_SSE_REG_P (operands[0]))
	      {
		operands[3] = operands[1];
		operands[1] = operands[0];
	      }
	    else
	      operands[3] = CONST0_RTX (V32HImode);
	 }
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	operand3));
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (copy_rtx (operand0),
	gen_rtx_XOR (V32HImode,
	operand1,
	operand2)),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		copy_rtx (operand0)),
	38))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18444 */
extern rtx_insn *gen_split_3333 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3333 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3333 (sse.md:18444)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18455 "../../gcc/config/i386/sse.md"
operands[2] = CONSTM1_RTX (V8DImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_XOR (V8DImode,
	gen_rtx_VEC_DUPLICATE (V8DImode,
	operand1),
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18457 */
rtx
gen_avx512f_andnotv16si3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (V16SImode,
	gen_rtx_NOT (V16SImode,
	operand1),
	operand2));
}

/* ../../gcc/config/i386/sse.md:18464 */
rtx
gen_andnv8di3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (V8DImode,
	gen_rtx_NOT (V8DImode,
	operand2),
	operand1));
}

/* ../../gcc/config/i386/sse.md:18464 */
rtx
gen_andnv8si3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_AND (V8SImode,
	gen_rtx_NOT (V8SImode,
	operand2),
	operand1));
}

/* ../../gcc/config/i386/sse.md:18471 */
rtx
gen_avx2_andnotv4di3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DImode,
	gen_rtx_AND (V4DImode,
	gen_rtx_NOT (V4DImode,
	operand1),
	operand2),
	operand3,
	operand4));
}

/* ../../gcc/config/i386/sse.md:18626 */
extern rtx_insn *gen_split_3344 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3344 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3344 (sse.md:18626)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18639 "../../gcc/config/i386/sse.md"
operands[3] = gen_reg_rtx (V16SImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand3,
	gen_rtx_VEC_DUPLICATE (V16SImode,
	operand1)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_AND (V16SImode,
	gen_rtx_NOT (V16SImode,
	copy_rtx (operand3)),
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18641 */
extern rtx_insn *gen_split_3354 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3354 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3354 (sse.md:18641)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18654 "../../gcc/config/i386/sse.md"
operands[3] = gen_reg_rtx (V16QImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand3,
	gen_rtx_VEC_DUPLICATE (V16QImode,
	operand1)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IOR (V16QImode,
	gen_rtx_NOT (V16QImode,
	copy_rtx (operand3)),
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18656 */
extern rtx_insn *gen_split_3364 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3364 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3364 (sse.md:18656)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18669 "../../gcc/config/i386/sse.md"
operands[3] = gen_reg_rtx (V64QImode);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand3,
	gen_rtx_VEC_DUPLICATE (V64QImode,
	operand1)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_NOT (V64QImode,
	gen_rtx_XOR (V64QImode,
	copy_rtx (operand3),
	operand2))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18686 */
rtx
gen_andv16si3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18692 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_logical_operator (AND, V16SImode, operands);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_AND (V16SImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18686 */
rtx
gen_xorv8di3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18692 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_logical_operator (XOR, V8DImode, operands);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_XOR (V8DImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18686 */
rtx
gen_andv32hi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18692 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_logical_operator (AND, V32HImode, operands);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_AND (V32HImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18686 */
rtx
gen_iorv8si3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18692 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_logical_operator (IOR, V8SImode, operands);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IOR (V8SImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18686 */
rtx
gen_xorv2di3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18692 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_logical_operator (XOR, V2DImode, operands);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_XOR (V2DImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18697 */
rtx
gen_cond_andv8di (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL _Pragma ("GCC error \"cond_andv8di cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18706 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_andv8di3_mask (operands[0],
				     operands[2],
				     operands[3],
				     operands[4],
				     operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DImode,
	gen_rtx_AND (V8DImode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18715 */
rtx
gen_iorv16si3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18724 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (IOR, V16SImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16SImode,
	gen_rtx_IOR (V16SImode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:18715 */
rtx
gen_andv8di3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 18724 "../../gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (AND, V8DImode, operands);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DImode,
	gen_rtx_AND (V8DImode,
	operand1,
	operand2),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:19134 */
rtx
gen_vec_pack_trunc_v32hi (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 19139 "../../gcc/config/i386/sse.md"
{
  rtx op1 = gen_lowpart (V64QImode, operands[1]);
  rtx op2 = gen_lowpart (V64QImode, operands[2]);
  ix86_expand_vec_extract_even_odd (operands[0], op1, op2, 0);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:19156 */
rtx
gen_vec_pack_trunc_hi (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx operand3;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 19168 "../../gcc/config/i386/sse.md"
{
  operands[3] = GEN_INT (GET_MODE_BITSIZE (HImode));
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_IOR (SImode,
	gen_rtx_ASHIFT (SImode,
	gen_rtx_ZERO_EXTEND (SImode,
	operand2),
	operand3),
	gen_rtx_ZERO_EXTEND (SImode,
	operand1))),
		gen_rtx_UNSPEC (VOIDmode,
	gen_rtvec (1,
		const0_rtx),
	174))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:19841 */
rtx
gen_vec_interleave_lowv4di (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 19846 "../../gcc/config/i386/sse.md"
{
  rtx t1 = gen_reg_rtx (V4DImode);
  rtx t2 = gen_reg_rtx (V4DImode);
  rtx t3 = gen_reg_rtx (V4DImode);
  emit_insn (gen_avx2_interleave_lowv4di (t1, operands[1], operands[2]));
  emit_insn (gen_avx2_interleave_highv4di (t2, operands[1], operands[2]));
  emit_insn (gen_avx2_permv2ti (t3, gen_lowpart (V4DImode, t1),
				gen_lowpart (V4DImode, t2),
				GEN_INT (0 + (2 << 4))));
  emit_move_insn (operands[0], gen_lowpart (V4DImode, t3));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:20064 */
rtx
gen_avx512f_vinserti64x4_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 20072 "../../gcc/config/i386/sse.md"
{
  int mask = INTVAL (operands[3]);
  if (mask == 0)
    emit_insn (gen_vec_set_lo_v8di_mask (operands[0], operands[1],
					   operands[2], operands[4],
					   operands[5]));
  else
    emit_insn (gen_vec_set_hi_v8di_mask (operands[0], operands[1],
					   operands[2], operands[4],
					   operands[5]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, true);
  emit (operand5, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:20575 */
rtx
gen_avx512vl_pshufdv3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 20582 "../../gcc/config/i386/sse.md"
{
  int mask = INTVAL (operands[2]);
  emit_insn (gen_avx2_pshufd_1_mask (operands[0], operands[1],
				GEN_INT ((mask >> 0) & 3),
				GEN_INT ((mask >> 2) & 3),
				GEN_INT ((mask >> 4) & 3),
				GEN_INT ((mask >> 6) & 3),
				GEN_INT (((mask >> 0) & 3) + 4),
				GEN_INT (((mask >> 2) & 3) + 4),
				GEN_INT (((mask >> 4) & 3) + 4),
				GEN_INT (((mask >> 6) & 3) + 4),
                operands[3], operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:20895 */
rtx
gen_avx512vl_pshufhwv3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 20902 "../../gcc/config/i386/sse.md"
{
  int mask = INTVAL (operands[2]);
  emit_insn (gen_avx2_pshufhw_1_mask (operands[0], operands[1],
				 GEN_INT (((mask >> 0) & 3) + 4),
				 GEN_INT (((mask >> 2) & 3) + 4),
				 GEN_INT (((mask >> 4) & 3) + 4),
				 GEN_INT (((mask >> 6) & 3) + 4),
				 GEN_INT (((mask >> 0) & 3) + 12),
				 GEN_INT (((mask >> 2) & 3) + 12),
				 GEN_INT (((mask >> 4) & 3) + 12),
				 GEN_INT (((mask >> 6) & 3) + 12),
                 operands[3], operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:21385 */
extern rtx_insn *gen_split_3386 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3386 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3386 (sse.md:21385)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 21393 "../../gcc/config/i386/sse.md"
{
  int offs = INTVAL (operands[2]) * GET_MODE_SIZE (SImode);

  operands[1] = adjust_address (operands[1], SImode, offs);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:21759 */
rtx
gen_vec_unpacks_lo_v16qi (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 21763 "../../gcc/config/i386/sse.md"
ix86_expand_sse_unpack (operands[0], operands[1], false, false); DONE;
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:21765 */
rtx
gen_vec_unpacks_hi_v64qi (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 21769 "../../gcc/config/i386/sse.md"
ix86_expand_sse_unpack (operands[0], operands[1], false, true); DONE;
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:21771 */
rtx
gen_vec_unpacku_lo_v32qi (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 21775 "../../gcc/config/i386/sse.md"
ix86_expand_sse_unpack (operands[0], operands[1], true, false); DONE;
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:21794 */
rtx
gen_vec_unpacks_lo_si (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (operand0,
	gen_rtx_SUBREG (HImode,
	operand1,
	0));
}

/* ../../gcc/config/i386/sse.md:21804 */
rtx
gen_vec_unpacku_hi_v32hi (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 21808 "../../gcc/config/i386/sse.md"
ix86_expand_sse_unpack (operands[0], operands[1], true, true); DONE;
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:21858 */
rtx
gen_avx512bw_uavgv64qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx operand3;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 21871 "../../gcc/config/i386/sse.md"
{
  operands[3] = CONST1_RTX(V64HImode);
  ix86_fixup_binary_operands_no_copy (PLUS, V64QImode, operands);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_TRUNCATE (V64QImode,
	gen_rtx_LSHIFTRT (V64HImode,
	gen_rtx_PLUS (V64HImode,
	gen_rtx_PLUS (V64HImode,
	gen_rtx_ZERO_EXTEND (V64HImode,
	operand1),
	gen_rtx_ZERO_EXTEND (V64HImode,
	operand2)),
	operand3),
	const1_rtx))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:21858 */
rtx
gen_avx2_uavgv16hi3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx operand5;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 21871 "../../gcc/config/i386/sse.md"
{
  operands[5] = CONST1_RTX(V16SImode);
  ix86_fixup_binary_operands_no_copy (PLUS, V16HImode, operands);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HImode,
	gen_rtx_TRUNCATE (V16HImode,
	gen_rtx_LSHIFTRT (V16SImode,
	gen_rtx_PLUS (V16SImode,
	gen_rtx_PLUS (V16SImode,
	gen_rtx_ZERO_EXTEND (V16SImode,
	operand1),
	gen_rtx_ZERO_EXTEND (V16SImode,
	operand2)),
	operand5),
	const1_rtx)),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:21995 */
extern rtx_insn *gen_split_3402 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3402 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3402 (sse.md:21995)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 22008 "../../gcc/config/i386/sse.md"
operands[1] = gen_lowpart (V8SFmode, operands[1]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SIGN_EXTEND (DImode,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (1,
		operand1),
	49))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:22014 */
extern rtx_insn *gen_split_3412 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3412 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3412 (sse.md:22014)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 22033 "../../gcc/config/i386/sse.md"
operands[1] = gen_lowpart (V4SFmode, operands[1]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SIGN_EXTEND (DImode,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (1,
		operand1),
	49))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:22058 */
extern rtx_insn *gen_split_3422 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3422 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3422 (sse.md:22058)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 22072 "../../gcc/config/i386/sse.md"
operands[1] = gen_lowpart (V8SFmode, operands[1]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SIGN_EXTEND (DImode,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (1,
		operand1),
	49))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:22159 */
extern rtx_insn *gen_split_3432 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3432 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3432 (sse.md:22159)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 22168 "../../gcc/config/i386/sse.md"
{
  operands[2] = gen_reg_rtx (SImode);
  if (GET_MODE_NUNITS (V32QImode) == 32)
    operands[3] = gen_rtx_NOT (SImode, operands[2]);
  else
    {
      operands[3]
	= gen_int_mode ((HOST_WIDE_INT_1 << GET_MODE_NUNITS (V32QImode)) - 1,
			SImode);
      operands[3] = gen_rtx_XOR (SImode, operands[2], operands[3]);
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand2,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (1,
		operand1),
	49)));
  emit_insn (gen_rtx_SET (operand0,
	operand3));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:22308 */
extern rtx_insn *gen_split_3444 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3444 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3444 (sse.md:22308)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 22320 "../../gcc/config/i386/sse.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SIGN_EXTEND (DImode,
	gen_rtx_UNSPEC (SImode,
	gen_rtvec (1,
		operand1),
	49))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:22602 */
extern rtx_insn *gen_split_3457 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3457 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3457 (sse.md:22602)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 22623 "../../gcc/config/i386/sse.md"
{
  /* Generate SSE version of the operation.  */
  rtx op0 = lowpart_subreg (V8HImode, operands[0],
			    GET_MODE (operands[0]));
  rtx op1 = lowpart_subreg (V8HImode, operands[1],
			    GET_MODE (operands[1]));
  rtx op2 = lowpart_subreg (V8HImode, operands[2],
			    GET_MODE (operands[2]));
  emit_insn (gen_ssse3_phsubwv8hi3 (op0, op1, op2));
  ix86_move_vector_high_sse_to_mmx (op0);
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:22958 */
rtx
gen_smulhrsv8hi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx operand3;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 22973 "../../gcc/config/i386/sse.md"
{
  operands[3] = CONST1_RTX(V8HImode);
  ix86_fixup_binary_operands_no_copy (MULT, V8HImode, operands);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_TRUNCATE (V8HImode,
	gen_rtx_LSHIFTRT (V8SImode,
	gen_rtx_PLUS (V8SImode,
	gen_rtx_LSHIFTRT (V8SImode,
	gen_rtx_MULT (V8SImode,
	gen_rtx_SIGN_EXTEND (V8SImode,
	operand1),
	gen_rtx_SIGN_EXTEND (V8SImode,
	operand2)),
	const_int_rtx[MAX_SAVED_CONST_INT + (14)]),
	operand3),
	const1_rtx))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:23386 */
rtx
gen_absv16hi2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 23391 "../../gcc/config/i386/sse.md"
{
  if (!TARGET_SSSE3
      || ((V16HImode == V2DImode || V16HImode == V4DImode)
	  && !TARGET_AVX512VL))
    {
      ix86_expand_sse2_abs (operands[0], operands[1]);
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ABS (V16HImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:23572 */
extern rtx_insn *gen_split_3463 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3463 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3463 (sse.md:23572)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 23587 "../../gcc/config/i386/sse.md"
operands[3] = gen_lowpart (V8SFmode, operands[3]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	51)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:23631 */
extern rtx_insn *gen_split_3472 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3472 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3472 (sse.md:23631)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 23647 "../../gcc/config/i386/sse.md"
{
  operands[0] = gen_lowpart (V2DFmode, operands[0]);
  operands[1] = gen_lowpart (V2DFmode, operands[1]);
  operands[2] = gen_lowpart (V2DFmode, operands[2]);
  operands[3] = gen_lowpart (V2DFmode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	51)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:23696 */
extern rtx_insn *gen_split_3482 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3482 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3482 (sse.md:23696)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 23714 "../../gcc/config/i386/sse.md"
{
  operands[0] = gen_lowpart (V4DFmode, operands[0]);
  operands[1] = gen_lowpart (V4DFmode, operands[1]);
  operands[2] = force_reg (V4DFmode,
			   gen_lowpart (V4DFmode, operands[2]));
  operands[3] = gen_lowpart (V4DFmode, operands[3]);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (3,
		operand2,
		operand1,
		operand3),
	51)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:23903 */
extern rtx_insn *gen_split_3492 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3492 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3492 (sse.md:23903)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 23917 "../../gcc/config/i386/sse.md"

#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	51)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:24027 */
rtx
gen_avx2_pblendw_1 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 24035 "../../gcc/config/i386/sse.md"
{
  int mask = INTVAL (operands[3]);
  if (mask == 0)
    emit_move_insn (operands[0], operands[1]);
  else
   {
     rtx tmp = gen_reg_rtx (V16HImode);
     rtx blendw_idx, blendd_idx;

     if (mask & 0xff)
       {
	 blendw_idx = GEN_INT (mask & 0xff);
	 blendd_idx = GEN_INT (15);
       }
     else
       {
	 blendw_idx = GEN_INT (mask >> 8 & 0xff);
	 blendd_idx = GEN_INT (240);
       }
     emit_insn (gen_avx2_pblendw (tmp, operands[1],
						operands[2], blendw_idx));

     rtx op0 = gen_reg_rtx (V8SImode);
     tmp = lowpart_subreg (V8SImode, tmp, V16HImode);
     operands[1] = lowpart_subreg (V8SImode, operands[1], V16HImode);
     emit_insn (gen_avx2_pblenddv8si (op0, operands[1],
				      tmp, blendd_idx));
     emit_move_insn (operands[0], lowpart_subreg (V16HImode, op0, V8SImode));
  }

  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HImode,
	operand2,
	operand1,
	operand3)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:24273 */
extern rtx_insn *gen_split_3511 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3511 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3511 (sse.md:24273)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 24292 "../../gcc/config/i386/sse.md"
{
  operands[0] = lowpart_subreg (V8HImode, operands[0], V16QImode);
  if (MEM_P (operands[1]))
    {
      operands[1] = lowpart_subreg (V8QImode, operands[1], V16QImode);
      operands[1] = gen_rtx_ZERO_EXTEND (V8HImode, operands[1]);
      emit_insn (gen_rtx_SET (operands[0], operands[1]));
      DONE;
    }
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (V8HImode,
	gen_rtx_VEC_SELECT (V8QImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)]))))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:24468 */
extern rtx_insn *gen_split_3520 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3520 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3520 (sse.md:24468)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 24488 "../../gcc/config/i386/sse.md"
operands[1] = adjust_address_nv (operands[1], V4QImode, 0);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SIGN_EXTEND (V4SImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:24569 */
rtx
gen_zero_extendv8hiv8si2 (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (V8SImode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:24641 */
extern rtx_insn *gen_split_3532 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3532 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3532 (sse.md:24641)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 24657 "../../gcc/config/i386/sse.md"
operands[1] = adjust_address_nv (operands[1], V4HImode, 0);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SIGN_EXTEND (V4SImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:24710 */
extern rtx_insn *gen_split_3538 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3538 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3538 (sse.md:24710)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 24730 "../../gcc/config/i386/sse.md"
{
  operands[0] = lowpart_subreg (V4SImode, operands[0], V8HImode);
  if (MEM_P (operands[1]))
    {
      operands[1] = lowpart_subreg (V4HImode, operands[1], DImode);
      operands[1] = gen_rtx_ZERO_EXTEND (V4SImode, operands[1]);
      emit_insn (gen_rtx_SET (operands[0], operands[1]));
      DONE;
    }
  operands[1] = lowpart_subreg (V8HImode, operands[1], DImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (V4SImode,
	gen_rtx_VEC_SELECT (V4HImode,
	operand1,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (4,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)]))))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:24892 */
rtx
gen_zero_extendv2qiv2di2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 24897 "../../gcc/config/i386/sse.md"
{
  if (!MEM_P (operands[1]))
    {
      rtx op1 = force_reg (V2QImode, operands[1]);
      op1 = lowpart_subreg (V16QImode, op1, V2QImode);
      emit_insn (gen_sse4_1_zero_extendv2qiv2di2 (operands[0], op1));
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (V2DImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25031 */
extern rtx_insn *gen_split_3554 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3554 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3554 (sse.md:25031)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25050 "../../gcc/config/i386/sse.md"
operands[1] = adjust_address_nv (operands[1], V2HImode, 0);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_SIGN_EXTEND (V2DImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25112 */
rtx
gen_extendv8siv8di2 (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (operand0,
	gen_rtx_SIGN_EXTEND (V8DImode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:25164 */
rtx
gen_extendv4siv4di2 (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (operand0,
	gen_rtx_SIGN_EXTEND (V4DImode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:25197 */
extern rtx_insn *gen_split_3564 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3564 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3564 (sse.md:25197)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25212 "../../gcc/config/i386/sse.md"
operands[1] = adjust_address_nv (operands[1], V2SImode, 0);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ZERO_EXTEND (V2DImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25330 */
rtx
gen_sse4_1_ptestzv2df (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (gen_rtx_REG (CCZmode,
	17),
	gen_rtx_UNSPEC (CCZmode,
	gen_rtvec (2,
		operand0,
		operand1),
	130));
}

/* ../../gcc/config/i386/sse.md:25330 */
rtx
gen_avx_ptestzv8sf (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (gen_rtx_REG (CCZmode,
	17),
	gen_rtx_UNSPEC (CCZmode,
	gen_rtvec (2,
		operand0,
		operand1),
	130));
}

/* ../../gcc/config/i386/sse.md:25338 */
rtx
gen_sse4_1_ptestcv1ti (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_UNSPEC (CCCmode,
	gen_rtvec (2,
		operand0,
		operand1),
	130));
}

/* ../../gcc/config/i386/sse.md:25346 */
rtx
gen_sse4_1_ptestv16qi (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_UNSPEC (CCmode,
	gen_rtvec (2,
		operand0,
		operand1),
	130));
}

/* ../../gcc/config/i386/sse.md:25346 */
rtx
gen_avx_ptestv4di (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_UNSPEC (CCmode,
	gen_rtvec (2,
		operand0,
		operand1),
	130));
}

/* ../../gcc/config/i386/sse.md:25367 */
extern rtx_insn *gen_split_3574 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3574 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3574 (sse.md:25367)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCZmode,
	17),
	gen_rtx_UNSPEC (CCZmode,
	gen_rtvec (2,
		operand0,
		operand1),
	130)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25381 */
extern rtx_insn *gen_split_3584 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3584 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3584 (sse.md:25381)\n");
  start_sequence ();
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_UNSPEC (CCCmode,
	gen_rtvec (1,
		const0_rtx),
	41)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25381 */
extern rtx_insn *gen_split_3591 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3591 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3591 (sse.md:25381)\n");
  start_sequence ();
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_UNSPEC (CCCmode,
	gen_rtvec (1,
		const0_rtx),
	41)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25393 */
extern rtx_insn *gen_split_3601 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3601 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3601 (sse.md:25393)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_UNSPEC (CCCmode,
	gen_rtvec (2,
		operand1,
		operand2),
	130)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand3), GET_MODE (operand3),
		gen_rtx_REG (CCCmode,
	17),
		const0_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25393 */
extern rtx_insn *gen_split_3611 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3611 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3611 (sse.md:25393)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_UNSPEC (CCCmode,
	gen_rtvec (2,
		operand1,
		operand2),
	130)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand3), GET_MODE (operand3),
		gen_rtx_REG (CCCmode,
	17),
		const0_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25393 */
extern rtx_insn *gen_split_3621 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3621 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3621 (sse.md:25393)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_UNSPEC (CCCmode,
	gen_rtvec (2,
		operand1,
		operand2),
	130)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand3), GET_MODE (operand3),
		gen_rtx_REG (CCCmode,
	17),
		const0_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25393 */
extern rtx_insn *gen_split_3631 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3631 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3631 (sse.md:25393)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_UNSPEC (CCCmode,
	gen_rtvec (2,
		operand1,
		operand2),
	130)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand3), GET_MODE (operand3),
		gen_rtx_REG (CCCmode,
	17),
		const0_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25393 */
extern rtx_insn *gen_split_3641 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3641 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3641 (sse.md:25393)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_UNSPEC (CCCmode,
	gen_rtvec (2,
		operand1,
		operand2),
	130)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand3), GET_MODE (operand3),
		gen_rtx_REG (CCCmode,
	17),
		const0_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25393 */
extern rtx_insn *gen_split_3651 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3651 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3651 (sse.md:25393)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_UNSPEC (CCCmode,
	gen_rtvec (2,
		operand1,
		operand2),
	130)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_fmt_ee (GET_CODE (operand3), GET_MODE (operand3),
		gen_rtx_REG (CCCmode,
	17),
		const0_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25408 */
extern rtx_insn *gen_split_3661 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3661 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3661 (sse.md:25408)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_UNSPEC (CCCmode,
	gen_rtvec (2,
		operand1,
		operand2),
	130)));
  emit_insn (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode,
	operand0),
	gen_rtx_fmt_ee (GET_CODE (operand3), GET_MODE (operand3),
		gen_rtx_REG (CCCmode,
	17),
		const0_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25424 */
extern rtx_insn *gen_split_3671 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3671 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3671 (sse.md:25424)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCCmode,
	17),
	gen_rtx_UNSPEC (CCCmode,
	gen_rtvec (2,
		operand1,
		operand2),
	130)));
  emit_jump_insn (gen_rtx_SET (pc_rtx,
	gen_rtx_IF_THEN_ELSE (VOIDmode,
	gen_rtx_fmt_ee (GET_CODE (operand3), GET_MODE (operand3),
		gen_rtx_REG (CCCmode,
	17),
		const0_rtx),
	operand0,
	pc_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25444 */
rtx
gen_nearbyintv16hf2 (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"nearbyintv16hf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25451 "../../gcc/config/i386/sse.md"
operands[2] = GEN_INT (ROUND_MXCSR | ROUND_NO_EXC);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	94)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25453 */
rtx
gen_rintv32hf2 (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"rintv32hf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25460 "../../gcc/config/i386/sse.md"
operands[2] = GEN_INT (ROUND_MXCSR);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	94)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25463 */
rtx
gen_lrintv16sfv16si2 (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SImode,
	gen_rtvec (1,
		operand1),
	46));
}

/* ../../gcc/config/i386/sse.md:25503 */
rtx
gen_avx512f_roundps512 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25508 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_avx512f_rndscalev16sf (operands[0], operands[1], operands[2]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25636 */
rtx
gen_floorv8sf2 (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"floorv8sf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25643 "../../gcc/config/i386/sse.md"
operands[2] = GEN_INT (ROUND_FLOOR | ROUND_NO_EXC);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	94)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25645 */
rtx
gen_lfloorv8hfv8hi2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"lfloorv8hfv8hi2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25649 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V8HFmode);
  emit_insn (gen_floorv8hf2 (tmp, operands[1]));
  emit_insn (gen_fix_truncv8hfv8hi2 (operands[0], tmp));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25667 */
rtx
gen_ceilv8hf2 (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"ceilv8hf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25674 "../../gcc/config/i386/sse.md"
operands[2] = GEN_INT (ROUND_CEIL | ROUND_NO_EXC);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8HFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	94)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25676 */
rtx
gen_lceilv8hfv8hi2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"lceilv8hfv8hi2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25680 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V8HFmode);
  emit_insn (gen_ceilv8hf2 (tmp, operands[1]));
  emit_insn (gen_fix_truncv8hfv8hi2 (operands[0], tmp));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25698 */
rtx
gen_btruncv16sf2 (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"btruncv16sf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25705 "../../gcc/config/i386/sse.md"
operands[2] = GEN_INT (ROUND_TRUNC | ROUND_NO_EXC);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (2,
		operand1,
		operand2),
	94)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25707 */
rtx
gen_roundv8sf2 (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"roundv8sf2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25717 "../../gcc/config/i386/sse.md"
{
  machine_mode scalar_mode;
  const struct real_format *fmt;
  REAL_VALUE_TYPE pred_half, half_minus_pred_half;
  rtx half, vec_half;

  scalar_mode = GET_MODE_INNER (V8SFmode);

  /* load nextafter (0.5, 0.0) */
  fmt = REAL_MODE_FORMAT (scalar_mode);
  real_2expN (&half_minus_pred_half, -(fmt->p) - 1, scalar_mode);
  real_arithmetic (&pred_half, MINUS_EXPR, &dconsthalf, &half_minus_pred_half);
  half = const_double_from_real_value (pred_half, scalar_mode);

  vec_half = ix86_build_const_vector (V8SFmode, true, half);
  vec_half = force_reg (V8SFmode, vec_half);

  operands[2] = gen_reg_rtx (V8SFmode);
  emit_insn (gen_copysignv8sf3 (operands[2], vec_half, operands[1]));

  operands[3] = gen_reg_rtx (V8SFmode);
  operands[4] = GEN_INT (ROUND_TRUNC);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand3,
	gen_rtx_PLUS (V8SFmode,
	operand1,
	operand2)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (2,
		copy_rtx (operand3),
		operand4),
	94)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:25752 */
rtx
gen_lroundv4dfv4di2 (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL _Pragma ("GCC error \"lroundv4dfv4di2 cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 25756 "../../gcc/config/i386/sse.md"
{
  rtx tmp = gen_reg_rtx (V4DFmode);
  emit_insn (gen_roundv4df2 (tmp, operands[1]));
  emit_insn (gen_fix_truncv4dfv4di2 (operands[0], tmp));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:26217 */
extern rtx_insn *gen_split_3684 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3684 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3684 (sse.md:26217)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (V16HImode,
	operand3,
	operand2,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:26217 */
extern rtx_insn *gen_split_3689 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3689 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3689 (sse.md:26217)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (V2DImode,
	operand3,
	operand2,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:26229 */
extern rtx_insn *gen_split_3699 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3699 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3699 (sse.md:26229)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (V16QImode,
	operand3,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:26229 */
extern rtx_insn *gen_split_3709 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3709 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3709 (sse.md:26229)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_IF_THEN_ELSE (V8HFmode,
	operand3,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:26560 */
rtx
gen_rotrv8hi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 26566 "../../gcc/config/i386/sse.md"
{
  /* If we were given a scalar, convert it to parallel */
  if (! const_0_to_15_operand (operands[2], SImode))
    {
      rtvec vs = rtvec_alloc (8);
      rtx par = gen_rtx_PARALLEL (V8HImode, vs);
      rtx neg = gen_reg_rtx (V8HImode);
      rtx reg = gen_reg_rtx (V8HImode);
      rtx op2 = operands[2];
      int i;

      if (GET_MODE (op2) != HImode)
	{
	  op2 = gen_reg_rtx (HImode);
	  convert_move (op2, operands[2], false);
	}

      for (i = 0; i < 8; i++)
	RTVEC_ELT (vs, i) = op2;

      emit_insn (gen_vec_initv8hihi (reg, par));
      emit_insn (gen_negv8hi2 (neg, reg));
      emit_insn (gen_xop_vrotlv8hi3 (operands[0], operands[1], neg));
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ROTATERT (V8HImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:26665 */
rtx
gen_vlshrv8hi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 26671 "../../gcc/config/i386/sse.md"
{
  if (TARGET_XOP)
    {
      rtx neg = gen_reg_rtx (V8HImode);
      emit_insn (gen_negv8hi2 (neg, operands[2]));
      emit_insn (gen_xop_shlv8hi3 (operands[0], operands[1], neg));
      DONE;
    }
    else if (V8HImode == V16QImode)
    {
      ix86_expand_vecop_qihi (LSHIFTRT, operands[0], operands[1], operands[2]);
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_LSHIFTRT (V8HImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:26702 */
rtx
gen_vashrv32hi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 26708 "../../gcc/config/i386/sse.md"
{
  if (V32HImode == V32QImode || V32HImode == V64QImode)
    {
      ix86_expand_vecop_qihi (ASHIFTRT, operands[0], operands[1], operands[2]);
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ASHIFTRT (V32HImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:26834 */
rtx
gen_vashlv16qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 26840 "../../gcc/config/i386/sse.md"
{
  if (TARGET_XOP)
  {
    emit_insn (gen_xop_shav16qi3 (operands[0], operands[1], operands[2]));
    DONE;
  }
  else if (V16QImode == V16QImode)
  {
    ix86_expand_vecop_qihi (ASHIFT, operands[0], operands[1], operands[2]);
    DONE;
  }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ASHIFT (V16QImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:26920 */
rtx
gen_ashrv32qi3 (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 26926 "../../gcc/config/i386/sse.md"
{
  if (TARGET_XOP && V32QImode == V16QImode)
    {
      bool negate = false;
      rtx (*gen) (rtx, rtx, rtx);
      rtx tmp, par;
      int i;

      if (ASHIFTRT != ASHIFT)
	{
	  if (CONST_INT_P (operands[2]))
	    operands[2] = GEN_INT (-INTVAL (operands[2]));
	  else
	    negate = true;
	}
      par = gen_rtx_PARALLEL (V16QImode, rtvec_alloc (16));
      tmp = lowpart_subreg (QImode, operands[2], SImode);
      for (i = 0; i < 16; i++)
	XVECEXP (par, 0, i) = tmp;

      tmp = gen_reg_rtx (V16QImode);
      emit_insn (gen_vec_initv16qiqi (tmp, par));

      if (negate)
	emit_insn (gen_negv16qi2 (tmp, tmp));

      gen = (ASHIFTRT == LSHIFTRT ? gen_xop_shlv16qi3 : gen_xop_shav16qi3);
      emit_insn (gen (operands[0], operands[1], tmp));
    }
  else
    ix86_expand_vecop_qihi (ASHIFTRT, operands[0], operands[1], operands[2]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_ASHIFTRT (V32QImode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:27443 */
rtx
gen_avx512f_vpermilv8df (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 27449 "../../gcc/config/i386/sse.md"
{
  int mask = INTVAL (operands[2]);
  rtx perm[8];

  int i;
  for (i = 0; i < 8; i = i + 2)
    {
      perm[i]     = GEN_INT (((mask >> i)       & 1) + i);
      perm[i + 1] = GEN_INT (((mask >> (i + 1)) & 1) + i);
    }

  operands[2]
    = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (8, perm));
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_SELECT (V8DFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:27464 */
rtx
gen_avx_vpermilv8sf (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 27470 "../../gcc/config/i386/sse.md"
{
  int mask = INTVAL (operands[2]);
  rtx perm[8];

  int i;
  for (i = 0; i < 8; i = i + 4)
    {
      perm[i]     = GEN_INT (((mask >> 0) & 3) + i);
      perm[i + 1] = GEN_INT (((mask >> 2) & 3) + i);
      perm[i + 2] = GEN_INT (((mask >> 4) & 3) + i);
      perm[i + 3] = GEN_INT (((mask >> 6) & 3) + i);
    }

  operands[2]
    = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (8, perm));
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_SELECT (V8SFmode,
	operand1,
	operand2)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:27588 */
rtx
gen_avx512f_permv8df_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 27595 "../../gcc/config/i386/sse.md"
{
  int mask = INTVAL (operands[2]);
  emit_insn (gen_avx512f_permv8df_1_mask (operands[0], operands[1],
					    GEN_INT ((mask >> 0) & 3),
					    GEN_INT ((mask >> 2) & 3),
					    GEN_INT ((mask >> 4) & 3),
					    GEN_INT ((mask >> 6) & 3),
					    GEN_INT (((mask >> 0) & 3) + 4),
					    GEN_INT (((mask >> 2) & 3) + 4),
					    GEN_INT (((mask >> 4) & 3) + 4),
					    GEN_INT (((mask >> 6) & 3) + 4),
					    operands[3], operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:27984 */
extern rtx_insn *gen_split_3729 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3729 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3729 (sse.md:27984)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 27993 "../../gcc/config/i386/sse.md"
operands[2] = gen_lowpart (V4SFmode, operands[0]);
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  emit_insn (gen_rtx_SET (operand2,
	gen_rtx_VEC_DUPLICATE (V4SFmode,
	operand1)));
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V8SFmode,
	copy_rtx (operand2),
	copy_rtx (operand2))));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28154 */
rtx
gen_avx512vl_vpermi2varv4df3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx operand5;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28165 "../../gcc/config/i386/sse.md"
{
  operands[2] = force_reg (V4DImode, operands[2]);
  operands[5] = gen_lowpart (V4DFmode, operands[2]);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4DFmode,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (3,
		operand2,
		operand1,
		operand3),
	155),
	operand5,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28154 */
rtx
gen_avx512vl_vpermi2varv16qi3_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx operand5;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28165 "../../gcc/config/i386/sse.md"
{
  operands[2] = force_reg (V16QImode, operands[2]);
  operands[5] = gen_lowpart (V16QImode, operands[2]);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16QImode,
	gen_rtx_UNSPEC (V16QImode,
	gen_rtvec (3,
		operand2,
		operand1,
		operand3),
	155),
	operand5,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28202 */
rtx
gen_avx512vl_vpermt2varv4sf3_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28209 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_avx512vl_vpermt2varv4sf3_maskz_1 (
	operands[0], operands[1], operands[2], operands[3],
	CONST0_RTX (V4SFmode), operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28262 */
rtx
gen_avx_vperm2f128v8sf3 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28270 "../../gcc/config/i386/sse.md"
{
  int mask = INTVAL (operands[3]);
  if ((mask & 0x88) == 0)
    {
      rtx perm[8], t1, t2;
      int i, base, nelt = 8, nelt2 = nelt / 2;

      base = (mask & 3) * nelt2;
      for (i = 0; i < nelt2; ++i)
	perm[i] = GEN_INT (base + i);

      base = ((mask >> 4) & 3) * nelt2;
      for (i = 0; i < nelt2; ++i)
	perm[i + nelt2] = GEN_INT (base + i);

      t2 = gen_rtx_VEC_CONCAT (V16SFmode,
			       operands[1], operands[2]);
      t1 = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (nelt, perm));
      t2 = gen_rtx_VEC_SELECT (V8SFmode, t2, t1);
      t2 = gen_rtx_SET (operands[0], t2);
      emit_insn (t2);
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	146)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28400 */
rtx
gen_avx_vinsertf128v8sf (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28406 "../../gcc/config/i386/sse.md"
{
  rtx (*insn)(rtx, rtx, rtx);

  switch (INTVAL (operands[3]))
    {
    case 0:
      insn = gen_vec_set_lo_v8sf;
      break;
    case 1:
      insn = gen_vec_set_hi_v8sf;
      break;
    default:
      gcc_unreachable ();
    }

  emit_insn (insn (operands[0], operands[1], operands[2]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28664 */
rtx
gen_maskloadv8siv8si (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL _Pragma ("GCC error \"maskloadv8siv8si cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28672 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_maskloadv8siv8si_1 (operands[0],
						       operands[1],
						       operands[2]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (3,
		operand2,
		operand1,
		operand3),
	47)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28689 */
rtx
gen_maskloadv32hisi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  return gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V32HImode,
	gen_rtx_UNSPEC (V32HImode,
	gen_rtvec (1,
		operand1),
	177),
	operand3,
	operand2));
}

/* ../../gcc/config/i386/sse.md:28699 */
rtx
gen_maskstorev2dfv2di (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (3,
		operand2,
		operand1,
		operand0),
	47));
}

/* ../../gcc/config/i386/sse.md:28708 */
rtx
gen_maskstorev8siqi (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (3,
		operand1,
		operand0,
		operand2),
	47));
}

/* ../../gcc/config/i386/sse.md:28708 */
rtx
gen_maskstorev2dfqi (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (3,
		operand1,
		operand0,
		operand2),
	47));
}

/* ../../gcc/config/i386/sse.md:28717 */
rtx
gen_maskstorev32bfsi (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  return gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V32BFmode,
	gen_rtvec (3,
		operand1,
		operand0,
		operand2),
	47));
}

/* ../../gcc/config/i386/sse.md:28769 */
extern rtx_insn *gen_split_3739 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3739 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3739 (sse.md:28769)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28780 "../../gcc/config/i386/sse.md"
{
  if (constm1_operand (operands[2], V8SImode))
    emit_move_insn (operands[0], operands[1]);
  else
    emit_note (NOTE_INSN_DELETED);

  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28769 */
extern rtx_insn *gen_split_3749 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3749 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3749 (sse.md:28769)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28780 "../../gcc/config/i386/sse.md"
{
  if (constm1_operand (operands[2], V8BFmode))
    emit_move_insn (operands[0], operands[1]);
  else
    emit_note (NOTE_INSN_DELETED);

  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28789 */
rtx
gen_cbranchv32hi4 (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28799 "../../gcc/config/i386/sse.md"
{
  ix86_expand_branch (GET_CODE (operands[0]),
		      operands[1], operands[2], operands[3]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (gen_rtx_REG (CCmode,
	17),
	gen_rtx_COMPARE (CCmode,
	operand1,
	operand2)));
  emit_jump_insn (gen_rtx_SET (pc_rtx,
	gen_rtx_IF_THEN_ELSE (VOIDmode,
	gen_rtx_fmt_ee (GET_CODE (operand0), VOIDmode,
		gen_rtx_REG (CCmode,
	17),
		const0_rtx),
	gen_rtx_LABEL_REF (VOIDmode,
	operand3),
	pc_rtx)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28806 */
extern rtx_insn *gen_split_3757 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3757 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3757 (sse.md:28806)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28815 "../../gcc/config/i386/sse.md"
{
  if (REG_P (operands[0]))
    operands[0] = gen_lowpart (V4SFmode, operands[0]);
  else
    operands[1] = lowpart_subreg (V8SFmode, operands[1],
				  V4SFmode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28849 */
rtx
gen_vec_initv8sisi (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28853 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_init (false, operands[0], operands[1]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28849 */
rtx
gen_vec_initv8bfbf (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28853 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_init (false, operands[0], operands[1]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28858 */
rtx
gen_vec_initv32qiv16qi (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28862 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_init (false, operands[0], operands[1]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28858 */
rtx
gen_vec_initv32hfv16hf (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28862 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_init (false, operands[0], operands[1]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28858 */
rtx
gen_vec_initv4dfv2df (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28862 "../../gcc/config/i386/sse.md"
{
  ix86_expand_vector_init (false, operands[0], operands[1]);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit (operand0, true);
  emit (operand1, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28867 */
rtx
gen_cond_ashrv8hi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28876 "../../gcc/config/i386/sse.md"
{
  if (const_vec_duplicate_p (operands[3]))
    {
      operands[3] = unwrap_const_vec_duplicate (operands[3]);
      operands[3] = lowpart_subreg (DImode, operands[3], HImode);
      emit_insn (gen_ashrv8hi3_mask (operands[0],
					 operands[2],
					 operands[3],
					 operands[4],
					 operands[1]));
    }
  else
    emit_insn (gen_avx512vl_ashrvv8hi_mask (operands[0],
						     operands[2],
						     operands[3],
						     operands[4],
						     operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8HImode,
	gen_rtx_ASHIFTRT (V8HImode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:28867 */
rtx
gen_cond_ashlv8di (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL _Pragma ("GCC error \"cond_ashlv8di cannot FAIL\"") (void)0
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 28876 "../../gcc/config/i386/sse.md"
{
  if (const_vec_duplicate_p (operands[3]))
    {
      operands[3] = unwrap_const_vec_duplicate (operands[3]);
      operands[3] = lowpart_subreg (DImode, operands[3], DImode);
      emit_insn (gen_ashlv8di3_mask (operands[0],
					 operands[2],
					 operands[3],
					 operands[4],
					 operands[1]));
    }
  else
    emit_insn (gen_avx512f_ashlvv8di_mask (operands[0],
						     operands[2],
						     operands[3],
						     operands[4],
						     operands[1]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8DImode,
	gen_rtx_ASHIFT (V8DImode,
	operand2,
	operand3),
	operand4,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:29051 */
extern rtx_insn *gen_split_3760 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3760 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3760 (sse.md:29051)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29064 "../../gcc/config/i386/sse.md"
{
  operands[1] = gen_lowpart (V16QImode, operands[1]);
  operands[5] = CONST0_RTX (V16QImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V32QImode,
	operand1,
	operand5)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:29051 */
extern rtx_insn *gen_split_3765 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3765 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3765 (sse.md:29051)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29064 "../../gcc/config/i386/sse.md"
{
  operands[1] = gen_lowpart (V8SImode, operands[1]);
  operands[5] = CONST0_RTX (V8SImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V16SImode,
	operand1,
	operand5)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:29051 */
extern rtx_insn *gen_split_3775 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3775 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3775 (sse.md:29051)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29064 "../../gcc/config/i386/sse.md"
{
  operands[1] = gen_lowpart (V8BFmode, operands[1]);
  operands[5] = CONST0_RTX (V8BFmode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V16BFmode,
	operand1,
	operand5)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:29190 */
rtx
gen_avx512f_vcvtps2ph512_mask_sae (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29200 "../../gcc/config/i386/sse.md"
{
  int round = INTVAL (operands[2]);
  /* Separate {sae} from rounding control imm,
     imm[3:7] will be ignored by the instruction.  */
  if (round & 8)
    {
      emit_insn (gen_avx512f_vcvtps2ph512_mask_round (operands[0], operands[1],
	  operands[2], operands[3], operands[4], GEN_INT (8)));
      DONE;
    }
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V16HImode,
	gen_rtx_UNSPEC (V16HImode,
	gen_rtvec (2,
		operand1,
		operand2),
	150),
	operand3,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:29320 */
rtx
gen_avx2_gatherdiv2df (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx operand6;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[8];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29335 "../../gcc/config/i386/sse.md"
{
  operands[6]
    = gen_rtx_UNSPEC (Pmode, gen_rtvec (3, operands[2], operands[3],
					operands[5]), UNSPEC_VSIBADDR);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
    operand6 = operands[6];
    (void) operand6;
  }
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (4,
		operand1,
		gen_rtx_MEM (DFmode,
	operand6),
		gen_rtx_MEM (BLKmode,
	gen_rtx_SCRATCH (VOIDmode)),
		operand4),
	153)),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V2DFmode)))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:29435 */
rtx
gen_avx512f_gathersiv8df (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx operand6;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[8];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29448 "../../gcc/config/i386/sse.md"
{
  operands[6]
    = gen_rtx_UNSPEC (Pmode, gen_rtvec (3, operands[2], operands[3],
					operands[5]), UNSPEC_VSIBADDR);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
    operand6 = operands[6];
    (void) operand6;
  }
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V8DFmode,
	gen_rtvec (3,
		operand1,
		operand4,
		gen_rtx_MEM (DFmode,
	operand6)),
	153)),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (QImode)))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:29497 */
rtx
gen_avx512f_gatherdiv16sf (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx operand6;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[8];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29510 "../../gcc/config/i386/sse.md"
{
  operands[6]
    = gen_rtx_UNSPEC (Pmode, gen_rtvec (3, operands[2], operands[3],
					operands[5]), UNSPEC_VSIBADDR);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
    operand6 = operands[6];
    (void) operand6;
  }
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V16SFmode,
	gen_rtvec (3,
		operand1,
		operand4,
		gen_rtx_MEM (SFmode,
	operand6)),
	153)),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (QImode)))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:29497 */
rtx
gen_avx512vl_gatherdiv2df (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5)
{
  rtx operand6;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[8];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29510 "../../gcc/config/i386/sse.md"
{
  operands[6]
    = gen_rtx_UNSPEC (Pmode, gen_rtvec (3, operands[2], operands[3],
					operands[5]), UNSPEC_VSIBADDR);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
    operand6 = operands[6];
    (void) operand6;
  }
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V2DFmode,
	gen_rtvec (3,
		operand1,
		operand4,
		gen_rtx_MEM (DFmode,
	operand6)),
	153)),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (QImode)))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:29567 */
rtx
gen_avx512vl_scattersiv4sf (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx operand5;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[7];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29579 "../../gcc/config/i386/sse.md"
{
  operands[5]
    = gen_rtx_UNSPEC (Pmode, gen_rtvec (4, operands[0], operands[2],
					operands[4], operands[1]),
					UNSPEC_VSIBADDR);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_MEM (V4SFmode,
	operand5),
	gen_rtx_UNSPEC (V4SFmode,
	gen_rtvec (2,
		operand1,
		operand3),
	160)),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (QImode)))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:29607 */
rtx
gen_avx512vl_scatterdiv4df (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx operand5;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[7];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29619 "../../gcc/config/i386/sse.md"
{
  operands[5]
    = gen_rtx_UNSPEC (Pmode, gen_rtvec (4, operands[0], operands[2],
					operands[4], operands[1]),
					UNSPEC_VSIBADDR);
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_MEM (V4DFmode,
	operand5),
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (2,
		operand1,
		operand3),
	160)),
		gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (QImode)))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:29701 */
rtx
gen_avx512vl_expandv4df_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29709 "../../gcc/config/i386/sse.md"
operands[2] = CONST0_RTX (V4DFmode);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (V4DFmode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	171)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:29739 */
extern rtx_insn *gen_split_3788 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3788 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3788 (sse.md:29739)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29751 "../../gcc/config/i386/sse.md"
{
  unsigned HOST_WIDE_INT mask = INTVAL (operands[3]);
  bool has_zero = false;
  unsigned n = GET_MODE_NUNITS (V8SFmode), i;
  unsigned ones = 0;

  /* If all ones bits is in mask's lower part,
     get number of ones and assign it to ONES.  */
  for (i = 0; i != n; i++)
    {
      if ((mask & HOST_WIDE_INT_1U << i) && has_zero)
	break;

      /* Record first zero bit.  */
      if (!(mask & HOST_WIDE_INT_1U << i) && !has_zero)
	{
	  has_zero = true;
	  ones = i;
	}
    }

  if (!has_zero)
    ones = n;

  if (i != n || (ones != 0 && ones != n))
    {
      rtx reg = gen_reg_rtx (QImode);
      emit_move_insn (reg, operands[3]);
      enum insn_code icode;
      if (i == n)
      /* For masks with all one bits in it's lower part,
	 we can transform v{,p}expand* to vmovdq* with
	 mask operand.  */
	icode = CODE_FOR_avx512vl_loadv8sf_mask;
      else
	icode = CODE_FOR_expandv8sf_mask;
      emit_insn (GEN_FCN (icode) (operands[0], operands[1], operands[2], reg));
    }
  else
    /* For ALL_MASK_ONES or CONST0_RTX mask, transform it to simple mov.  */
    emit_move_insn (operands[0], ones ? operands[1] : operands[2]);
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:29739 */
extern rtx_insn *gen_split_3798 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3798 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands ATTRIBUTE_UNUSED)
{
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3798 (sse.md:29739)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 29751 "../../gcc/config/i386/sse.md"
{
  unsigned HOST_WIDE_INT mask = INTVAL (operands[3]);
  bool has_zero = false;
  unsigned n = GET_MODE_NUNITS (V32HImode), i;
  unsigned ones = 0;

  /* If all ones bits is in mask's lower part,
     get number of ones and assign it to ONES.  */
  for (i = 0; i != n; i++)
    {
      if ((mask & HOST_WIDE_INT_1U << i) && has_zero)
	break;

      /* Record first zero bit.  */
      if (!(mask & HOST_WIDE_INT_1U << i) && !has_zero)
	{
	  has_zero = true;
	  ones = i;
	}
    }

  if (!has_zero)
    ones = n;

  if (i != n || (ones != 0 && ones != n))
    {
      rtx reg = gen_reg_rtx (SImode);
      emit_move_insn (reg, operands[3]);
      enum insn_code icode;
      if (i == n)
      /* For masks with all one bits in it's lower part,
	 we can transform v{,p}expand* to vmovdq* with
	 mask operand.  */
	icode = CODE_FOR_avx512bw_loadv32hi_mask;
      else
	icode = CODE_FOR_expandv32hi_mask;
      emit_insn (GEN_FCN (icode) (operands[0], operands[1], operands[2], reg));
    }
  else
    /* For ALL_MASK_ONES or CONST0_RTX mask, transform it to simple mov.  */
    emit_move_insn (operands[0], ones ? operands[1] : operands[2]);
  DONE;
}
#undef DONE
#undef FAIL
  emit_insn (const0_rtx);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:30150 */
extern rtx_insn *gen_split_3804 (rtx_insn *, rtx *);
rtx_insn *
gen_split_3804 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_split_3804 (sse.md:30150)\n");
  start_sequence ();
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 30159 "../../gcc/config/i386/sse.md"
{
  if (REG_P (operands[0]))
    operands[0] = gen_lowpart (V8SImode, operands[0]);
  else
    operands[1] = lowpart_subreg (V16SImode, operands[1],
				  V8SImode);
}
#undef DONE
#undef FAIL
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  emit_insn (gen_rtx_SET (operand0,
	operand1));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:30276 */
rtx
gen_popcountv4si2 (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (operand0,
	gen_rtx_POPCOUNT (V4SImode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:30326 */
rtx
gen_popcountv64qi2 (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (operand0,
	gen_rtx_POPCOUNT (V64QImode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:30326 */
rtx
gen_popcountv16hi2 (rtx operand0,
	rtx operand1)
{
  return gen_rtx_SET (operand0,
	gen_rtx_POPCOUNT (V16HImode,
	operand1));
}

/* ../../gcc/config/i386/sse.md:30438 */
rtx
gen_vpshrdv_v8si_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 30445 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_vpshrdv_v8si_maskz_1 (operands[0], operands[1],
					 operands[2], operands[3],
					 CONST0_RTX (V8SImode),
						     operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:30495 */
rtx
gen_vpshldv_v4di_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 30502 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_vpshldv_v4di_maskz_1 (operands[0], operands[1],
					 operands[2], operands[3],
					 CONST0_RTX (V4DImode),
						     operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:30682 */
rtx
gen_vpdpbusds_v16si_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 30689 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_vpdpbusds_v16si_maskz_1 (operands[0], operands[1],
					   operands[2], operands[3],
					   CONST0_RTX (V16SImode),
						       operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:30820 */
rtx
gen_vpdpwssds_v8si_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 30827 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_vpdpwssds_v8si_maskz_1 (operands[0], operands[1],
					   operands[2], operands[3],
					   CONST0_RTX (V8SImode),
						       operands[4]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:31067 */
rtx
gen_avx512f_cvtneps2bf16_v4sf_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 31073 "../../gcc/config/i386/sse.md"
{
  emit_insn (gen_avx512f_cvtneps2bf16_v4sf_mask_1(operands[0], operands[1],
    operands[2], operands[3], CONST0_RTX(V4BFmode)));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:31273 */
rtx
gen_encodekey256u32 (rtx operand0,
	rtx operand1)
{
  rtx operand2;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 31282 "../../gcc/config/i386/sse.md"
{
  rtx xmm_regs[7];
  rtx tmp_unspec;
  unsigned i;

  /* parallel rtx for encodekey256 predicate */
  operands[2] = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (9));

  for (i = 0; i < 7; i++)
    xmm_regs[i] = gen_rtx_REG (V2DImode, GET_SSE_REGNO (i));

  tmp_unspec
    = gen_rtx_UNSPEC_VOLATILE (SImode,
			       gen_rtvec (3, operands[1],
					  xmm_regs[0], xmm_regs[1]),
			       UNSPECV_ENCODEKEY256U32);

  XVECEXP (operands[2], 0, 0)
    = gen_rtx_SET (operands[0], tmp_unspec);

  tmp_unspec
    = gen_rtx_UNSPEC_VOLATILE (V2DImode,
			       gen_rtvec (1, const0_rtx),
			       UNSPECV_ENCODEKEY256U32);

  for (i = 0; i < 4; i++)
    XVECEXP (operands[2], 0, i + 1)
      = gen_rtx_SET (xmm_regs[i], tmp_unspec);

  for (i = 4; i < 7; i++)
    XVECEXP (operands[2], 0, i + 1)
      = gen_rtx_CLOBBER (VOIDmode, xmm_regs[i]);

  XVECEXP (operands[2], 0, 8)
    = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:31431 */
rtx
gen_vec_duplicatev8si (rtx operand0,
	rtx operand1)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 31436 "../../gcc/config/i386/sse.md"
{
  if (!ix86_expand_vector_init_duplicate (false,
					  GET_MODE (operands[0]),
					  operands[0],
					  operands[1]))
    gcc_unreachable ();
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_DUPLICATE (V8SImode,
	operand1)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:31506 */
rtx
gen_udot_prodv4siv16qi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 31512 "../../gcc/config/i386/sse.md"
{
  if ((16 == 64 && TARGET_AVX10_2_512)
      || (16 < 64 && (TARGET_AVXVNNIINT8 || TARGET_AVX10_2_256)))
    {
      operands[1] = lowpart_subreg (V4SImode,
				    force_reg (V16QImode, operands[1]),
				    V16QImode);
      operands[2] = lowpart_subreg (V4SImode,
				    force_reg (V16QImode, operands[2]),
				    V16QImode);
      emit_insn (gen_vpdpbuud_v4si (operands[0], operands[3],
						  operands[1], operands[2]));
   }
 else
   {
     /* Emulate with vpdpwssd.  */
     rtx op1_lo = gen_reg_rtx (V8HImode);
     rtx op1_hi = gen_reg_rtx (V8HImode);
     rtx op2_lo = gen_reg_rtx (V8HImode);
     rtx op2_hi = gen_reg_rtx (V8HImode);

     emit_insn (gen_vec_unpacku_lo_v16qi (op1_lo, operands[1]));
     emit_insn (gen_vec_unpacku_lo_v16qi (op2_lo, operands[2]));
     emit_insn (gen_vec_unpacku_hi_v16qi (op1_hi, operands[1]));
     emit_insn (gen_vec_unpacku_hi_v16qi (op2_hi, operands[2]));

     rtx res1 = gen_reg_rtx (V4SImode);
     rtx res2 = gen_reg_rtx (V4SImode);
     rtx sum = gen_reg_rtx (V4SImode);

     emit_move_insn (sum, CONST0_RTX (V4SImode));
     emit_insn (gen_sdot_prodv4siv8hi (res1,
						    op1_lo, op2_lo, sum));
     emit_insn (gen_sdot_prodv4siv8hi (res2,
						    op1_hi, op2_hi,
						    operands[3]));
     emit_insn (gen_addv4si3 (operands[0], res1, res2));
   }

  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:31590 */
rtx
gen_vpdpbssds_v4si_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx operand5;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 31601 "../../gcc/config/i386/sse.md"
operands[5] = CONST0_RTX (V4SImode);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	228),
	operand5,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:31769 */
rtx
gen_vcvtbiasph2bf8sv8hf_mask (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx operand5;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 31786 "../../gcc/config/i386/sse.md"
operands[5] = CONST0_RTX (V8QImode);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_CONCAT (V16QImode,
	gen_rtx_VEC_MERGE (V8QImode,
	gen_rtx_UNSPEC (V8QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	246),
	gen_rtx_VEC_SELECT (V8QImode,
	operand3,
	gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (8,
		const0_rtx,
		const1_rtx,
		const_int_rtx[MAX_SAVED_CONST_INT + (2)],
		const_int_rtx[MAX_SAVED_CONST_INT + (3)],
		const_int_rtx[MAX_SAVED_CONST_INT + (4)],
		const_int_rtx[MAX_SAVED_CONST_INT + (5)],
		const_int_rtx[MAX_SAVED_CONST_INT + (6)],
		const_int_rtx[MAX_SAVED_CONST_INT + (7)]))),
	operand4),
	operand5)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:31945 */
rtx
gen_udot_prodv16siv32hi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 31951 "../../gcc/config/i386/sse.md"
{
  operands[1] = lowpart_subreg (V16SImode,
                                force_reg (V32HImode, operands[1]),
                                V32HImode);
  operands[2] = lowpart_subreg (V16SImode,
                                force_reg (V32HImode, operands[2]),
                                V32HImode);
  emit_insn (gen_vpdpwuud_v16si (operands[0], operands[3],
					   operands[1], operands[2]));
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:31999 */
rtx
gen_vpdpwusds_v8si_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx operand5;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 32010 "../../gcc/config/i386/sse.md"
operands[5] = CONST0_RTX (V8SImode);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V8SImode,
	gen_rtx_UNSPEC (V8SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	234),
	operand5,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:31999 */
rtx
gen_vpdpwuuds_v4si_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx operand5;
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 32010 "../../gcc/config/i386/sse.md"
operands[5] = CONST0_RTX (V4SImode);
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_VEC_MERGE (V4SImode,
	gen_rtx_UNSPEC (V4SImode,
	gen_rtvec (3,
		operand1,
		operand2,
		operand3),
	238),
	operand5,
	operand4)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sse.md:32241 */
rtx
gen_avx10_2_fmsubnepbf16_v32bf_maskz (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 32248 "../../gcc/config/i386/sse.md"
{
    emit_insn (gen_avx10_2_fmsubnepbf16_v32bf_maskz_1 (operands[0], operands[1],
						      operands[2], operands[3], 
						      CONST0_RTX(V32BFmode), 
						      operands[4]));
    DONE;
  }
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sync.md:162 */
rtx
gen_atomic_loadqi (rtx operand0,
	rtx operand1,
	rtx operand2)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 168 "../../gcc/config/i386/sync.md"
{
  /* For DImode on 32-bit, we can use the FPU to perform the load.  */
  if (QImode == DImode && !TARGET_64BIT)
    emit_insn (gen_atomic_loaddi_fpu
	       (operands[0], operands[1],
	        assign_stack_temp (DImode, GET_MODE_SIZE (DImode))));
  else
    {
      rtx dst = operands[0];

      if (MEM_P (dst))
	dst = gen_reg_rtx (QImode);

      emit_move_insn (dst, operands[1]);

      /* Fix up the destination if needed.  */
      if (dst != operands[0])
	emit_move_insn (operands[0], dst);
    }
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
  }
  emit_insn (gen_rtx_SET (operand0,
	gen_rtx_UNSPEC (QImode,
	gen_rtvec (2,
		operand1,
		operand2),
	288)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sync.md:391 */
rtx
gen_atomic_compare_and_swapqi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4,
	rtx operand5,
	rtx operand6,
	rtx operand7)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[8];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
    operands[6] = operand6;
    operands[7] = operand7;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 401 "../../gcc/config/i386/sync.md"
{
  if (TARGET_RELAX_CMPXCHG_LOOP)
  {
    ix86_expand_cmpxchg_loop (&operands[0], operands[1], operands[2],
			      operands[3], operands[4], operands[6],
			      false, NULL);
  }
  else
  {
    emit_insn
      (gen_atomic_compare_and_swapqi_1
	(operands[1], operands[2], operands[3], operands[4], operands[6]));
      ix86_expand_setcc (operands[0], EQ, gen_rtx_REG (CCZmode, FLAGS_REG),
			const0_rtx);
  }
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
    operand5 = operands[5];
    (void) operand5;
    operand6 = operands[6];
    (void) operand6;
    operand7 = operands[7];
    (void) operand7;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, true);
  emit (operand5, true);
  emit (operand6, true);
  emit (operand7, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sync.md:539 */
extern rtx_insn *gen_peephole2_408 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_408 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_408 (sync.md:539)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  operand5 = operands[5];
  (void) operand5;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (operand0,
	operand1),
		gen_hard_reg_clobber (CCmode, 17))), true);
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (3,
		gen_rtx_SET (operand2,
	gen_rtx_UNSPEC_VOLATILE (QImode,
	gen_rtvec (4,
		operand3,
		copy_rtx (operand2),
		operand4,
		operand5),
	109)),
		gen_rtx_SET (copy_rtx (operand3),
	gen_rtx_UNSPEC_VOLATILE (QImode,
	gen_rtvec (1,
		const0_rtx),
	109)),
		gen_rtx_SET (gen_rtx_REG (CCZmode,
	17),
	gen_rtx_UNSPEC_VOLATILE (CCZmode,
	gen_rtvec (1,
		const0_rtx),
	109)))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sync.md:573 */
rtx
gen_atomic_fetch_andhi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 580 "../../gcc/config/i386/sync.md"
{
  ix86_expand_atomic_fetch_op_loop (operands[0], operands[1],
				    operands[2], AND, false,
				    false);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (operand0, true);
  emit_insn (gen_rtx_AND (HImode,
	operand1,
	operand2));
  emit (operand3, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sync.md:587 */
rtx
gen_atomic_or_fetchhi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 594 "../../gcc/config/i386/sync.md"
{
  ix86_expand_atomic_fetch_op_loop (operands[0], operands[1],
				    operands[2], IOR, true,
				    false);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (operand0, true);
  emit_insn (gen_rtx_IOR (HImode,
	operand1,
	operand2));
  emit (operand3, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sync.md:614 */
rtx
gen_atomic_nand_fetchsi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 620 "../../gcc/config/i386/sync.md"
{
  ix86_expand_atomic_fetch_op_loop (operands[0], operands[1],
				    operands[2], NOT, true,
				    false);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sync.md:643 */
rtx
gen_atomic_and_fetchti (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 650 "../../gcc/config/i386/sync.md"
{
  bool doubleword = (TImode == DImode && !TARGET_64BIT)
		    || (TImode == TImode);
  ix86_expand_atomic_fetch_op_loop (operands[0], operands[1],
				    operands[2], AND, true,
				    doubleword);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
  }
  emit (operand0, true);
  emit_insn (gen_rtx_AND (TImode,
	operand1,
	operand2));
  emit (operand3, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sync.md:709 */
extern rtx_insn *gen_peephole2_418 (rtx_insn *, rtx *);
rtx_insn *
gen_peephole2_418 (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx_insn *_val = NULL;
  if (dump_file)
    fprintf (dump_file, "Splitting with gen_peephole2_418 (sync.md:709)\n");
  start_sequence ();
  operand0 = operands[0];
  (void) operand0;
  operand1 = operands[1];
  (void) operand1;
  operand2 = operands[2];
  (void) operand2;
  operand3 = operands[3];
  (void) operand3;
  operand4 = operands[4];
  (void) operand4;
  emit (gen_rtx_PARALLEL (VOIDmode,
	gen_rtvec (2,
		gen_rtx_SET (gen_rtx_REG (CCZmode,
	17),
	gen_rtx_COMPARE (CCZmode,
	gen_rtx_UNSPEC_VOLATILE (DImode,
	gen_rtvec (2,
		operand1,
		operand4),
	110),
	operand3)),
		gen_rtx_SET (copy_rtx (operand1),
	gen_rtx_PLUS (DImode,
	copy_rtx (operand1),
	operand2)))), false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sync.md:925 */
rtx
gen_atomic_bit_test_and_complementdi (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 932 "../../gcc/config/i386/sync.md"
{
  emit_insn (gen_atomic_bit_test_and_complementdi_1 (operands[1],
							 operands[2],
							 operands[3]));
  rtx tem = gen_reg_rtx (QImode);
  ix86_expand_setcc (tem, EQ, gen_rtx_REG (CCCmode, FLAGS_REG), const0_rtx);
  rtx result = convert_modes (DImode, QImode, tem, 1);
  if (operands[4] == const0_rtx)
    result = expand_simple_binop (DImode, ASHIFT, result,
				  operands[2], operands[0], 0, OPTAB_WIDEN);
  if (result != operands[0])
    emit_move_insn (operands[0], result);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit (operand1, true);
  emit (operand2, true);
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sync.md:1000 */
rtx
gen_atomic_add_fetch_cmp_0di (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1007 "../../gcc/config/i386/sync.md"
{
  if (INTVAL (operands[4]) == GT || INTVAL (operands[4]) == LE)
    FAIL;
  emit_insn (gen_atomic_add_fetch_cmp_0di_1 (operands[1],
								  operands[2],
								  operands[3]));
  ix86_expand_setcc (operands[0], (enum rtx_code) INTVAL (operands[4]),
		     gen_rtx_REG (CCGOCmode, FLAGS_REG), const0_rtx);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit_insn (gen_rtx_PLUS (DImode,
	operand1,
	operand2));
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}

/* ../../gcc/config/i386/sync.md:1074 */
rtx
gen_atomic_xor_fetch_cmp_0si (rtx operand0,
	rtx operand1,
	rtx operand2,
	rtx operand3,
	rtx operand4)
{
  rtx_insn *_val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
#define FAIL return (end_sequence (), _val)
#define DONE return (_val = get_insns (), end_sequence (), _val)
#line 1081 "../../gcc/config/i386/sync.md"
{
  emit_insn (gen_atomic_xor_fetch_cmp_0si_1 (operands[1], operands[2],
						     operands[3]));
  ix86_expand_setcc (operands[0], (enum rtx_code) INTVAL (operands[4]),
		     gen_rtx_REG (CCNOmode, FLAGS_REG), const0_rtx);
  DONE;
}
#undef DONE
#undef FAIL
    operand0 = operands[0];
    (void) operand0;
    operand1 = operands[1];
    (void) operand1;
    operand2 = operands[2];
    (void) operand2;
    operand3 = operands[3];
    (void) operand3;
    operand4 = operands[4];
    (void) operand4;
  }
  emit (operand0, true);
  emit_insn (gen_rtx_XOR (SImode,
	operand1,
	operand2));
  emit (operand3, true);
  emit (operand4, false);
  _val = get_insns ();
  end_sequence ();
  return _val;
}



void
add_clobbers (rtx pattern ATTRIBUTE_UNUSED, int insn_code_number)
{
  switch (insn_code_number)
    {
    case 11016:
    case 11011:
      XVECEXP (pattern, 0, 2) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (DFmode));
      break;

    case 9739:
    case 9737:
    case 9735:
    case 9733:
    case 9731:
    case 9723:
    case 9715:
    case 9707:
    case 9699:
    case 9691:
    case 9683:
    case 9675:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V8SFmode));
      break;

    case 9738:
    case 9736:
    case 9734:
    case 9732:
    case 9730:
    case 9722:
    case 9714:
    case 9706:
    case 9698:
    case 9690:
    case 9682:
    case 9674:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V8SImode));
      break;

    case 9727:
    case 9719:
    case 9711:
    case 9703:
    case 9695:
    case 9687:
    case 9679:
    case 9671:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V4DFmode));
      break;

    case 9726:
    case 9718:
    case 9710:
    case 9702:
    case 9694:
    case 9686:
    case 9678:
    case 9670:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V4DImode));
      break;

    case 9725:
    case 9717:
    case 9709:
    case 9701:
    case 9693:
    case 9685:
    case 9677:
    case 9669:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V2DFmode));
      break;

    case 9724:
    case 9716:
    case 9708:
    case 9700:
    case 9692:
    case 9684:
    case 9676:
    case 9668:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V2DImode));
      break;

    case 8981:
    case 8977:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V16QImode));
      XVECEXP (pattern, 0, 2) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (SImode));
      break;

    case 9729:
    case 9721:
    case 9713:
    case 9705:
    case 9697:
    case 9689:
    case 9681:
    case 9673:
    case 4779:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V4SFmode));
      break;

    case 9728:
    case 9720:
    case 9712:
    case 9704:
    case 9696:
    case 9688:
    case 9680:
    case 9672:
    case 8627:
    case 2552:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V4SImode));
      break;

    case 2382:
    case 2381:
      XVECEXP (pattern, 0, 1) = gen_hard_reg_clobber (XFmode, 8);
      XVECEXP (pattern, 0, 2) = gen_hard_reg_clobber (XFmode, 9);
      XVECEXP (pattern, 0, 3) = gen_hard_reg_clobber (XFmode, 10);
      XVECEXP (pattern, 0, 4) = gen_hard_reg_clobber (XFmode, 11);
      XVECEXP (pattern, 0, 5) = gen_hard_reg_clobber (XFmode, 12);
      XVECEXP (pattern, 0, 6) = gen_hard_reg_clobber (XFmode, 13);
      XVECEXP (pattern, 0, 7) = gen_hard_reg_clobber (XFmode, 14);
      XVECEXP (pattern, 0, 8) = gen_hard_reg_clobber (XFmode, 15);
      XVECEXP (pattern, 0, 9) = gen_hard_reg_clobber (DImode, 28);
      XVECEXP (pattern, 0, 10) = gen_hard_reg_clobber (DImode, 29);
      XVECEXP (pattern, 0, 11) = gen_hard_reg_clobber (DImode, 30);
      XVECEXP (pattern, 0, 12) = gen_hard_reg_clobber (DImode, 31);
      XVECEXP (pattern, 0, 13) = gen_hard_reg_clobber (DImode, 32);
      XVECEXP (pattern, 0, 14) = gen_hard_reg_clobber (DImode, 33);
      XVECEXP (pattern, 0, 15) = gen_hard_reg_clobber (DImode, 34);
      XVECEXP (pattern, 0, 16) = gen_hard_reg_clobber (DImode, 35);
      break;

    case 1922:
    case 1921:
      XVECEXP (pattern, 0, 1) = gen_hard_reg_clobber (XFmode, 8);
      XVECEXP (pattern, 0, 2) = gen_hard_reg_clobber (XFmode, 9);
      XVECEXP (pattern, 0, 3) = gen_hard_reg_clobber (XFmode, 10);
      XVECEXP (pattern, 0, 4) = gen_hard_reg_clobber (XFmode, 11);
      XVECEXP (pattern, 0, 5) = gen_hard_reg_clobber (XFmode, 12);
      XVECEXP (pattern, 0, 6) = gen_hard_reg_clobber (XFmode, 13);
      XVECEXP (pattern, 0, 7) = gen_hard_reg_clobber (XFmode, 14);
      XVECEXP (pattern, 0, 8) = gen_hard_reg_clobber (XFmode, 15);
      break;

    case 1651:
    case 1647:
    case 1643:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (SImode));
      XVECEXP (pattern, 0, 2) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (SImode));
      XVECEXP (pattern, 0, 3) = gen_hard_reg_clobber (CCmode, 17);
      break;

    case 11030:
    case 11029:
    case 11028:
    case 11027:
    case 1864:
    case 1863:
    case 1862:
    case 1861:
    case 1788:
    case 1787:
    case 1629:
    case 1627:
    case 1625:
    case 1624:
    case 1561:
    case 1560:
    case 1559:
    case 1558:
    case 1545:
    case 1544:
    case 1542:
    case 1541:
    case 1539:
    case 1538:
    case 1523:
    case 1522:
    case 1519:
    case 1517:
    case 1516:
    case 1021:
    case 1020:
    case 1019:
    case 1018:
    case 1017:
    case 1016:
    case 677:
    case 660:
    case 659:
    case 658:
    case 657:
    case 656:
    case 655:
    case 654:
    case 653:
    case 652:
    case 651:
    case 650:
    case 649:
    case 648:
    case 647:
      XVECEXP (pattern, 0, 2) = gen_hard_reg_clobber (CCmode, 17);
      break;

    case 676:
    case 675:
    case 674:
    case 673:
    case 672:
    case 671:
    case 670:
    case 669:
    case 668:
    case 667:
    case 646:
    case 645:
    case 644:
    case 643:
    case 642:
    case 641:
    case 640:
    case 639:
      XVECEXP (pattern, 0, 3) = gen_hard_reg_clobber (CCmode, 17);
      break;

    case 634:
    case 633:
    case 630:
    case 629:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (DImode));
      XVECEXP (pattern, 0, 2) = gen_hard_reg_clobber (CCmode, 17);
      break;

    case 1507:
    case 638:
    case 637:
    case 636:
    case 635:
    case 632:
    case 631:
    case 628:
    case 627:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (SImode));
      XVECEXP (pattern, 0, 2) = gen_hard_reg_clobber (CCmode, 17);
      break;

    case 611:
      XVECEXP (pattern, 0, 2) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (SImode));
      break;

    case 610:
      XVECEXP (pattern, 0, 2) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (HImode));
      break;

    case 1878:
    case 1587:
    case 1583:
    case 1575:
    case 1569:
    case 1237:
    case 1236:
    case 1118:
    case 987:
    case 891:
    case 890:
    case 818:
    case 546:
    case 537:
    case 522:
    case 520:
    case 518:
    case 326:
    case 319:
    case 317:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (DImode));
      break;

    case 1877:
    case 1586:
    case 1582:
    case 1574:
    case 1568:
    case 1235:
    case 1234:
    case 1117:
    case 986:
    case 889:
    case 888:
    case 817:
    case 545:
    case 536:
    case 521:
    case 519:
    case 517:
    case 325:
    case 322:
    case 316:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (SImode));
      break;

    case 9849:
    case 9848:
    case 9837:
    case 9836:
    case 9777:
    case 9776:
    case 9765:
    case 9764:
    case 9753:
    case 9752:
    case 9741:
    case 9740:
    case 1233:
    case 1232:
    case 1116:
    case 985:
    case 887:
    case 886:
    case 544:
    case 535:
    case 324:
    case 321:
    case 315:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (HImode));
      break;

    case 9883:
    case 9882:
    case 9881:
    case 9880:
    case 9879:
    case 9878:
    case 9877:
    case 9876:
    case 9875:
    case 9874:
    case 9873:
    case 9872:
    case 9871:
    case 9870:
    case 9869:
    case 9868:
    case 9867:
    case 9866:
    case 9865:
    case 9864:
    case 9863:
    case 9862:
    case 9861:
    case 9860:
    case 9859:
    case 9858:
    case 9857:
    case 9856:
    case 9855:
    case 9854:
    case 9853:
    case 9852:
    case 9851:
    case 9850:
    case 9847:
    case 9846:
    case 9845:
    case 9844:
    case 9843:
    case 9842:
    case 9841:
    case 9840:
    case 9839:
    case 9838:
    case 9835:
    case 9834:
    case 9833:
    case 9832:
    case 9831:
    case 9830:
    case 9829:
    case 9828:
    case 9827:
    case 9826:
    case 9825:
    case 9824:
    case 9823:
    case 9822:
    case 9821:
    case 9820:
    case 9819:
    case 9818:
    case 9817:
    case 9816:
    case 9815:
    case 9814:
    case 9813:
    case 9812:
    case 9811:
    case 9810:
    case 9809:
    case 9808:
    case 9807:
    case 9806:
    case 9805:
    case 9804:
    case 9803:
    case 9802:
    case 9801:
    case 9800:
    case 9799:
    case 9798:
    case 9797:
    case 9796:
    case 9795:
    case 9794:
    case 9793:
    case 9792:
    case 9791:
    case 9790:
    case 9789:
    case 9788:
    case 9787:
    case 9786:
    case 9785:
    case 9784:
    case 9783:
    case 9782:
    case 9781:
    case 9780:
    case 9779:
    case 9778:
    case 9775:
    case 9774:
    case 9773:
    case 9772:
    case 9771:
    case 9770:
    case 9769:
    case 9768:
    case 9767:
    case 9766:
    case 9763:
    case 9762:
    case 9761:
    case 9760:
    case 9759:
    case 9758:
    case 9757:
    case 9756:
    case 9755:
    case 9754:
    case 9751:
    case 9750:
    case 9749:
    case 9748:
    case 9747:
    case 9746:
    case 9745:
    case 9744:
    case 9743:
    case 9742:
    case 1231:
    case 1230:
    case 1115:
    case 984:
    case 885:
    case 884:
    case 543:
    case 534:
    case 323:
    case 320:
    case 314:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (QImode));
      break;

    case 612:
    case 263:
    case 262:
    case 261:
      XVECEXP (pattern, 0, 2) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (DImode));
      break;

    case 256:
    case 255:
    case 254:
      XVECEXP (pattern, 0, 2) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V4SImode));
      XVECEXP (pattern, 0, 3) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V4SImode));
      break;

    case 1745:
    case 1744:
    case 235:
      XVECEXP (pattern, 0, 3) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (XFmode));
      break;

    case 1727:
    case 1717:
    case 1716:
    case 1715:
    case 231:
    case 230:
    case 229:
      XVECEXP (pattern, 0, 1) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (XFmode));
      break;

    case 224:
      XVECEXP (pattern, 0, 2) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V2DFmode));
      XVECEXP (pattern, 0, 3) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V2DFmode));
      break;

    case 223:
      XVECEXP (pattern, 0, 2) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V4SFmode));
      XVECEXP (pattern, 0, 3) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (V4SFmode));
      break;

    case 1335:
    case 1333:
    case 186:
      XVECEXP (pattern, 0, 1) = gen_hard_reg_clobber (CCmode, 17);
      XVECEXP (pattern, 0, 2) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (DImode));
      break;

    case 1334:
    case 1332:
    case 185:
      XVECEXP (pattern, 0, 1) = gen_hard_reg_clobber (CCmode, 17);
      XVECEXP (pattern, 0, 2) = gen_rtx_CLOBBER (VOIDmode,
	gen_rtx_SCRATCH (SImode));
      break;

    case 11066:
    case 11065:
    case 11064:
    case 11063:
    case 11062:
    case 11061:
    case 11060:
    case 11059:
    case 11058:
    case 11057:
    case 11056:
    case 11055:
    case 11054:
    case 11053:
    case 11052:
    case 11051:
    case 11050:
    case 11049:
    case 11048:
    case 11047:
    case 11010:
    case 10356:
    case 2643:
    case 2642:
    case 2641:
    case 2640:
    case 2639:
    case 2638:
    case 2637:
    case 2636:
    case 2635:
    case 2634:
    case 2633:
    case 2632:
    case 2631:
    case 2630:
    case 2629:
    case 2628:
    case 2627:
    case 2626:
    case 2625:
    case 2624:
    case 2623:
    case 2622:
    case 2621:
    case 2620:
    case 2285:
    case 2284:
    case 2283:
    case 2282:
    case 2281:
    case 2280:
    case 2279:
    case 2278:
    case 2277:
    case 2267:
    case 2266:
    case 2265:
    case 2210:
    case 2209:
    case 2208:
    case 2131:
    case 2130:
    case 2117:
    case 1860:
    case 1859:
    case 1856:
    case 1855:
    case 1854:
    case 1853:
    case 1848:
    case 1847:
    case 1846:
    case 1845:
    case 1844:
    case 1843:
    case 1842:
    case 1841:
    case 1840:
    case 1839:
    case 1838:
    case 1837:
    case 1836:
    case 1835:
    case 1834:
    case 1833:
    case 1832:
    case 1831:
    case 1830:
    case 1829:
    case 1828:
    case 1827:
    case 1826:
    case 1825:
    case 1796:
    case 1795:
    case 1794:
    case 1793:
    case 1792:
    case 1791:
    case 1790:
    case 1789:
    case 1743:
    case 1742:
    case 1741:
    case 1740:
    case 1739:
    case 1738:
    case 1733:
    case 1732:
    case 1731:
    case 1730:
    case 1666:
    case 1665:
    case 1664:
    case 1663:
    case 1660:
    case 1659:
    case 1657:
    case 1656:
    case 1655:
    case 1633:
    case 1631:
    case 1630:
    case 1628:
    case 1626:
    case 1621:
    case 1620:
    case 1617:
    case 1616:
    case 1615:
    case 1614:
    case 1613:
    case 1612:
    case 1611:
    case 1610:
    case 1609:
    case 1608:
    case 1607:
    case 1606:
    case 1605:
    case 1604:
    case 1603:
    case 1602:
    case 1601:
    case 1600:
    case 1599:
    case 1598:
    case 1593:
    case 1592:
    case 1591:
    case 1590:
    case 1589:
    case 1588:
    case 1585:
    case 1584:
    case 1579:
    case 1578:
    case 1577:
    case 1576:
    case 1571:
    case 1570:
    case 1567:
    case 1566:
    case 1565:
    case 1563:
    case 1553:
    case 1552:
    case 1551:
    case 1550:
    case 1543:
    case 1540:
    case 1535:
    case 1534:
    case 1531:
    case 1530:
    case 1529:
    case 1528:
    case 1526:
    case 1525:
    case 1521:
    case 1520:
    case 1518:
    case 1515:
    case 1514:
    case 1499:
    case 1498:
    case 1449:
    case 1448:
    case 1443:
    case 1442:
    case 1441:
    case 1440:
    case 1439:
    case 1438:
    case 1437:
    case 1436:
    case 1435:
    case 1434:
    case 1433:
    case 1432:
    case 1431:
    case 1430:
    case 1429:
    case 1428:
    case 1427:
    case 1426:
    case 1425:
    case 1424:
    case 1415:
    case 1414:
    case 1413:
    case 1412:
    case 1411:
    case 1410:
    case 1409:
    case 1408:
    case 1407:
    case 1406:
    case 1405:
    case 1404:
    case 1403:
    case 1402:
    case 1401:
    case 1400:
    case 1399:
    case 1398:
    case 1397:
    case 1396:
    case 1395:
    case 1394:
    case 1393:
    case 1392:
    case 1391:
    case 1386:
    case 1385:
    case 1384:
    case 1383:
    case 1382:
    case 1381:
    case 1380:
    case 1378:
    case 1376:
    case 1374:
    case 1372:
    case 1371:
    case 1370:
    case 1368:
    case 1366:
    case 1364:
    case 1362:
    case 1360:
    case 1358:
    case 1356:
    case 1354:
    case 1352:
    case 1349:
    case 1347:
    case 1345:
    case 1343:
    case 1331:
    case 1330:
    case 1329:
    case 1328:
    case 1327:
    case 1326:
    case 1325:
    case 1324:
    case 1323:
    case 1322:
    case 1321:
    case 1320:
    case 1319:
    case 1318:
    case 1317:
    case 1316:
    case 1315:
    case 1314:
    case 1313:
    case 1312:
    case 1311:
    case 1310:
    case 1309:
    case 1308:
    case 1307:
    case 1306:
    case 1305:
    case 1304:
    case 1303:
    case 1302:
    case 1301:
    case 1300:
    case 1299:
    case 1298:
    case 1297:
    case 1296:
    case 1295:
    case 1294:
    case 1293:
    case 1292:
    case 1291:
    case 1290:
    case 1289:
    case 1288:
    case 1287:
    case 1286:
    case 1285:
    case 1284:
    case 1281:
    case 1280:
    case 1279:
    case 1278:
    case 1277:
    case 1276:
    case 1275:
    case 1274:
    case 1273:
    case 1272:
    case 1271:
    case 1270:
    case 1269:
    case 1268:
    case 1267:
    case 1266:
    case 1265:
    case 1264:
    case 1263:
    case 1262:
    case 1261:
    case 1260:
    case 1259:
    case 1258:
    case 1257:
    case 1256:
    case 1255:
    case 1254:
    case 1253:
    case 1252:
    case 1251:
    case 1250:
    case 1249:
    case 1248:
    case 1247:
    case 1246:
    case 1245:
    case 1244:
    case 1243:
    case 1242:
    case 1241:
    case 1240:
    case 1239:
    case 1238:
    case 1219:
    case 1218:
    case 1217:
    case 1216:
    case 1215:
    case 1213:
    case 1211:
    case 1209:
    case 1207:
    case 1206:
    case 1205:
    case 1203:
    case 1201:
    case 1199:
    case 1197:
    case 1195:
    case 1193:
    case 1191:
    case 1189:
    case 1187:
    case 1183:
    case 1181:
    case 1179:
    case 1178:
    case 1176:
    case 1170:
    case 1169:
    case 1167:
    case 1165:
    case 1164:
    case 1163:
    case 1161:
    case 1159:
    case 1157:
    case 1155:
    case 1153:
    case 1152:
    case 1151:
    case 1149:
    case 1147:
    case 1145:
    case 1143:
    case 1141:
    case 1140:
    case 1139:
    case 1138:
    case 1133:
    case 1132:
    case 1131:
    case 1130:
    case 1129:
    case 1128:
    case 1127:
    case 1126:
    case 1125:
    case 1124:
    case 1123:
    case 1122:
    case 1121:
    case 1120:
    case 1119:
    case 1109:
    case 1108:
    case 1107:
    case 1105:
    case 1103:
    case 1102:
    case 1100:
    case 1098:
    case 1096:
    case 1094:
    case 1091:
    case 1089:
    case 1085:
    case 1084:
    case 1083:
    case 1081:
    case 1079:
    case 1077:
    case 1075:
    case 1073:
    case 1072:
    case 1071:
    case 1069:
    case 1067:
    case 1065:
    case 1063:
    case 1061:
    case 1060:
    case 1059:
    case 1058:
    case 1057:
    case 1056:
    case 1055:
    case 1054:
    case 1053:
    case 1052:
    case 1015:
    case 1014:
    case 1013:
    case 1012:
    case 1011:
    case 1010:
    case 1006:
    case 1005:
    case 1004:
    case 1003:
    case 1002:
    case 1001:
    case 1000:
    case 999:
    case 998:
    case 997:
    case 996:
    case 995:
    case 990:
    case 989:
    case 988:
    case 974:
    case 973:
    case 972:
    case 971:
    case 969:
    case 967:
    case 965:
    case 963:
    case 961:
    case 959:
    case 957:
    case 955:
    case 953:
    case 952:
    case 871:
    case 870:
    case 868:
    case 866:
    case 865:
    case 864:
    case 863:
    case 862:
    case 860:
    case 858:
    case 856:
    case 854:
    case 852:
    case 850:
    case 848:
    case 846:
    case 844:
    case 842:
    case 841:
    case 840:
    case 839:
    case 838:
    case 837:
    case 836:
    case 835:
    case 834:
    case 832:
    case 830:
    case 828:
    case 826:
    case 824:
    case 822:
    case 821:
    case 820:
    case 819:
    case 816:
    case 815:
    case 814:
    case 813:
    case 812:
    case 811:
    case 810:
    case 809:
    case 808:
    case 807:
    case 806:
    case 805:
    case 804:
    case 803:
    case 802:
    case 801:
    case 800:
    case 799:
    case 798:
    case 797:
    case 796:
    case 795:
    case 794:
    case 793:
    case 792:
    case 791:
    case 781:
    case 780:
    case 779:
    case 778:
    case 777:
    case 776:
    case 775:
    case 774:
    case 773:
    case 772:
    case 771:
    case 770:
    case 769:
    case 768:
    case 767:
    case 766:
    case 765:
    case 764:
    case 763:
    case 762:
    case 761:
    case 760:
    case 759:
    case 758:
    case 757:
    case 756:
    case 755:
    case 748:
    case 747:
    case 746:
    case 745:
    case 744:
    case 743:
    case 742:
    case 741:
    case 740:
    case 739:
    case 738:
    case 737:
    case 736:
    case 735:
    case 734:
    case 733:
    case 732:
    case 731:
    case 730:
    case 729:
    case 728:
    case 727:
    case 726:
    case 725:
    case 724:
    case 722:
    case 720:
    case 718:
    case 717:
    case 715:
    case 713:
    case 711:
    case 709:
    case 707:
    case 706:
    case 704:
    case 703:
    case 681:
    case 679:
    case 626:
    case 624:
    case 622:
    case 620:
    case 618:
    case 617:
    case 603:
    case 601:
    case 599:
    case 597:
    case 595:
    case 593:
    case 591:
    case 589:
    case 588:
    case 587:
    case 586:
    case 585:
    case 584:
    case 583:
    case 582:
    case 581:
    case 580:
    case 579:
    case 578:
    case 577:
    case 576:
    case 575:
    case 574:
    case 573:
    case 572:
    case 571:
    case 570:
    case 569:
    case 568:
    case 567:
    case 566:
    case 565:
    case 564:
    case 563:
    case 562:
    case 561:
    case 560:
    case 559:
    case 558:
    case 557:
    case 556:
    case 555:
    case 554:
    case 516:
    case 515:
    case 514:
    case 513:
    case 512:
    case 511:
    case 510:
    case 509:
    case 508:
    case 507:
    case 506:
    case 505:
    case 504:
    case 503:
    case 502:
    case 501:
    case 500:
    case 499:
    case 498:
    case 497:
    case 496:
    case 495:
    case 494:
    case 493:
    case 492:
    case 491:
    case 490:
    case 489:
    case 488:
    case 487:
    case 482:
    case 481:
    case 480:
    case 479:
    case 478:
    case 477:
    case 476:
    case 475:
    case 474:
    case 473:
    case 472:
    case 471:
    case 470:
    case 469:
    case 468:
    case 467:
    case 466:
    case 465:
    case 464:
    case 463:
    case 462:
    case 461:
    case 460:
    case 459:
    case 458:
    case 457:
    case 456:
    case 455:
    case 454:
    case 453:
    case 451:
    case 450:
    case 449:
    case 424:
    case 423:
    case 422:
    case 421:
    case 420:
    case 419:
    case 418:
    case 417:
    case 416:
    case 410:
    case 409:
    case 408:
    case 407:
    case 406:
    case 405:
    case 404:
    case 403:
    case 402:
    case 401:
    case 399:
    case 397:
    case 395:
    case 393:
    case 391:
    case 389:
    case 387:
    case 385:
    case 383:
    case 382:
    case 381:
    case 380:
    case 341:
    case 340:
    case 339:
    case 338:
    case 337:
    case 336:
    case 335:
    case 334:
    case 333:
    case 332:
    case 331:
    case 330:
    case 329:
    case 328:
    case 327:
    case 308:
    case 307:
    case 306:
    case 305:
    case 304:
    case 303:
    case 302:
    case 301:
    case 300:
    case 298:
    case 296:
    case 295:
    case 293:
    case 291:
    case 289:
    case 287:
    case 285:
    case 283:
    case 281:
    case 280:
    case 279:
    case 278:
    case 277:
    case 276:
    case 275:
    case 274:
    case 273:
    case 272:
    case 271:
    case 270:
    case 269:
    case 268:
    case 267:
    case 266:
    case 234:
    case 233:
    case 232:
    case 182:
    case 179:
    case 178:
    case 121:
    case 120:
    case 114:
    case 113:
    case 91:
    case 90:
    case 89:
    case 88:
    case 87:
    case 86:
    case 85:
    case 84:
      XVECEXP (pattern, 0, 1) = gen_hard_reg_clobber (CCmode, 17);
      break;

    default:
      gcc_unreachable ();
    }
}


bool
added_clobbers_hard_reg_p (int insn_code_number)
{
  switch (insn_code_number)
    {
    case 11016:
    case 11011:
    case 9739:
    case 9737:
    case 9735:
    case 9733:
    case 9731:
    case 9723:
    case 9715:
    case 9707:
    case 9699:
    case 9691:
    case 9683:
    case 9675:
    case 9738:
    case 9736:
    case 9734:
    case 9732:
    case 9730:
    case 9722:
    case 9714:
    case 9706:
    case 9698:
    case 9690:
    case 9682:
    case 9674:
    case 9727:
    case 9719:
    case 9711:
    case 9703:
    case 9695:
    case 9687:
    case 9679:
    case 9671:
    case 9726:
    case 9718:
    case 9710:
    case 9702:
    case 9694:
    case 9686:
    case 9678:
    case 9670:
    case 9725:
    case 9717:
    case 9709:
    case 9701:
    case 9693:
    case 9685:
    case 9677:
    case 9669:
    case 9724:
    case 9716:
    case 9708:
    case 9700:
    case 9692:
    case 9684:
    case 9676:
    case 9668:
    case 8981:
    case 8977:
    case 9729:
    case 9721:
    case 9713:
    case 9705:
    case 9697:
    case 9689:
    case 9681:
    case 9673:
    case 4779:
    case 9728:
    case 9720:
    case 9712:
    case 9704:
    case 9696:
    case 9688:
    case 9680:
    case 9672:
    case 8627:
    case 2552:
    case 611:
    case 610:
    case 1878:
    case 1587:
    case 1583:
    case 1575:
    case 1569:
    case 1237:
    case 1236:
    case 1118:
    case 987:
    case 891:
    case 890:
    case 818:
    case 546:
    case 537:
    case 522:
    case 520:
    case 518:
    case 326:
    case 319:
    case 317:
    case 1877:
    case 1586:
    case 1582:
    case 1574:
    case 1568:
    case 1235:
    case 1234:
    case 1117:
    case 986:
    case 889:
    case 888:
    case 817:
    case 545:
    case 536:
    case 521:
    case 519:
    case 517:
    case 325:
    case 322:
    case 316:
    case 9849:
    case 9848:
    case 9837:
    case 9836:
    case 9777:
    case 9776:
    case 9765:
    case 9764:
    case 9753:
    case 9752:
    case 9741:
    case 9740:
    case 1233:
    case 1232:
    case 1116:
    case 985:
    case 887:
    case 886:
    case 544:
    case 535:
    case 324:
    case 321:
    case 315:
    case 9883:
    case 9882:
    case 9881:
    case 9880:
    case 9879:
    case 9878:
    case 9877:
    case 9876:
    case 9875:
    case 9874:
    case 9873:
    case 9872:
    case 9871:
    case 9870:
    case 9869:
    case 9868:
    case 9867:
    case 9866:
    case 9865:
    case 9864:
    case 9863:
    case 9862:
    case 9861:
    case 9860:
    case 9859:
    case 9858:
    case 9857:
    case 9856:
    case 9855:
    case 9854:
    case 9853:
    case 9852:
    case 9851:
    case 9850:
    case 9847:
    case 9846:
    case 9845:
    case 9844:
    case 9843:
    case 9842:
    case 9841:
    case 9840:
    case 9839:
    case 9838:
    case 9835:
    case 9834:
    case 9833:
    case 9832:
    case 9831:
    case 9830:
    case 9829:
    case 9828:
    case 9827:
    case 9826:
    case 9825:
    case 9824:
    case 9823:
    case 9822:
    case 9821:
    case 9820:
    case 9819:
    case 9818:
    case 9817:
    case 9816:
    case 9815:
    case 9814:
    case 9813:
    case 9812:
    case 9811:
    case 9810:
    case 9809:
    case 9808:
    case 9807:
    case 9806:
    case 9805:
    case 9804:
    case 9803:
    case 9802:
    case 9801:
    case 9800:
    case 9799:
    case 9798:
    case 9797:
    case 9796:
    case 9795:
    case 9794:
    case 9793:
    case 9792:
    case 9791:
    case 9790:
    case 9789:
    case 9788:
    case 9787:
    case 9786:
    case 9785:
    case 9784:
    case 9783:
    case 9782:
    case 9781:
    case 9780:
    case 9779:
    case 9778:
    case 9775:
    case 9774:
    case 9773:
    case 9772:
    case 9771:
    case 9770:
    case 9769:
    case 9768:
    case 9767:
    case 9766:
    case 9763:
    case 9762:
    case 9761:
    case 9760:
    case 9759:
    case 9758:
    case 9757:
    case 9756:
    case 9755:
    case 9754:
    case 9751:
    case 9750:
    case 9749:
    case 9748:
    case 9747:
    case 9746:
    case 9745:
    case 9744:
    case 9743:
    case 9742:
    case 1231:
    case 1230:
    case 1115:
    case 984:
    case 885:
    case 884:
    case 543:
    case 534:
    case 323:
    case 320:
    case 314:
    case 612:
    case 263:
    case 262:
    case 261:
    case 256:
    case 255:
    case 254:
    case 1745:
    case 1744:
    case 235:
    case 1727:
    case 1717:
    case 1716:
    case 1715:
    case 231:
    case 230:
    case 229:
    case 224:
    case 223:
      return false;

    case 2382:
    case 2381:
    case 1922:
    case 1921:
    case 1651:
    case 1647:
    case 1643:
    case 11030:
    case 11029:
    case 11028:
    case 11027:
    case 1864:
    case 1863:
    case 1862:
    case 1861:
    case 1788:
    case 1787:
    case 1629:
    case 1627:
    case 1625:
    case 1624:
    case 1561:
    case 1560:
    case 1559:
    case 1558:
    case 1545:
    case 1544:
    case 1542:
    case 1541:
    case 1539:
    case 1538:
    case 1523:
    case 1522:
    case 1519:
    case 1517:
    case 1516:
    case 1021:
    case 1020:
    case 1019:
    case 1018:
    case 1017:
    case 1016:
    case 677:
    case 660:
    case 659:
    case 658:
    case 657:
    case 656:
    case 655:
    case 654:
    case 653:
    case 652:
    case 651:
    case 650:
    case 649:
    case 648:
    case 647:
    case 676:
    case 675:
    case 674:
    case 673:
    case 672:
    case 671:
    case 670:
    case 669:
    case 668:
    case 667:
    case 646:
    case 645:
    case 644:
    case 643:
    case 642:
    case 641:
    case 640:
    case 639:
    case 634:
    case 633:
    case 630:
    case 629:
    case 1507:
    case 638:
    case 637:
    case 636:
    case 635:
    case 632:
    case 631:
    case 628:
    case 627:
    case 1335:
    case 1333:
    case 186:
    case 1334:
    case 1332:
    case 185:
    case 11066:
    case 11065:
    case 11064:
    case 11063:
    case 11062:
    case 11061:
    case 11060:
    case 11059:
    case 11058:
    case 11057:
    case 11056:
    case 11055:
    case 11054:
    case 11053:
    case 11052:
    case 11051:
    case 11050:
    case 11049:
    case 11048:
    case 11047:
    case 11010:
    case 10356:
    case 2643:
    case 2642:
    case 2641:
    case 2640:
    case 2639:
    case 2638:
    case 2637:
    case 2636:
    case 2635:
    case 2634:
    case 2633:
    case 2632:
    case 2631:
    case 2630:
    case 2629:
    case 2628:
    case 2627:
    case 2626:
    case 2625:
    case 2624:
    case 2623:
    case 2622:
    case 2621:
    case 2620:
    case 2285:
    case 2284:
    case 2283:
    case 2282:
    case 2281:
    case 2280:
    case 2279:
    case 2278:
    case 2277:
    case 2267:
    case 2266:
    case 2265:
    case 2210:
    case 2209:
    case 2208:
    case 2131:
    case 2130:
    case 2117:
    case 1860:
    case 1859:
    case 1856:
    case 1855:
    case 1854:
    case 1853:
    case 1848:
    case 1847:
    case 1846:
    case 1845:
    case 1844:
    case 1843:
    case 1842:
    case 1841:
    case 1840:
    case 1839:
    case 1838:
    case 1837:
    case 1836:
    case 1835:
    case 1834:
    case 1833:
    case 1832:
    case 1831:
    case 1830:
    case 1829:
    case 1828:
    case 1827:
    case 1826:
    case 1825:
    case 1796:
    case 1795:
    case 1794:
    case 1793:
    case 1792:
    case 1791:
    case 1790:
    case 1789:
    case 1743:
    case 1742:
    case 1741:
    case 1740:
    case 1739:
    case 1738:
    case 1733:
    case 1732:
    case 1731:
    case 1730:
    case 1666:
    case 1665:
    case 1664:
    case 1663:
    case 1660:
    case 1659:
    case 1657:
    case 1656:
    case 1655:
    case 1633:
    case 1631:
    case 1630:
    case 1628:
    case 1626:
    case 1621:
    case 1620:
    case 1617:
    case 1616:
    case 1615:
    case 1614:
    case 1613:
    case 1612:
    case 1611:
    case 1610:
    case 1609:
    case 1608:
    case 1607:
    case 1606:
    case 1605:
    case 1604:
    case 1603:
    case 1602:
    case 1601:
    case 1600:
    case 1599:
    case 1598:
    case 1593:
    case 1592:
    case 1591:
    case 1590:
    case 1589:
    case 1588:
    case 1585:
    case 1584:
    case 1579:
    case 1578:
    case 1577:
    case 1576:
    case 1571:
    case 1570:
    case 1567:
    case 1566:
    case 1565:
    case 1563:
    case 1553:
    case 1552:
    case 1551:
    case 1550:
    case 1543:
    case 1540:
    case 1535:
    case 1534:
    case 1531:
    case 1530:
    case 1529:
    case 1528:
    case 1526:
    case 1525:
    case 1521:
    case 1520:
    case 1518:
    case 1515:
    case 1514:
    case 1499:
    case 1498:
    case 1449:
    case 1448:
    case 1443:
    case 1442:
    case 1441:
    case 1440:
    case 1439:
    case 1438:
    case 1437:
    case 1436:
    case 1435:
    case 1434:
    case 1433:
    case 1432:
    case 1431:
    case 1430:
    case 1429:
    case 1428:
    case 1427:
    case 1426:
    case 1425:
    case 1424:
    case 1415:
    case 1414:
    case 1413:
    case 1412:
    case 1411:
    case 1410:
    case 1409:
    case 1408:
    case 1407:
    case 1406:
    case 1405:
    case 1404:
    case 1403:
    case 1402:
    case 1401:
    case 1400:
    case 1399:
    case 1398:
    case 1397:
    case 1396:
    case 1395:
    case 1394:
    case 1393:
    case 1392:
    case 1391:
    case 1386:
    case 1385:
    case 1384:
    case 1383:
    case 1382:
    case 1381:
    case 1380:
    case 1378:
    case 1376:
    case 1374:
    case 1372:
    case 1371:
    case 1370:
    case 1368:
    case 1366:
    case 1364:
    case 1362:
    case 1360:
    case 1358:
    case 1356:
    case 1354:
    case 1352:
    case 1349:
    case 1347:
    case 1345:
    case 1343:
    case 1331:
    case 1330:
    case 1329:
    case 1328:
    case 1327:
    case 1326:
    case 1325:
    case 1324:
    case 1323:
    case 1322:
    case 1321:
    case 1320:
    case 1319:
    case 1318:
    case 1317:
    case 1316:
    case 1315:
    case 1314:
    case 1313:
    case 1312:
    case 1311:
    case 1310:
    case 1309:
    case 1308:
    case 1307:
    case 1306:
    case 1305:
    case 1304:
    case 1303:
    case 1302:
    case 1301:
    case 1300:
    case 1299:
    case 1298:
    case 1297:
    case 1296:
    case 1295:
    case 1294:
    case 1293:
    case 1292:
    case 1291:
    case 1290:
    case 1289:
    case 1288:
    case 1287:
    case 1286:
    case 1285:
    case 1284:
    case 1281:
    case 1280:
    case 1279:
    case 1278:
    case 1277:
    case 1276:
    case 1275:
    case 1274:
    case 1273:
    case 1272:
    case 1271:
    case 1270:
    case 1269:
    case 1268:
    case 1267:
    case 1266:
    case 1265:
    case 1264:
    case 1263:
    case 1262:
    case 1261:
    case 1260:
    case 1259:
    case 1258:
    case 1257:
    case 1256:
    case 1255:
    case 1254:
    case 1253:
    case 1252:
    case 1251:
    case 1250:
    case 1249:
    case 1248:
    case 1247:
    case 1246:
    case 1245:
    case 1244:
    case 1243:
    case 1242:
    case 1241:
    case 1240:
    case 1239:
    case 1238:
    case 1219:
    case 1218:
    case 1217:
    case 1216:
    case 1215:
    case 1213:
    case 1211:
    case 1209:
    case 1207:
    case 1206:
    case 1205:
    case 1203:
    case 1201:
    case 1199:
    case 1197:
    case 1195:
    case 1193:
    case 1191:
    case 1189:
    case 1187:
    case 1183:
    case 1181:
    case 1179:
    case 1178:
    case 1176:
    case 1170:
    case 1169:
    case 1167:
    case 1165:
    case 1164:
    case 1163:
    case 1161:
    case 1159:
    case 1157:
    case 1155:
    case 1153:
    case 1152:
    case 1151:
    case 1149:
    case 1147:
    case 1145:
    case 1143:
    case 1141:
    case 1140:
    case 1139:
    case 1138:
    case 1133:
    case 1132:
    case 1131:
    case 1130:
    case 1129:
    case 1128:
    case 1127:
    case 1126:
    case 1125:
    case 1124:
    case 1123:
    case 1122:
    case 1121:
    case 1120:
    case 1119:
    case 1109:
    case 1108:
    case 1107:
    case 1105:
    case 1103:
    case 1102:
    case 1100:
    case 1098:
    case 1096:
    case 1094:
    case 1091:
    case 1089:
    case 1085:
    case 1084:
    case 1083:
    case 1081:
    case 1079:
    case 1077:
    case 1075:
    case 1073:
    case 1072:
    case 1071:
    case 1069:
    case 1067:
    case 1065:
    case 1063:
    case 1061:
    case 1060:
    case 1059:
    case 1058:
    case 1057:
    case 1056:
    case 1055:
    case 1054:
    case 1053:
    case 1052:
    case 1015:
    case 1014:
    case 1013:
    case 1012:
    case 1011:
    case 1010:
    case 1006:
    case 1005:
    case 1004:
    case 1003:
    case 1002:
    case 1001:
    case 1000:
    case 999:
    case 998:
    case 997:
    case 996:
    case 995:
    case 990:
    case 989:
    case 988:
    case 974:
    case 973:
    case 972:
    case 971:
    case 969:
    case 967:
    case 965:
    case 963:
    case 961:
    case 959:
    case 957:
    case 955:
    case 953:
    case 952:
    case 871:
    case 870:
    case 868:
    case 866:
    case 865:
    case 864:
    case 863:
    case 862:
    case 860:
    case 858:
    case 856:
    case 854:
    case 852:
    case 850:
    case 848:
    case 846:
    case 844:
    case 842:
    case 841:
    case 840:
    case 839:
    case 838:
    case 837:
    case 836:
    case 835:
    case 834:
    case 832:
    case 830:
    case 828:
    case 826:
    case 824:
    case 822:
    case 821:
    case 820:
    case 819:
    case 816:
    case 815:
    case 814:
    case 813:
    case 812:
    case 811:
    case 810:
    case 809:
    case 808:
    case 807:
    case 806:
    case 805:
    case 804:
    case 803:
    case 802:
    case 801:
    case 800:
    case 799:
    case 798:
    case 797:
    case 796:
    case 795:
    case 794:
    case 793:
    case 792:
    case 791:
    case 781:
    case 780:
    case 779:
    case 778:
    case 777:
    case 776:
    case 775:
    case 774:
    case 773:
    case 772:
    case 771:
    case 770:
    case 769:
    case 768:
    case 767:
    case 766:
    case 765:
    case 764:
    case 763:
    case 762:
    case 761:
    case 760:
    case 759:
    case 758:
    case 757:
    case 756:
    case 755:
    case 748:
    case 747:
    case 746:
    case 745:
    case 744:
    case 743:
    case 742:
    case 741:
    case 740:
    case 739:
    case 738:
    case 737:
    case 736:
    case 735:
    case 734:
    case 733:
    case 732:
    case 731:
    case 730:
    case 729:
    case 728:
    case 727:
    case 726:
    case 725:
    case 724:
    case 722:
    case 720:
    case 718:
    case 717:
    case 715:
    case 713:
    case 711:
    case 709:
    case 707:
    case 706:
    case 704:
    case 703:
    case 681:
    case 679:
    case 626:
    case 624:
    case 622:
    case 620:
    case 618:
    case 617:
    case 603:
    case 601:
    case 599:
    case 597:
    case 595:
    case 593:
    case 591:
    case 589:
    case 588:
    case 587:
    case 586:
    case 585:
    case 584:
    case 583:
    case 582:
    case 581:
    case 580:
    case 579:
    case 578:
    case 577:
    case 576:
    case 575:
    case 574:
    case 573:
    case 572:
    case 571:
    case 570:
    case 569:
    case 568:
    case 567:
    case 566:
    case 565:
    case 564:
    case 563:
    case 562:
    case 561:
    case 560:
    case 559:
    case 558:
    case 557:
    case 556:
    case 555:
    case 554:
    case 516:
    case 515:
    case 514:
    case 513:
    case 512:
    case 511:
    case 510:
    case 509:
    case 508:
    case 507:
    case 506:
    case 505:
    case 504:
    case 503:
    case 502:
    case 501:
    case 500:
    case 499:
    case 498:
    case 497:
    case 496:
    case 495:
    case 494:
    case 493:
    case 492:
    case 491:
    case 490:
    case 489:
    case 488:
    case 487:
    case 482:
    case 481:
    case 480:
    case 479:
    case 478:
    case 477:
    case 476:
    case 475:
    case 474:
    case 473:
    case 472:
    case 471:
    case 470:
    case 469:
    case 468:
    case 467:
    case 466:
    case 465:
    case 464:
    case 463:
    case 462:
    case 461:
    case 460:
    case 459:
    case 458:
    case 457:
    case 456:
    case 455:
    case 454:
    case 453:
    case 451:
    case 450:
    case 449:
    case 424:
    case 423:
    case 422:
    case 421:
    case 420:
    case 419:
    case 418:
    case 417:
    case 416:
    case 410:
    case 409:
    case 408:
    case 407:
    case 406:
    case 405:
    case 404:
    case 403:
    case 402:
    case 401:
    case 399:
    case 397:
    case 395:
    case 393:
    case 391:
    case 389:
    case 387:
    case 385:
    case 383:
    case 382:
    case 381:
    case 380:
    case 341:
    case 340:
    case 339:
    case 338:
    case 337:
    case 336:
    case 335:
    case 334:
    case 333:
    case 332:
    case 331:
    case 330:
    case 329:
    case 328:
    case 327:
    case 308:
    case 307:
    case 306:
    case 305:
    case 304:
    case 303:
    case 302:
    case 301:
    case 300:
    case 298:
    case 296:
    case 295:
    case 293:
    case 291:
    case 289:
    case 287:
    case 285:
    case 283:
    case 281:
    case 280:
    case 279:
    case 278:
    case 277:
    case 276:
    case 275:
    case 274:
    case 273:
    case 272:
    case 271:
    case 270:
    case 269:
    case 268:
    case 267:
    case 266:
    case 234:
    case 233:
    case 232:
    case 182:
    case 179:
    case 178:
    case 121:
    case 120:
    case 114:
    case 113:
    case 91:
    case 90:
    case 89:
    case 88:
    case 87:
    case 86:
    case 85:
    case 84:
      return true;

    default:
      gcc_unreachable ();
    }
}

insn_code
maybe_code_for_ccmp (machine_mode arg0)
{
  if (arg0 == E_QImode)
    return CODE_FOR_ccmpqi;
  if (arg0 == E_HImode)
    return CODE_FOR_ccmphi;
  if (arg0 == E_SImode)
    return CODE_FOR_ccmpsi;
  if (arg0 == E_DImode)
    return CODE_FOR_ccmpdi;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_ccmp (machine_mode arg0, rtx x0, rtx x1, rtx x2, rtx x3, rtx x4)
{
  insn_code code = maybe_code_for_ccmp (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 5);
      return GEN_FCN (code) (x0, x1, x2, x3, x4);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_cmp_1 (machine_mode arg0)
{
  if (arg0 == E_QImode)
    return CODE_FOR_cmpqi_1;
  if (arg0 == E_HImode)
    return CODE_FOR_cmphi_1;
  if (arg0 == E_SImode)
    return CODE_FOR_cmpsi_1;
  if (arg0 == E_DImode)
    return CODE_FOR_cmpdi_1;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_cmp_1 (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_cmp_1 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_pushfl2 (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_pushflsi2;
  if (arg0 == E_DImode)
    return CODE_FOR_pushfldi2;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_pushfl2 (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_pushfl2 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_popfl1 (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_popflsi1;
  if (arg0 == E_DImode)
    return CODE_FOR_popfldi1;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_popfl1 (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_popfl1 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_insv_1 (machine_mode arg0)
{
  if (arg0 == E_HImode)
    return CODE_FOR_insvhi_1;
  if (arg0 == E_SImode)
    return CODE_FOR_insvsi_1;
  if (arg0 == E_DImode)
    return CODE_FOR_insvdi_1;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_insv_1 (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_insv_1 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_add3_carry (machine_mode arg0)
{
  if (arg0 == E_QImode)
    return CODE_FOR_addqi3_carry;
  if (arg0 == E_HImode)
    return CODE_FOR_addhi3_carry;
  if (arg0 == E_SImode)
    return CODE_FOR_addsi3_carry;
  if (arg0 == E_DImode)
    return CODE_FOR_adddi3_carry;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_add3_carry (machine_mode arg0, rtx x0, rtx x1, rtx x2, rtx x3, rtx x4)
{
  insn_code code = maybe_code_for_add3_carry (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 5);
      return GEN_FCN (code) (x0, x1, x2, x3, x4);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_sub3_carry (machine_mode arg0)
{
  if (arg0 == E_QImode)
    return CODE_FOR_subqi3_carry;
  if (arg0 == E_HImode)
    return CODE_FOR_subhi3_carry;
  if (arg0 == E_SImode)
    return CODE_FOR_subsi3_carry;
  if (arg0 == E_DImode)
    return CODE_FOR_subdi3_carry;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_sub3_carry (machine_mode arg0, rtx x0, rtx x1, rtx x2, rtx x3, rtx x4)
{
  insn_code code = maybe_code_for_sub3_carry (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 5);
      return GEN_FCN (code) (x0, x1, x2, x3, x4);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_sub3_carry_ccc (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_subsi3_carry_ccc;
  if (arg0 == E_DImode)
    return CODE_FOR_subdi3_carry_ccc;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_sub3_carry_ccc (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_sub3_carry_ccc (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_sub3_carry_ccgz (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_subsi3_carry_ccgz;
  if (arg0 == E_DImode)
    return CODE_FOR_subdi3_carry_ccgz;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_sub3_carry_ccgz (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_sub3_carry_ccgz (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_add3_cc_overflow_1 (machine_mode arg0)
{
  if (arg0 == E_QImode)
    return CODE_FOR_addqi3_cc_overflow_1;
  if (arg0 == E_HImode)
    return CODE_FOR_addhi3_cc_overflow_1;
  if (arg0 == E_SImode)
    return CODE_FOR_addsi3_cc_overflow_1;
  if (arg0 == E_DImode)
    return CODE_FOR_adddi3_cc_overflow_1;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_add3_cc_overflow_1 (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_add3_cc_overflow_1 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_test_ccno_1 (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_testsi_ccno_1;
  if (arg0 == E_DImode)
    return CODE_FOR_testdi_ccno_1;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_test_ccno_1 (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_test_ccno_1 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_x86_shift_adj_1 (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_x86_shiftsi_adj_1;
  if (arg0 == E_DImode)
    return CODE_FOR_x86_shiftdi_adj_1;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_x86_shift_adj_1 (machine_mode arg0, rtx x0, rtx x1, rtx x2, rtx x3)
{
  insn_code code = maybe_code_for_x86_shift_adj_1 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 4);
      return GEN_FCN (code) (x0, x1, x2, x3);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_x86_shift_adj_2 (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_x86_shiftsi_adj_2;
  if (arg0 == E_DImode)
    return CODE_FOR_x86_shiftdi_adj_2;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_x86_shift_adj_2 (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_x86_shift_adj_2 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_x86_shift_adj_3 (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_x86_shiftsi_adj_3;
  if (arg0 == E_DImode)
    return CODE_FOR_x86_shiftdi_adj_3;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_x86_shift_adj_3 (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_x86_shift_adj_3 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_leave (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_leave_si;
  if (arg0 == E_DImode)
    return CODE_FOR_leave_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_leave (machine_mode arg0)
{
  insn_code code = maybe_code_for_leave (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 0);
      return GEN_FCN (code) ();
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_tbm_bextri (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_tbm_bextri_si;
  if (arg0 == E_DImode)
    return CODE_FOR_tbm_bextri_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_tbm_bextri (machine_mode arg0, rtx x0, rtx x1, rtx x2, rtx x3)
{
  insn_code code = maybe_code_for_tbm_bextri (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 4);
      return GEN_FCN (code) (x0, x1, x2, x3);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_tls_global_dynamic_64 (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_tls_global_dynamic_64_si;
  if (arg0 == E_DImode)
    return CODE_FOR_tls_global_dynamic_64_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_tls_global_dynamic_64 (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_tls_global_dynamic_64 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_tls_local_dynamic_base_64 (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_tls_local_dynamic_base_64_si;
  if (arg0 == E_DImode)
    return CODE_FOR_tls_local_dynamic_base_64_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_tls_local_dynamic_base_64 (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_tls_local_dynamic_base_64 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_tls_dynamic_gnu2_64 (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_tls_dynamic_gnu2_64_si;
  if (arg0 == E_DImode)
    return CODE_FOR_tls_dynamic_gnu2_64_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_tls_dynamic_gnu2_64 (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_tls_dynamic_gnu2_64 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_pro_epilogue_adjust_stack_add (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_pro_epilogue_adjust_stack_add_si;
  if (arg0 == E_DImode)
    return CODE_FOR_pro_epilogue_adjust_stack_add_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_pro_epilogue_adjust_stack_add (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_pro_epilogue_adjust_stack_add (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_pro_epilogue_adjust_stack_sub (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_pro_epilogue_adjust_stack_sub_si;
  if (arg0 == E_DImode)
    return CODE_FOR_pro_epilogue_adjust_stack_sub_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_pro_epilogue_adjust_stack_sub (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_pro_epilogue_adjust_stack_sub (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_allocate_stack_worker_probe (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_allocate_stack_worker_probe_si;
  if (arg0 == E_DImode)
    return CODE_FOR_allocate_stack_worker_probe_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_allocate_stack_worker_probe (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_allocate_stack_worker_probe (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_probe_stack_1 (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_probe_stack_1_si;
  if (arg0 == E_DImode)
    return CODE_FOR_probe_stack_1_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_probe_stack_1 (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_probe_stack_1 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_adjust_stack_and_probe (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_adjust_stack_and_probe_si;
  if (arg0 == E_DImode)
    return CODE_FOR_adjust_stack_and_probe_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_adjust_stack_and_probe (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_adjust_stack_and_probe (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_probe_stack_range (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_probe_stack_range_si;
  if (arg0 == E_DImode)
    return CODE_FOR_probe_stack_range_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_probe_stack_range (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_probe_stack_range (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_stack_protect_set_1 (machine_mode arg0, machine_mode arg1)
{
  if (arg0 == E_SImode
      && arg1 == E_SImode)
    return CODE_FOR_stack_protect_set_1_si_si;
  if (arg0 == E_DImode
      && arg1 == E_SImode)
    return CODE_FOR_stack_protect_set_1_di_si;
  if (arg0 == E_SImode
      && arg1 == E_DImode)
    return CODE_FOR_stack_protect_set_1_si_di;
  if (arg0 == E_DImode
      && arg1 == E_DImode)
    return CODE_FOR_stack_protect_set_1_di_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_stack_protect_set_1 (machine_mode arg0, machine_mode arg1, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_stack_protect_set_1 (arg0, arg1);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_stack_protect_test_1 (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_stack_protect_test_1_si;
  if (arg0 == E_DImode)
    return CODE_FOR_stack_protect_test_1_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_stack_protect_test_1 (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_stack_protect_test_1 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_lwp_llwpcb (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_lwp_llwpcbsi;
  if (arg0 == E_DImode)
    return CODE_FOR_lwp_llwpcbdi;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_lwp_llwpcb (machine_mode arg0, rtx x0)
{
  insn_code code = maybe_code_for_lwp_llwpcb (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 1);
      return GEN_FCN (code) (x0);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_lwp_slwpcb (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_lwp_slwpcbsi;
  if (arg0 == E_DImode)
    return CODE_FOR_lwp_slwpcbdi;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_lwp_slwpcb (machine_mode arg0, rtx x0)
{
  insn_code code = maybe_code_for_lwp_slwpcb (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 1);
      return GEN_FCN (code) (x0);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_lwp_lwpval (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_lwp_lwpvalsi;
  if (arg0 == E_DImode)
    return CODE_FOR_lwp_lwpvaldi;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_lwp_lwpval (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_lwp_lwpval (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_lwp_lwpins (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_lwp_lwpinssi;
  if (arg0 == E_DImode)
    return CODE_FOR_lwp_lwpinsdi;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_lwp_lwpins (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_lwp_lwpins (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_rdrand (machine_mode arg0)
{
  if (arg0 == E_HImode)
    return CODE_FOR_rdrandhi;
  if (arg0 == E_SImode)
    return CODE_FOR_rdrandsi;
  if (arg0 == E_DImode)
    return CODE_FOR_rdranddi;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_rdrand (machine_mode arg0, rtx x0)
{
  insn_code code = maybe_code_for_rdrand (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 1);
      return GEN_FCN (code) (x0);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_rdseed (machine_mode arg0)
{
  if (arg0 == E_HImode)
    return CODE_FOR_rdseedhi;
  if (arg0 == E_SImode)
    return CODE_FOR_rdseedsi;
  if (arg0 == E_DImode)
    return CODE_FOR_rdseeddi;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_rdseed (machine_mode arg0, rtx x0)
{
  insn_code code = maybe_code_for_rdseed (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 1);
      return GEN_FCN (code) (x0);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_rdssp (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_rdsspsi;
  if (arg0 == E_DImode)
    return CODE_FOR_rdsspdi;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_rdssp (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_rdssp (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_incssp (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_incsspsi;
  if (arg0 == E_DImode)
    return CODE_FOR_incsspdi;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_incssp (machine_mode arg0, rtx x0)
{
  insn_code code = maybe_code_for_incssp (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 1);
      return GEN_FCN (code) (x0);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_wrss (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_wrsssi;
  if (arg0 == E_DImode)
    return CODE_FOR_wrssdi;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_wrss (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_wrss (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_wruss (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_wrusssi;
  if (arg0 == E_DImode)
    return CODE_FOR_wrussdi;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_wruss (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_wruss (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_monitorx (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_monitorx_si;
  if (arg0 == E_DImode)
    return CODE_FOR_monitorx_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_monitorx (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_monitorx (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_clzero (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_clzero_si;
  if (arg0 == E_DImode)
    return CODE_FOR_clzero_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_clzero (machine_mode arg0, rtx x0)
{
  insn_code code = maybe_code_for_clzero (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 1);
      return GEN_FCN (code) (x0);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_movdir64b (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_movdir64b_si;
  if (arg0 == E_DImode)
    return CODE_FOR_movdir64b_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_movdir64b (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_movdir64b (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_enqcmd (int arg0, machine_mode arg1)
{
  if (arg0 == 79
      && arg1 == E_SImode)
    return CODE_FOR_enqcmd_si;
  if (arg0 == 80
      && arg1 == E_SImode)
    return CODE_FOR_enqcmds_si;
  if (arg0 == 79
      && arg1 == E_DImode)
    return CODE_FOR_enqcmd_di;
  if (arg0 == 80
      && arg1 == E_DImode)
    return CODE_FOR_enqcmds_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_enqcmd (int arg0, machine_mode arg1, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_enqcmd (arg0, arg1);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_umonitor (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_umonitor_si;
  if (arg0 == E_DImode)
    return CODE_FOR_umonitor_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_umonitor (machine_mode arg0, rtx x0)
{
  insn_code code = maybe_code_for_umonitor (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 1);
      return GEN_FCN (code) (x0);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_sse4_1_insertps (machine_mode arg0)
{
  if (arg0 == E_V2SFmode)
    return CODE_FOR_sse4_1_insertps_v2sf;
  if (arg0 == E_V2SImode)
    return CODE_FOR_sse4_1_insertps_v2si;
  if (arg0 == E_V4SImode)
    return CODE_FOR_sse4_1_insertps_v4si;
  if (arg0 == E_V4SFmode)
    return CODE_FOR_sse4_1_insertps_v4sf;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_sse4_1_insertps (machine_mode arg0, rtx x0, rtx x1, rtx x2, rtx x3)
{
  insn_code code = maybe_code_for_sse4_1_insertps (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 4);
      return GEN_FCN (code) (x0, x1, x2, x3);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_vec_set_0 (machine_mode arg0)
{
  if (arg0 == E_V8HImode)
    return CODE_FOR_vec_setv8hi_0;
  if (arg0 == E_V8HFmode)
    return CODE_FOR_vec_setv8hf_0;
  if (arg0 == E_V8BFmode)
    return CODE_FOR_vec_setv8bf_0;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_vec_set_0 (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_vec_set_0 (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_vec_extract_lo (machine_mode arg0)
{
  if (arg0 == E_V32HImode)
    return CODE_FOR_vec_extract_lo_v32hi;
  if (arg0 == E_V32HFmode)
    return CODE_FOR_vec_extract_lo_v32hf;
  if (arg0 == E_V32BFmode)
    return CODE_FOR_vec_extract_lo_v32bf;
  if (arg0 == E_V16HImode)
    return CODE_FOR_vec_extract_lo_v16hi;
  if (arg0 == E_V16HFmode)
    return CODE_FOR_vec_extract_lo_v16hf;
  if (arg0 == E_V16BFmode)
    return CODE_FOR_vec_extract_lo_v16bf;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_vec_extract_lo (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_vec_extract_lo (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_vec_extract_hi (machine_mode arg0)
{
  if (arg0 == E_V32HImode)
    return CODE_FOR_vec_extract_hi_v32hi;
  if (arg0 == E_V32HFmode)
    return CODE_FOR_vec_extract_hi_v32hf;
  if (arg0 == E_V32BFmode)
    return CODE_FOR_vec_extract_hi_v32bf;
  if (arg0 == E_V16HImode)
    return CODE_FOR_vec_extract_hi_v16hi;
  if (arg0 == E_V16HFmode)
    return CODE_FOR_vec_extract_hi_v16hf;
  if (arg0 == E_V16BFmode)
    return CODE_FOR_vec_extract_hi_v16bf;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_vec_extract_hi (machine_mode arg0, rtx x0, rtx x1)
{
  insn_code code = maybe_code_for_vec_extract_hi (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 2);
      return GEN_FCN (code) (x0, x1);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_vec_interleave_high (machine_mode arg0)
{
  if (arg0 == E_V8HImode)
    return CODE_FOR_vec_interleave_highv8hi;
  if (arg0 == E_V8HFmode)
    return CODE_FOR_vec_interleave_highv8hf;
  if (arg0 == E_V8BFmode)
    return CODE_FOR_vec_interleave_highv8bf;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_vec_interleave_high (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_vec_interleave_high (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_vec_interleave_low (machine_mode arg0)
{
  if (arg0 == E_V8HImode)
    return CODE_FOR_vec_interleave_lowv8hi;
  if (arg0 == E_V8HFmode)
    return CODE_FOR_vec_interleave_lowv8hf;
  if (arg0 == E_V8BFmode)
    return CODE_FOR_vec_interleave_lowv8bf;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_vec_interleave_low (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_vec_interleave_low (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}

insn_code
maybe_code_for_sse3_monitor (machine_mode arg0)
{
  if (arg0 == E_SImode)
    return CODE_FOR_sse3_monitor_si;
  if (arg0 == E_DImode)
    return CODE_FOR_sse3_monitor_di;
  return CODE_FOR_nothing;
}

rtx
maybe_gen_sse3_monitor (machine_mode arg0, rtx x0, rtx x1, rtx x2)
{
  insn_code code = maybe_code_for_sse3_monitor (arg0);
  if (code != CODE_FOR_nothing)
    {
      gcc_assert (insn_data[code].n_generator_args == 3);
      return GEN_FCN (code) (x0, x1, x2);
    }
  else
    return NULL_RTX;
}
